TYPESYSTEM ProjectTypeSystem;

SCRIPT GrammarBuilder;
Document{-> CALL(GrammarBuilder)};



//C1***************************
//SCRIPT C1_Level.C1_Nouns;


//1.NounPhrases
//1.NounPhraseWithPossessiveSWithoutNoun
(POS_NOUN POS{FEATURE("PosValue", "POS")} PM) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounPhraseWithPossessiveSWithoutNoun", "level"="C1")};
(POS{FEATURE("PosValue", "NNS")} POS{FEATURE("PosValue", "POS")} PM) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounPhraseWithPossessiveSWithoutNoun", "level"="C1")};

//2.NominalisationFormality
(W{REGEXP("(?i)output|rest")}) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NominalisationFormality", "level"="C1")};

//3.WHCleftFocuse
(WHWord POS_NOUN POS_VERB Particle? Be) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="WHCleftFocuse", "level"="C1")};


//2.TypesNoun
//4.FormIngFormsAbstractNouns(?)
(W{REGEXP("(?i)learning|advertising|teaching")}) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="FormIngFormsAbstractNouns", "level"="C1")};


//3.UncountableNoun
//5.UncountableNouns
(UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="UncountableNoun", "superCategory"="Noun", "name"="UncountableNouns", "level"="C1")};



//SCRIPT C1_Level.C1_Pronouns;


//1.PossessivePronoun
//1.OursAsSubject
(W{REGEXP("(?i)ours")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsSubject", "level"="C1")};


//2.SubjectObjectPronoun
//2.SubjectItToPassive
(W{REGEXP("(?i)it")} Be Done) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectItToPassive", "level"="C1")};


//3.DemonstrativesPronoun
//3.ThatOfThoseOf
(W{REGEXP("(?i)that")} W{REGEXP("(?i)of")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThatOfThoseOf", "level"="C1")};
(W{REGEXP("(?i)those")} W{REGEXP("(?i)of")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThatOfThoseOf", "level"="C1")};


//4.QuantityPronoun
//4.NoneSubstitution
(W{REGEXP("(?i)none")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="NoneSubstitution", "level"="C1")};

//5.FormalQuantity
(W{REGEXP("(?i)few|many|most|others")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="FormalQuantity", "level"="C1")};

//6.ModifiedQuantity
(W{REGEXP("(?i)very|too|so|few|many")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="ModifiedQuantity", "level"="C1")};

//7.RelativePronounsQuantity
(W{REGEXP("(?i)some")} W{REGEXP("(?i)of")} RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="RelativePronounsQuantity", "level"="C1")};
(W{REGEXP("(?i)many")} W{REGEXP("(?i)of")} RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="RelativePronounsQuantity", "level"="C1")};


//5.SubstitutionPronoun, one, ones, none
//8.NoneSubstitution
(W{REGEXP("(?i)none")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="NoneSubstitution", "level"="C1")};


//6.IndefinitePronoun - thing, -one, -body etc
//9.AnythingFocusSubstitution
(W{REGEXP("(?i)anything")}) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="AnythingFocusSubstitution", "level"="C1")};

//10.AnythingEllipsisSubstitution
(W{REGEXP("(?i)anything")}) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="AnythingEllipsisSubstitution", "level"="C1")};


//7.ReciprocalPronoun
//11.EachTheOthersAsComplement
(W{REGEXP("(?i)each")} # W{REGEXP("(?i)the")} W{REGEXP("(?i)other")}) {-> CREATE(GrammarProfile, "subCategory"="ReciprocalPronoun", "superCategory"="Pronoun", "name"="EachTheOthersAsComplement", "level"="C1")};
(W{REGEXP("(?i)each")} # W{REGEXP("(?i)the")} W{REGEXP("(?i)others")}) {-> CREATE(GrammarProfile, "subCategory"="ReciprocalPronoun", "superCategory"="Pronoun", "name"="EachTheOthersAsComplement", "level"="C1")};




//SCRIPT C1_Level.C1_Adjectives;


//1.CombiningAdjective
//1.CompoundAdjectives 
(POS_ADJ{CONTAINS(SPECIAL)})  {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CompoundAdjectives", "level"="C1")};


//2.ModifyingAdjective
//2.WithExtremeAdverbs
(W{REGEXP("(?i)absolutely")}  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithExtremeAdverbs", "level"="C1")}; 
(W{REGEXP("(?i)extremely")}  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithExtremeAdverbs", "level"="C1")}; 
(W{REGEXP("(?i)incredibly")}  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithExtremeAdverbs", "level"="C1")}; 
(W{REGEXP("(?i)totally")}  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithExtremeAdverbs", "level"="C1")}; 


//3.PositionAdjective
//3.PastParticipleAsAdjective
(NC Done) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="PastParticipleAsAdjective", "level"="C1")}; 


//4.SuperlativesAdjective
//4.WithNounAndPostmodifierSuperlatives
(Superlative POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithNounAndPostmodifierSuperlatives", "level"="C1")}; 

//5.WithPostmodifierAndNounSuperlatives
(Superlative POS_NOUN POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithPostmodifierAndNounSuperlatives", "level"="C1")}; 
(W{REGEXP("(?i)her")} POS{FEATURE("PosValue", "JJS")}  POS_NOUN W{REGEXP("(?i)ever")} ) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithPostmodifierAndNounSuperlatives", "level"="C1")}; 
(W{REGEXP("(?i)her")} W{REGEXP("(?i)most")}  POS_ADJ   POS_NOUN W{REGEXP("(?i)ever")} ) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithPostmodifierAndNounSuperlatives", "level"="C1")}; 
(W{REGEXP("(?i)her")} W{REGEXP("(?i)least")}  POS_ADJ  POS_NOUN W{REGEXP("(?i)ever")} ) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithPostmodifierAndNounSuperlatives", "level"="C1")}; 



//SCRIPT C1_Level.C1_Adverbs;

//1.AdverbsAsModifiers
//1.DegreeWithAdjectivesAdverbAsModifiers
(Degree POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="DegreeWithAdjectivesAdverbAsModifiers", "level"="C1")}; 

//2.CertaintyAdverbAsModifiers
(Certainty) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="CertaintyAdverbAsModifiers", "level"="C1")};

//3.StanceAdverbAsModifiers
(Stance) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="StanceAdverbAsModifiers", "level"="C1")};

//2.AdverbsAndAdverbPhrases: types and meanings
//4.DegreeModifyingAdverbs
(Degree POS_ADV) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeModifyingAdverbs", "level"="C1")}; 

//5.DegreeModifyingComparatives
(Degree Comparative) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeModifyingComparatives", "level"="C1")}; 


//3.AdverbPhrases - form
//6.AdverbAdverb
(POS_ADV POS_ADV) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="AdverbAdverb", "level"="C1")}; 

//7.AdverbEnough
(POS_ADV W{REGEXP("(?i)enough")}) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="AdverbEnough", "level"="C1")}; 

//8.AdverbPrepositionalPhrasesHighlight
(POS_ADV PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="AdverbPrepositionalPhrasesHighlight", "level"="C1")}; 



//SCRIPT C1_Level.C1_Determiners;

//1.PossessivesDeterminer
//1.OneSPossessives
(W{REGEXP("(?i)one")} POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="OneSPossessives", "level"="C1")};

//2.QuantityDeterminer
//2.EitherNeitherWithSingularNouns
(W{REGEXP("(?i)either")} POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="EitherNeitherWithSingularNouns", "level"="C1")};
(W{REGEXP("(?i)neither")} POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="EitherNeitherWithSingularNouns", "level"="C1")};

//3.EitherNeitherOfDeterminersWithPluralNouns
(W{REGEXP("(?i)either|neither")}  W{REGEXP("(?i)of")} Determiner? POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="EitherNeitherOfDeterminersWithPluralNouns", "level"="C1")};
(W{REGEXP("(?i)either|neither")}  W{REGEXP("(?i)of")} Determiner? POS_PRON)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="EitherNeitherOfDeterminersWithPluralNouns", "level"="C1")};

//4.Hyperbole
(DeterminerOf POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="Hyperbole", "level"="C1")};






//SCRIPT C1_Level.C1_Conjunctions;


//1.CoordinatingConjunction
//1.YetConcessive
(W{REGEXP("(?i)and")} W{REGEXP("(?i)yet")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="YetConcessive", "level"="C1")};
(W{REGEXP("(?i)yet")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="YetConcessive", "level"="C1")};

//2.EitherOr
(W{REGEXP("(?i)either")} # W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="EitherOr", "level"="C1")};

//3.NotOnlyButAlso
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} # W{REGEXP("(?i)but")} W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="NotOnlyButAlso", "level"="C1")};

//4.NotOnlyButAlsoWithInversion
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} Do # W{REGEXP("(?i)but")} NC W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="NotOnlyButAlsoWithInversion", "level"="C1")};


//2.SubordinatingConjunction
//5.FocusSubordinating
(SimpleSubordinatingConjunction NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="SubordinatingConjunction", "superCategory"="Conjunction", "name"="FocusSubordinating", "level"="C1")};



//SCRIPT C1_Level.C1_DiscourseMarkers;


//1.DiscourseMarkersInWriting
//1.TextualReference
(Reference) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="TextualReference", "level"="C1")};



//SCRIPT C1_Level.C1_Focus;


//1.Focus
//1.FixedExpressionFronting
(FrontingExpression) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="FixedExpressionFronting", "level"="C1")};

//2.ImperativesFocus
(POS{FEATURE("PosValue", "VB")} NC) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ImperativesFocus", "level"="C1")};

//3.WhatCleftClause
(W{REGEXP("(?i)what")} POS_PRON POS_VERB Preposition? Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WhatCleftClause", "level"="C1")};
(W{REGEXP("(?i)what")} POS_NOUN POS_VERB Preposition? Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WhatCleftClause", "level"="C1")};

//4.WHCleftClauseTitles
(WHWord NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WHCleftClauseTitles", "level"="C1")};

//5.NonfiniteWithEDClauses
(DoneNonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="NonfiniteWithEDClauses", "level"="C1")};


//SCRIPT C1_Level.C1_Negation;

//1.Negation
//1.NoneSubstitution
(W{REGEXP("(?i)none")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NoneSubstitution", "level"="C1")};

//2.NotAllNotEvery
(W{REGEXP("(?i)not")} W{REGEXP("(?i)everyone|everything|every|all")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotAllNotEvery", "level"="C1")};

//3.NotOnlyButAlsoWithInversion
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} POS_VERB # W{REGEXP("(?i)but")} NC POS_VERB W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotOnlyButAlsoWithInversion", "level"="C1")};
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} POS_VERB #  NC W{REGEXP("(?i)also")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotOnlyButAlsoWithInversion", "level"="C1")};

//4.NotStanceAdverbHedging
(Not Stance) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotStanceAdverbHedging", "level"="C1")};

//5.FormalNegation
DECLARE Very;
(W{REGEXP("(?i)very")}){-> MARK(Very)};
((Very)? W{REGEXP("(?i)few")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="FormalNegation", "level"="C1")};

//6.WhatsoeverEmphasis
(W{REGEXP("(?i)no")} POS_NOUN W{REGEXP("(?i)whatsoever")})  {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="WhatsoeverEmphasis", "level"="C1")};


//SCRIPT C1_Level.C1_Questions;

//1.AlternativesQuestion
//1.StrongAlternative
(W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="StrongAlternative", "level"="C1")};

//2.ElliptedModalHedging
(W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="ElliptedModalHedging", "level"="C1")};


//2.TagsQuestion
//3.TagsWithThereBe
(W{REGEXP("(?i)there")} Be) {-> CREATE(GrammarProfile, "subCategory"="TagsQuestion", "superCategory"="Question", "name"="TagsWithThereBe", "level"="C1")};


//3.WhQuestion
//4.FocusWH
(WHWord) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="FocusWH", "level"="C1")};







//SCRIPT C1_Level.C1_Verbs;

//1.PhrasalPrepositionalverb
//1.PhrasalPrepositionalVerbStrandedPreposition
(POS_VERB Particle Preposition PERIOD) {-> CREATE(GrammarProfile, "subCategory"="PhrasalPrepositionalverb", "superCategory"="Verb", "name"="PhrasalPrepositionalVerbStrandedPreposition", "level"="C1")};


//2.PhrasalVerb
//2.VerbPronounParticlePhrasal
(POS_VERB POS_PRON  Particle) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="VerbPronounParticlePhrasal", "level"="C1")};


//3.PatternsWithToAndIng
//3.VerbsOfSensesObjectInfinitive
(POS_VERB NC POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbsOfSensesObjectInfinitive", "level"="C1")};


//SCRIPT C1_Level.C1_Modality;

//1.AdjectivesModality
//1.ModifyingAdjectivesHedging
(Degree POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="ModifyingAdjectivesHedging", "level"="C1")};

//2.ModifyingAdjectivesEmphasis
(POS_ADV POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="ModifyingAdjectivesEmphasis", "level"="C1")};

//2.Can
//3.PastNegativeDeductionsCan
(Lemma{FEATURE("value", "can")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="PastNegativeDeductionsCan", "level"="C1")};
(Lemma{FEATURE("value", "can")} Not Have BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="PastNegativeDeductionsCan", "level"="C1")};

//4.PassiveDeductionsCan
(Can Be Done) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="PassiveDeductionsCan", "level"="C1")};

//5.WithAdverbsCan
(Can POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="WithAdverbsCan", "level"="C1")};

//6.EmphasisCan
(Can POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="EmphasisCan", "level"="C1")};


//3.Dare
//7.IDareSay
 (W{REGEXP("(?i)I")} W{REGEXP("(?i)dare")} W{REGEXP("(?i)say")}) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="IDareSay", "level"="C1")};
 
//8.QuestionDare
(Lemma{FEATURE("value", "dare")}  NC POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="QuestionDare", "level"="B2")};

//9.HowDare
 (W{REGEXP("(?i)how")} W{REGEXP("(?i)dare")}) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="HowDare", "level"="C1")};
 
 
//4.ExpressionsWithBe
//10.BeSetToAssertion
(Be W{REGEXP("(?i)set")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeSetToAssertion", "level"="C1")};

//11.HedgingBe
(Lemma{FEATURE("value", "be")} Not POS_ADJ W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="HedgingBe", "level"="C1")};


//5.May
//12.MayWell
(W{REGEXP("(?i)may")} W{REGEXP("(?i)well")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="MayWell", "level"="C1")};

//13.PastNegativeMay
(Lemma{FEATURE("value", "may")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="PastNegativeMay", "level"="C1")};


//6.Might
//14.QuestionMight
(Might NC Not? POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="QuestionMight", "level"="C1")};

//15.PastNegativeMight
(Lemma{FEATURE("value", "might")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="PastNegativeMight", "level"="C1")};

//16.PossibilityInThePastMight
(Lemma{FEATURE("value", "might")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="PossibilityInThePastMight", "level"="C1")};
   
//17.ConsolingOrJustifying
(Might # W{REGEXP("(?i)but")}) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="ConsolingOrJustifying", "level"="C1")};

//18.PoliteCriticism
(Might NC Not? POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="PoliteCriticism", "level"="C1")};


   
//7.Need
//19.PastNegativeNeed
(Lemma{FEATURE("value", "need")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="Need", "superCategory"="Modality", "name"="PastNegativeNeed", "level"="C1")};


//8.Ought
//20.DesiredStatesWithThereOughtToBe
(W{REGEXP("(?i)there")} Ought W{REGEXP("(?i)to")} W{REGEXP("(?i)be")})  {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="DesiredStatesWithThereOughtToBe", "level"="C1")};

//21.EmphasisWithReallyOught
(W{REGEXP("(?i)really")} Ought ToDo)  {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="EmphasisWithReallyOught", "level"="C1")};

//22.PastAffirmativeOught
(Ought W{REGEXP("(?i)to")} Have Done)  {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="PastAffirmativeOught", "level"="C1")};


//9.Shall
//23.NegativeShall
(Lemma{FEATURE("value", "shall")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="NegativeShall", "level"="C1")};

//24.CommandsShall
(Shall POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="CommandsShall", "level"="C1")};


//10.Should
//25.AfterIfClausesShould
(W{REGEXP("(?i)If")} NC Should POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="AfterIfClausesShould", "level"="C1")};

//26.InversionShould
(Should NC POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="InversionShould", "level"="C1")};


//11.UsedTo
//27.QuestionsUsedTo
(WHWord Do NC W{REGEXP("(?i)used")} ToDo)  {-> CREATE(GrammarProfile, "subCategory"="UsedTo", "superCategory"="Modality", "name"="QuestionsUsedTo", "level"="C1")};


//12.Will
//28.HabitualAndTypicalWill
(Will)  {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="HabitualAndTypicalWill", "level"="C1")};


//13.Would
//29.WithAdverbsWould
(Would POS_ADV POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="WithAdverbsWould", "level"="C1")};



//14.AdverbsVerb
//30.NotNecessarily
(Not W{REGEXP("(?i)necessarily")})  {-> CREATE(GrammarProfile, "subCategory"="AdverbsVerb", "superCategory"="Modality", "name"="NotNecessarily", "level"="C1")};

//31.ResponseTokensNotNecessarily
(Not W{REGEXP("(?i)necessarily")})  {-> CREATE(GrammarProfile, "subCategory"="AdverbsVerb", "superCategory"="Modality", "name"="ResponseTokensNotNecessarily", "level"="C1")};




//SCRIPT C1_Level.C1_Present;

//1.PresentContinuous
//1.RhetoricalQuestions
(Is NC Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="RhetoricalQuestions", "level"="C1")};


//2.PresentSimple
//2.NegativeQuestionsPersuasionPresentSimple
(Doesnt? POS_PRON POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeQuestionsPersuasionPresentSimple", "level"="C1")};
(Doesnt? POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeQuestionsPersuasionPresentSimple", "level"="C1")};

//3.NegativeQuestionsOpinionPresentSimple
(Doesnt? POS_PRON POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeQuestionsOpinionPresentSimple", "level"="C1")};
(Doesnt? POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeQuestionsOpinionPresentSimple", "level"="C1")};
(Doesnt? POS_PRON W{REGEXP("(?i)all")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeQuestionsOpinionPresentSimple", "level"="C1")};

//4.ReportingVerbsPresentSimple
(Lemma{FEATURE("value", "demonstrate")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="ReportingVerbsPresentSimple", "level"="C1")};
(Lemma{FEATURE("value", "illustrate")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="ReportingVerbsPresentSimple", "level"="C1")};


//SCRIPT C1_Level.C1_Past;

//1.PastPerfectSimple
//1.InversionImagedPast
(Had NC Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionImagedPast", "level"="C1")};


//2.PastSimple
//2.NotOnlyButAlsoWithInversion
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} Did # W{REGEXP("(?i)but")}  W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="NotOnlyButAlsoWithInversion", "level"="C1")};

//3.QuestionsPastSimple 

(Did NC W{REGEXP("(?i)all")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="C1")};
(Did NC W{REGEXP("(?i)all")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="C1")};
(Did NC  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="C1")};
(Did NC ) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="C1")};

//4.ComplexOrderingOfPastEvents
(Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="ComplexOrderingOfPastEvents", "level"="C1")};

//5.ForEmphasisWithDid
(W{REGEXP("(?i)did")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="ForEmphasisWithDid", "level"="C1")};

//6.PolitenessIThought
(W{REGEXP("(?i)I")} W{REGEXP("(?i)thought")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="PolitenessIThought", "level"="C1")};



//3.PresentPerfectSimple
//7.NegativePresentPerfectSimple
(Hasnt Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="NegativePresentPerfectSimple", "level"="C1")};


//SCRIPT C1_Level.C1_Future;

//1.FutureContinuous
//1.ExpectationsWithMightAndMay
(Might POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureContinuous", "superCategory"="Future", "name"="ExpectationsWithMightAndMay", "level"="C1")};
(May POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureContinuous", "superCategory"="Future", "name"="ExpectationsWithMightAndMay", "level"="C1")};


//2.FuturePerfectSimple
//2.WithAdverbsFuturePerfectSimple
(WillShall POS_ADV Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="WithAdverbsFuturePerfectSimple", "level"="C1")};

//3.AssumptionsFuturePerfectSimple
(Will POS_ADV Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="AssumptionsFuturePerfectSimple", "level"="C1")};
(Will Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="AssumptionsFuturePerfectSimple", "level"="C1")};

//4.PolitenessFuturePerfectSimple
(Will POS_ADV Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="PolitenessFuturePerfectSimple", "level"="C1")};
(Will Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="PolitenessFuturePerfectSimple", "level"="C1")};


//3.FutureWithWillAndShall
//5.NegativeShall
(Lemma{FEATURE("value", "shall")} Not) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="NegativeShall", "level"="C1")};


//4.FutureWithBeGoingTo
//6.WithAdverbsBeGoingTo
(Be POS_ADV Going ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="WithAdverbsBeGoingTo", "level"="C1")};


//5.PresentSimpleForFutureUse
//7.WithByTheTime
(W{REGEXP("(?i)by")} W{REGEXP("(?i)the")} W{REGEXP("(?i)time")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimpleForFutureUse", "superCategory"="Future", "name"="WithByTheTime", "level"="C1")};

//8.SuggestionsObligation
(POS_VERB W{REGEXP("(?i)that")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimpleForFutureUse", "superCategory"="Future", "name"="SuggestionsObligation", "level"="C1")};


//SCRIPT C1_Level.C1_Passives;

//1.Passives: form
//1.NonFiniteClausePassives
(W{REGEXP("(?i)being")} Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="NonFiniteClausePassives", "level"="C1")};

//2.PresentContiniousNegativePassives
(Be BeingDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentContiniousNegativePassives", "level"="C1")};

//3.SummarisingEvaluatingWithIt
(W{REGEXP("(?i)it")} ModalVerb Be Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="SummarisingEvaluatingWithIt", "level"="C1")};
(W{REGEXP("(?i)it")} Have Be Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="SummarisingEvaluatingWithIt", "level"="C1")};


//2.GetAndHavePassive
//4.GetObejectED
(Lemma{FEATURE("value", "get")} NC Done) {-> CREATE(GrammarProfile, "subCategory"="GetAndHavePassive", "superCategory"="Passive", "name"="GetObejectED", "level"="C1")};

//5.GetObejectING
(Lemma{FEATURE("value", "get")} NC Doing) {-> CREATE(GrammarProfile, "subCategory"="GetAndHavePassive", "superCategory"="Passive", "name"="GetObejectING", "level"="C1")};



//SCRIPT C1_Level.C1_ReportedSpeech;


//SCRIPT C1_Level.C1_Clauses;

//1.ComparativesClause
//1.SuperlativeAdverbBestClause
(W{REGEXP("(?i)the")} W{REGEXP("(?i)best")} NC Can) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SuperlativeAdverbBestClause", "level"="C1")}; 
(W{REGEXP("(?i)the")} W{REGEXP("(?i)best")} NC Could) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SuperlativeAdverbBestClause", "level"="C1")}; 


//2.CoordinatedClause
//2.NotOnlyButAlsoWithInversionFocus 

(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} # W{REGEXP("(?i)but")} W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="NotOnlyButAlsoWithInversionFocus", "level"="C1")}; 
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} # W{REGEXP("(?i)but")} ) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="NotOnlyButAlsoWithInversionFocus", "level"="C1")}; 


//3.ImperativesClause
//3.LetThirdPersonPronounPermissionOrder
(W{REGEXP("(?i)let")} W{REGEXP("(?i)him")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounPermissionOrder", "level"="C1")}; 
(W{REGEXP("(?i)let")} W{REGEXP("(?i)her")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounPermissionOrder", "level"="C1")}; 
(W{REGEXP("(?i)let")} W{REGEXP("(?i)them")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounPermissionOrder", "level"="C1")}; 

//4.DontLetPronounPermissionOrder
(Dont W{REGEXP("(?i)let")} POS_PRON  POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="DontLetPronounPermissionOrder", "level"="C1")}; 

//5.PointingInFormalContext
(POS{FEATURE("PosValue", "VB")} NC) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="PointingInFormalContext", "level"="C1")}; 
(POS{FEATURE("PosValue", "VB")} POS_ADP NC) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="PointingInFormalContext", "level"="C1")}; 
(POS{FEATURE("PosValue", "VB")} POS_ADV) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="PointingInFormalContext", "level"="C1")}; 

//6.ImperativesAndConditional
(POS{FEATURE("PosValue", "VB")} NC W{REGEXP("(?i)and")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="ImperativesAndConditional", "level"="C1")}; 


//4.SubordinatedClause
//7.NonFiniteAfterIf
(W{REGEXP("(?i)if")} NonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteAfterIf", "level"="C1")}; 

//8.InversionSubordinated
(Should NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="InversionSubordinated", "level"="C1")}; 
(Had NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="InversionSubordinated", "level"="C1")}; 
(Was NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="InversionSubordinated", "level"="C1")}; 

//9.NonFiniteWithEdClausesFocus
(Done PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteWithEdClausesFocus", "level"="C1")}; 
(W{REGEXP("(?i)based")} PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteWithEdClausesFocus", "level"="C1")}; 
(W{REGEXP("(?i)given")} NC W{REGEXP("(?i)explained")}) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteWithEdClausesFocus", "level"="C1")}; 

//10.NotIngClause
(Not Doing) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NotIngClause", "level"="C1")}; 

//5.ConditionalClause
//11.IfPastPerfectModalVerbsImaginedSituationRegret
(W{REGEXP("(?i)if")} NC Had Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfPastPerfectModalVerbsImaginedSituationRegret", "level"="C1")}; 
(NC ModalVerb Have Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfPastPerfectModalVerbsImaginedSituationRegret", "level"="C1")}; 

//12.ElliptedIfClause
(W{REGEXP("(?i)if")} Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="ElliptedIfClause", "level"="C1")}; 

//13.IfShouldFormalPolite
(W{REGEXP("(?i)if")} W{REGEXP("(?i)you")} W{REGEXP("(?i)should")}) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfShouldFormalPolite", "level"="C1")}; 

//14.InvertedConditionalClauseShould
(W{REGEXP("(?i)should")} NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="InvertedConditionalClauseShould", "level"="C1")}; 
(W{REGEXP("(?i)should")} W{REGEXP("(?i)there")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="InvertedConditionalClauseShould", "level"="C1")}; 

