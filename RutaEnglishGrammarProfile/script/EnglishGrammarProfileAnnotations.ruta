TYPESYSTEM ProjectTypeSystem;
SCRIPT GrammarBuilder;
Document{-> CALL(GrammarBuilder)};


//A1**********:
    //A1_Level.A1_Nouns;

//1.NounPhrases
//1.DeterminerNoun
(Determiner POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="DeterminerNoun", "level"="A1")};

//2.DeterminerAdjectiveNoun
(Determiner POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="DeterminerAdjectiveNoun", "level"="A1")};

//3.AdjectivePluralNoun
(POS_ADJ POS{FEATURE("PosValue", "NNS")}) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="AdjectivePluralNoun", "level"="A1")};

//4.NounNoun
(POS_NOUN POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounNoun", "level"="A1")};


//2.TypesNoun
//5.CommonNouns
(W{REGEXP("(?i)house|time|friend")}) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="CommonNouns", "level"="A1")};

//6.ProperNouns
(CW) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="ProperNouns", "level"="A1")};

//7.CompoundNouns
(NC) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="CompoundNouns", "level"="A1")};


//3.Plural
//8.PluralS
(POS{FEATURE("PosValue", "NNS")}) {-> CREATE(GrammarProfile, "subCategory"="PluralNoun", "superCategory"="Noun", "name"="PluralS", "level"="A1")};


//4.NounPhrasesGrammaticalFunctions - grammatical functions
//9.AsSubjectsNounPhrases
(NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="NounPhrasesGrammaticalFunctions", "superCategory"="Noun", "name"="AsSubjectsNounPhrases", "level"="A1")};

//10.AsObjectsNounPhrases
(POS_VERB NC) {-> CREATE(GrammarProfile, "subCategory"="NounPhrasesGrammaticalFunctions", "superCategory"="Noun", "name"="AsObjectsNounPhrases", "level"="A1")};

//11.AsComplementOfPrepositionsNounPhrases
(PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="NounPhrasesGrammaticalFunctions", "superCategory"="Noun", "name"="AsComplementOfPrepositionsNounPhrases", "level"="A1")};

//12.AsComplementOfPrepositionsBeNounPhrases
(Be NC) {-> CREATE(GrammarProfile, "subCategory"="NounPhrasesGrammaticalFunctions", "superCategory"="Noun", "name"="AsComplementOfPrepositionsBeNounPhrases", "level"="A1")};

//13.AsAdjunctsNounPhrases
(TimeAdjunct) {-> CREATE(GrammarProfile, "subCategory"="NounPhrasesGrammaticalFunctions", "superCategory"="Noun", "name"="AsAdjunctsNounPhrases", "level"="A1")};



 
//A1_Level.A1_Pronouns;
//1.SubjectObject
//1.ObjectIt
(POS_VERB W{REGEXP("(?i)it")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectIt", "level"="A1")};

//2.ObjectMeYouHerHimUsThem
(POS_VERB W{REGEXP("(?i)me")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectMeYouHerHimUsThem", "level"="A1")};
(POS_VERB W{REGEXP("(?i)you")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectMeYouHerHimUsThem", "level"="A1")};
(POS_VERB W{REGEXP("(?i)her")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectMeYouHerHimUsThem", "level"="A1")};
(POS_VERB W{REGEXP("(?i)him")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectMeYouHerHimUsThem", "level"="A1")};
(POS_VERB W{REGEXP("(?i)us")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectMeYouHerHimUsThem", "level"="A1")};
(POS_VERB W{REGEXP("(?i)them")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectMeYouHerHimUsThem", "level"="A1")};

//3.ObjectWithPreposition
(POS_VERB Preposition W{REGEXP("(?i)me")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectWithPreposition", "level"="A1")};
(POS_VERB Preposition W{REGEXP("(?i)you")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectWithPreposition", "level"="A1")};
(POS_VERB Preposition W{REGEXP("(?i)her")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectWithPreposition", "level"="A1")};
(POS_VERB Preposition W{REGEXP("(?i)him")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectWithPreposition", "level"="A1")};
(POS_VERB Preposition W{REGEXP("(?i)us")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectWithPreposition", "level"="A1")};
(POS_VERB Preposition W{REGEXP("(?i)them")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectWithPreposition", "level"="A1")};
(POS_VERB Preposition W{REGEXP("(?i)it")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjectWithPreposition", "level"="A1")};

//4.SubjectItForFirstPerson
(W{REGEXP("(?i)it")} Be) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectItForFirstPerson", "level"="A1")};

//5.SubjectQuestions
(POS_VERB W{REGEXP("(?i)I|you|we|they")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectQuestions", "level"="A1")};
(ModalVerb W{REGEXP("(?i)I|you|we|they")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectQuestions", "level"="A1")};

//6.SubjectQuestionsWithBe
(Be W{REGEXP("(?i)it|you")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectQuestionsWithBe", "level"="A1")};

//7.SubjectStatements
(W{REGEXP("(?i)I|you|we|they|he|she|it")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectStatements", "level"="A1")};


//2.Indefinite - thing, -one, -body etc
//8.ObjectIndefinite
(VC IndefinitePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="ObjectIndefinite", "level"="A1")};

//9.EverythingSubject
(W{REGEXP("(?i)everything")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="EverythingSubject", "level"="A1")};



//A1_Level.A1_Adjectives;
//1.Combining
//1.CombiningTwoAdjectivesWithAnd
(POS_ADJ W{REGEXP("(?i)and")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningTwoAdjectivesWithAnd", "level"="A1")}; 


//2.Modifying
//2.WithVeryModifying
(W{REGEXP("(?i)very")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithVeryModifying", "level"="A1")}; 


//3.PositionAdjective
//3.AttributiveWithNouns
(POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="AttributiveWithNouns", "level"="A1")}; 

//4.PredicativeWithBe
(Be POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="PredicativeWithBe", "level"="A1")}; 


//4.Superlatives
//5.MyBestFriend
(W{REGEXP("(?i)my")} W{REGEXP("(?i)best")} W{REGEXP("(?i)friend")}) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="MyBestFriend", "level"="A1")}; 



//A1_Level.A1_Prepositions;
//1.Prepositions
//1.SimplePrepositions
(SimplePreposition) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="SimplePrepositions", "level"="A1")};

//2.PrepositionNounPhrase
(Preposition NC) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="PrepositionNounPhrase", "level"="A1")};




//A1_Level.A1_Adverbs;

//1.AdverbsAsModifiers
//1.TimeAdverbAsModifiers
(TimeAdv) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="TimeAdverbAsModifiers", "level"="A1")};

//2.PlaceAdverbAsModifiers
(Place) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="PlaceAdverbAsModifiers", "level"="A1")};

//3.FrequencyAdverbAsModifiers
(Frequency) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="FrequencyAdverbAsModifiers", "level"="A1")};

//4.VeryWithAdjetives
(W{REGEXP("(?i)very")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="VeryWithAdjetives", "level"="A1")};

//5.DegreeWithVerbs
(Degree POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="DegreeWithVerbs", "level"="A1")};
(POS_VERB NC Degree) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="DegreeWithVerbs", "level"="A1")};


//2.AdverbsAndAdverbPhrases: types and meanings
//6.VeryAdjectives
(W{REGEXP("(?i)very")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="VeryAdjectives", "level"="A1")};

//7.VeryTimeAdverbs
(W{REGEXP("(?i)very")} TimeAdv) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="VeryTimeAdverbs", "level"="A1")};

//8.DegreeAndTimeModifyingVerbs
(Degree POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeAndTimeModifyingVerbs", "level"="A1")};
(POS_VERB NC Degree) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeAndTimeModifyingVerbs", "level"="A1")};
(TimeAdv POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeAndTimeModifyingVerbs", "level"="A1")};

//9.PlaceComplement
(W{REGEXP("(?i)here")}) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="PlaceComplement", "level"="A1")};
(W{REGEXP("(?i)there")}) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="PlaceComplement", "level"="A1")};


//3.PositionAdverb
//10.DegreeBeforeAdjectives
(Degree POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="DegreeBeforeAdjectives", "level"="A1")};

//11.FrequencyMidPosition
(NC Frequency POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="FrequencyMidPosition", "level"="A1")};

//12.FrontPosition
(Adverb NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="FrontPosition", "level"="A1")};

//13.ReallyMidPosition
(NC W{REGEXP("(?i)really")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="ReallyMidPosition", "level"="A1")};

//14.TimeEndPosition
(TimeAdv PERIOD) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="TimeEndPosition", "level"="A1")};

//15.PlaceEndPosition
(Place PERIOD) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="PlaceEndPosition", "level"="A1")};


//4.AdverbPhrases - form
//16.VeryAdverb
(W{REGEXP("(?i)very")} TimeAdv) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="VeryAdverb", "level"="A1")};
(W{REGEXP("(?i)very")} Degree) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="VeryAdverb", "level"="A1")};



//A1_Level.A1_Determiners;
//1.Articles
//1.WithNounsArticles
(Article POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="WithNounsArticles", "level"="A1")};

//2.AAdjectives
(W{REGEXP("(?i)a|an")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="AAdjectives", "level"="A1")};

//3.AVeryAdjectives
(W{REGEXP("(?i)a")} W{REGEXP("(?i)very")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="AVeryAdjectives", "level"="A1")};

//4.PrepositionTheNoun
(Preposition W{REGEXP("(?i)the")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="PrepositionTheNoun", "level"="A1")};

//5.PrepositionNoArticle
(Preposition POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="PrepositionNoArticle", "level"="A1")};

//6.NoArticle
(W{-PARTOF(Article)}) (POS_NOUN) {-> CREATE(GrammarProfile,2, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner","name"="NoArticle", "level"="A1")};


//2.DemonstrativesDeterminer
//7.ThisWithSingularNouns
(W{REGEXP("(?i)this")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisWithSingularNouns", "level"="A1")};

//8.ThisPointing
(W{REGEXP("(?i)this")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisPointing", "level"="A1")};

//9.ThisFuture
(W{REGEXP("(?i)this")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisFuture", "level"="A1")};



//3.Possessives
//10.WithNounsPossessives
(POS{FEATURE("PosValue", "PRP$")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="WithNounsPossessives", "level"="A1")};


//4.QuantityDeterminer
//11.WithPluralNounsQuantity
(DeterminerWithPluralNouns POS{FEATURE("PosValue", "NNS")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="WithPluralNounsQuantity", "level"="A1")};

//12.WithSingularNounsQuantity
(DeterminerWithSingularNouns POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="WithSingularNounsQuantity", "level"="A1")};



//A1_Level.A1_Modality.;
//1.Can
//1.AffirmativeCan
(Lemma{FEATURE("value", "can")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="AffirmativeCan", "level"="A1")};

//2.NegativeCan
(Lemma{FEATURE("value", "can")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="NegativeCan", "level"="A1")};

//3.QuestionCan
(Can NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="QuestionCan", "level"="A1")};

//4.AbilityCan
(Can POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="AbilityCan", "level"="A1")};

//5.OffersCan
(Can NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="OffersCan", "level"="A1")};
(Can POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="OffersCan", "level"="A1")};

//6.PossibilityCan
(Can POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="PossibilityCan", "level"="A1")};

//7.RequestsCan
(Can NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="RequestsCan", "level"="A1")};


//2.Will
//8.AffirmativeWill
(Lemma{FEATURE("value", "will")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="AffirmativeWill", "level"="A1")};

//9.PlansAndIntentions
(Will POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="PlansAndIntentions", "level"="A1")};


//3.Would
//10.AffirmativeWithLike
(Lemma{FEATURE("value", "would")} W{REGEXP("(?i)like")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="AffirmativeWithLike", "level"="A1")};

//11.InvitationsWithLike
(Lemma{FEATURE("value", "would")} W{REGEXP("(?i)like")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="InvitationsWithLike", "level"="A1")};

//12.WishesAndPreferencesWithLike
(Lemma{FEATURE("value", "would")} W{REGEXP("(?i)like")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="WishesAndPreferencesWithLike", "level"="A1")};



//A1_Level.A1_Conjunctions;
//1.CoordinatingConjunction

//1.WordWord
(W W{REGEXP("(?i)and|but|or")} W) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="WordWord", "level"="A1")};

//2.PhrasePhrase
(ADJC W{REGEXP("(?i)and|but|or")} ADJC) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="PhrasePhrase", "level"="A1")};
(NC W{REGEXP("(?i)and|but|or")} NC) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="PhrasePhrase", "level"="A1")};
(PrepositionPhrase W{REGEXP("(?i)and|but|or")} PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="PhrasePhrase", "level"="A1")};

//3.ClauseClause(??)
(FiniteClause2 COMMA W{REGEXP("(?i)and|but|or")} FiniteClause2) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="ClauseClause", "level"="A1")};
(FiniteClause2  W{REGEXP("(?i)and|but|or")} FiniteClause2) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="ClauseClause", "level"="A1")};

//4.SentenceSentence(??)
(PERIOD W{REGEXP("(?i)and|but|or")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="SentenceSentence", "level"="A1")};

//5.Listing
(W{REGEXP("(?i)and")} NC) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="Listing", "level"="A1")};
(W{REGEXP("(?i)or")} NC) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="Listing", "level"="A1")};

//6.ButConcessive
(W{REGEXP("(?i)but")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="ButConcessive", "level"="A1")};


//2.SubordinatingConjunction
//7.Because
(W{REGEXP("(?i)because")}) {-> CREATE(GrammarProfile, "subCategory"="SubordinatingConjunction", "superCategory"="Conjunction", "name"="Because", "level"="A1")};


//A1_Level.A1_DiscourseMarkers;

//A1_Level.A1_Focus;

//A1_Level.A1_Negation;
//1.Negation
//1.MainVerbBeNegation
(Be Not) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="MainVerbBeNegation", "level"="A1")};

//2.AuxiliaryVerbDoPresentNegation
(Dont) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="AuxiliaryVerbDoPresentNegation", "level"="A1")};

//3.ModalVerbCanNegation
(Lemma{FEATURE("value", "can")} Not) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="ModalVerbCanNegation", "level"="A1")};



//A1_Level.A1_Questions;
//1.YesNo
//1.ModalVerbsYesNo
(ModalVerb NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="YesNo", "superCategory"="Question", "name"="ModalVerbsYesNo", "level"="A1")};


//A1_Level.A1_Verbs;
//1.Prepositional
//1.VerbPrepositionObject
(POS_VERB Preposition NC) {-> CREATE(GrammarProfile, "subCategory"="Prepositional", "superCategory"="Verb", "name"="VerbPrepositionObject", "level"="A1")};


//2.TypesVerb
//2.MainVerbs
(Present) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="MainVerbs", "level"="A1")};
(Past) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="MainVerbs", "level"="A1")};

//3.LinkingVerbBe
(Be) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="LinkingVerbBe", "level"="A1")};

//4.AuxiliaryVerbBe
(Be Doing) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="AuxiliaryVerbBe", "level"="A1")};

//5.ModalAuxiliaryVerbs
(ModalVerb POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="ModalAuxiliaryVerbs", "level"="A1")};
(ModalVerb NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="ModalAuxiliaryVerbs", "level"="A1")};


//3.PatternsWithToAndIng
//6.VerbToInfinitive
(POS_VERB ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbToInfinitive", "level"="A1")};

//7.LikeToInfinitiveOrIng
(Lemma{FEATURE("value", "like")} Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="LikeToInfinitiveOrIng", "level"="A1")};
(Lemma{FEATURE("value", "like")} Not Doing) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="LikeToInfinitiveOrIng", "level"="A1")};
(Lemma{FEATURE("value", "like")}  ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="LikeToInfinitiveOrIng", "level"="A1")};
(Lemma{FEATURE("value", "like")}  Doing) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="LikeToInfinitiveOrIng", "level"="A1")};

//8.WouldLikeTo
(Would W{REGEXP("(?i)like")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="WouldLikeTo", "level"="A1")};


//4.ThereIsAre
//9.ThereIs
(W{REGEXP("(?i)there")} W{REGEXP("(?i)is")} NC) {-> CREATE(GrammarProfile, "subCategory"="ThereIsAre", "superCategory"="Verb", "name"="ThereIs", "level"="A1")};

//10.ThereAre
(W{REGEXP("(?i)there")} W{REGEXP("(?i)are")} NC) {-> CREATE(GrammarProfile, "subCategory"="ThereIsAre", "superCategory"="Verb", "name"="ThereAre", "level"="A1")};


//5.Linking
//11.BeComplement
(Be NC) {-> CREATE(GrammarProfile, "subCategory"="Linking", "superCategory"="Verb", "name"="BeComplement", "level"="A1")};
(Be PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="Linking", "superCategory"="Verb", "name"="BeComplement", "level"="A1")};
(Be W{REGEXP("(?i)very")} W{REGEXP("(?i)clean")}) {-> CREATE(GrammarProfile, "subCategory"="Linking", "superCategory"="Verb", "name"="BeComplement", "level"="A1")};



//A1_Level.A1_Present;

//1.PresentContinuous
//1.AffirmativePresentContinuous
(W{REGEXP("(?i)am|is|are")} Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="AffirmativePresentContinuous", "level"="A1")};

//2.EventsInProgress
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="EventsInProgress", "level"="A1")};


//2.PresentSimple
//3.AffirmativePresentSimple
(POS{FEATURE("PosValue", "VBZ")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="AffirmativePresentSimple", "level"="A1")};
(POS{FEATURE("PosValue", "VBP")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="AffirmativePresentSimple", "level"="A1")};

//4.NegativePresentSimple
(Doesnt POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativePresentSimple", "level"="A1")};
(Dont POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativePresentSimple", "level"="A1")};

//5.WithReallyPresentSimple
(W{REGEXP("(?i)really")} Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="WithReallyPresentSimple", "level"="A1")};

//6.HabitsAndGeneralFacts
(Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="HabitsAndGeneralFacts", "level"="A1")};


//A1_Level.A1_Past;

//1.PastSimple
//1.AffirmativePastSimple
(POS{FEATURE("PosValue", "VBD")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="AffirmativePastSimple", "level"="A1")};

//2.EverydayEventsAndStates
(Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="EverydayEventsAndStates", "level"="A1")};


//A1_Level.A1_Future;
//1.FutureWithWillAndShall
//1.AffirmativeWill
(Lemma{FEATURE("value", "will")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="AffirmativeWill", "level"="A1")};

//2.PlansAndIntentionsWithWill
(Will POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="PlansAndIntentionsWithWill", "level"="A1")};



//A1_Level.A1_Passives;

//A1_Level.A1_ReportedSpeech;

//A1_Level.A1_Clauses;
//1.Coordinated

//1.MainClauseMainClause
(FiniteClause2 COMMA W{REGEXP("(?i)and|but|or")} FiniteClause2) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="MainClauseMainClause", "level"="A1")};
(FiniteClause2 W{REGEXP("(?i)and|but|or")} FiniteClause2) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="MainClauseMainClause", "level"="A1")};

//2.ClauseClauseElliptedSubject
(W{REGEXP("(?i)and|but|or")} POS_VERB NC) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="ClauseClauseElliptedSubject", "level"="A1")};
(W{REGEXP("(?i)and|but|or")} POS_VERB ) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="ClauseClauseElliptedSubject", "level"="A1")};

(W{REGEXP("(?i)and|but|or")} W{REGEXP("(?i)watch")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="ClauseClauseElliptedSubject", "level"="A1")};
(W{REGEXP("(?i)and|but|or")} W{REGEXP("(?i)watch")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="ClauseClauseElliptedSubject", "level"="A1")};

(W{REGEXP("(?i)and|but|or")} W{REGEXP("(?i)play")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="ClauseClauseElliptedSubject", "level"="A1")};
(W{REGEXP("(?i)and|but|or")} W{REGEXP("(?i)play")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="ClauseClauseElliptedSubject", "level"="A1")};


//2.Declarative
//3.AffirmativeDeclarative
(FiniteClause2) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="AffirmativeDeclarative", "level"="A1")};

//4.NegativeDeclarativeWithBe
(NC Lemma{FEATURE("value", "be")} Not POS_ADV  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="NegativeDeclarativeWithBe", "level"="A1")};
(NC Lemma{FEATURE("value", "be")} Not  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="NegativeDeclarativeWithBe", "level"="A1")};

//5.NegativeDeclarativeLexicalVerbs
(NC Dont POS_VERB NC) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="NegativeDeclarativeLexicalVerbs", "level"="A1")};
(NC Dont POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="NegativeDeclarativeLexicalVerbs", "level"="A1")};

//6.AffirmativeDeclarativeModalAuxiliaryVerbs
(NC ModalVerb POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="AffirmativeDeclarativeModalAuxiliaryVerbs", "level"="A1")};


//3.Interrogatives
//7.AffirmativeInterrogativeWithBe
(Be NC) {-> CREATE(GrammarProfile, "subCategory"="InterrogativesClause", "superCategory"="Clause", "name"="AffirmativeInterrogativeWithBe", "level"="A1")};


//4.Subordinated
//8.BecauseReasons
(W{REGEXP("(?i)because")}) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="BecauseReasons", "level"="A1")};








//A2*********************
//SCRIPT A2_Level.A2_Nouns;

//1.NounPhrases
//1.DeterminerUncountableNoun
(Determiner  UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="DeterminerUncountableNoun", "level"="A2")};

//2.DeterminerNoun
(Determiner  POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="DeterminerNoun", "level"="A2")};

//3.NounPhrasesWithAdjectives
(POS_ADJ POS_ADJ COMMA POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounPhrasesWithAdjectives", "level"="A2")};
(POS_ADJ POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounPhrasesWithAdjectives", "level"="A2")};

//4.WithRelativeClauseAsPostmodifier
(NC COMMA W{REGEXP("(?i)which")} VC) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="WithRelativeClauseAsPostmodifier", "level"="A2")};

//5.WithRelativeClauseAsComplement
(NC WHWord NC VC) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="WithRelativeClauseAsComplement", "level"="A2")};
(NC WHWord VC NC) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="WithRelativeClauseAsComplement", "level"="A2")};
(NC WHWord VC) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="WithRelativeClauseAsComplement", "level"="A2")};

//6.PossessionWithSNoun
(POS{FEATURE("PosValue", "PRP$")} POS_NOUN POS{FEATURE("PosValue", "POS")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="PossessionWithSNoun", "level"="A2")};


//2.TypesNoun
//7.IngFormsObject
(Preposition Doing) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="IngFormsObject", "level"="A2")};
(POS_VERB Doing) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="IngFormsObject", "level"="A2")};
(Preposition W{REGEXP("(?i)swimming")}) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="IngFormsObject", "level"="A2")};
(W{REGEXP("(?i)and")} W{REGEXP("(?i)going")}) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="IngFormsObject", "level"="A2")};
(POS_VERB W{REGEXP("(?i)dancing")}) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="IngFormsObject", "level"="A2")};
(POS_VERB W{REGEXP("(?i)windsurfing")} W{REGEXP("(?i)and")} W{REGEXP("(?i)scuba")} W{REGEXP("(?i)diving")}) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="IngFormsObject", "level"="A2")};

//3.PluralNoun
//8.PluralEs
(POS{FEATURE("PosValue", "NNS")}) {-> CREATE(GrammarProfile, "subCategory"="PluralNoun", "superCategory"="Noun", "name"="PluralEs", "level"="A2")};

//9.PluralIes
(POS{FEATURE("PosValue", "NNS")}) {-> CREATE(GrammarProfile, "subCategory"="PluralNoun", "superCategory"="Noun", "name"="PluralIes", "level"="A2")};

//10.IrregularPluralNouns
(IrregularPluralNoun) {-> CREATE(GrammarProfile, "subCategory"="PluralNoun", "superCategory"="Noun", "name"="IrregularPluralNouns", "level"="A2")};

//11.NounOnlyUsedInThePlural
(W{REGEXP("(?i)clothes")}) {-> CREATE(GrammarProfile, "subCategory"="PluralNoun", "superCategory"="Noun", "name"="NounOnlyUsedInThePlural", "level"="A2")};
(W{REGEXP("(?i)jeans")}) {-> CREATE(GrammarProfile, "subCategory"="PluralNoun", "superCategory"="Noun", "name"="NounOnlyUsedInThePlural", "level"="A2")};
(W{REGEXP("(?i)shorts")}) {-> CREATE(GrammarProfile, "subCategory"="PluralNoun", "superCategory"="Noun", "name"="NounOnlyUsedInThePlural", "level"="A2")};
(W{REGEXP("(?i)glasses")}) {-> CREATE(GrammarProfile, "subCategory"="PluralNoun", "superCategory"="Noun", "name"="NounOnlyUsedInThePlural", "level"="A2")};


//4.Uncountable
//12.UncountableNouns
(UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="UncountableNoun", "superCategory"="Noun", "name"="UncountableNouns", "level"="A2")};

//13.WithTheUncountableNouns
(W{REGEXP("(?i)the")} UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="UncountableNoun", "superCategory"="Noun", "name"="WithTheUncountableNouns", "level"="A2")};

//14.WithDeterminersQuantityUncountableNouns
(DeterminerWithUncountableNouns UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="UncountableNoun", "superCategory"="Noun", "name"="WithDeterminersQuantityUncountableNouns", "level"="A2")};

//15.ContainersQuantityExpressionsUncountableNouns
(W{REGEXP("(?i)a")} W{REGEXP("(?i)bottle")} W{REGEXP("(?i)of")} UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="UncountableNoun", "superCategory"="Noun", "name"="ContainersQuantityExpressionsUncountableNouns", "level"="A2")};
(W{REGEXP("(?i)a")} W{REGEXP("(?i)piece")} W{REGEXP("(?i)of")} UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="UncountableNoun", "superCategory"="Noun", "name"="ContainersQuantityExpressionsUncountableNouns", "level"="A2")};
(W{REGEXP("(?i)a")} W{REGEXP("(?i)cup")} W{REGEXP("(?i)of")} UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="UncountableNoun", "superCategory"="Noun", "name"="ContainersQuantityExpressionsUncountableNouns", "level"="A2")};


//SCRIPT A2_Level.A2_Pronouns;

//1.Possessive
//1.OfMine
(Determiner POS_NOUN W{REGEXP("(?i)of")} W{REGEXP("(?i)mine")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OfMine", "level"="A2")};

//2.Mine
(W{REGEXP("(?i)mine")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="Mine", "level"="A2")};

//3.YoursAsObject
(VC W{REGEXP("(?i)yours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="YoursAsObject", "level"="A2")};
(POS_VERB W{REGEXP("(?i)yours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="YoursAsObject", "level"="A2")};
(Preposition W{REGEXP("(?i)yours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="YoursAsObject", "level"="A2")};


//2.Reflexive
//4.SameSubjectAndObject
(Lemma{FEATURE("value", "enjoy")} W{REGEXP("(?i)myself|yourself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="SameSubjectAndObject", "level"="A2")};
(Lemma{FEATURE("value", "buy")} W{REGEXP("(?i)myself|yourself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="SameSubjectAndObject", "level"="A2")};


//3.SubjectObject
//5.SubjectEllipsisAfterHope
(W{REGEXP("(?i)hope")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectEllipsisAfterHope", "level"="A2")};

//6.SubjectEmptyIt
(W{REGEXP("(?i)it")} Be) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectEmptyIt", "level"="A2")};


//4.Demonstratives
//7.This
(W{REGEXP("(?i)this")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="This", "level"="A2")};

//8.ThisPointing
(W{REGEXP("(?i)this")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThisPointing", "level"="A2")};

//9.ThisAlreadyMentioned
(W{REGEXP("(?i)this")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThisAlreadyMentioned", "level"="A2")};

//10.ThisNow
(W{REGEXP("(?i)this")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThisNow", "level"="A2")};

//11.That
(W{REGEXP("(?i)That")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="That", "level"="A2")};

//12.ThatAlreadyMentioned
(W{REGEXP("(?i)That")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThatAlreadyMentioned", "level"="A2")};

//13.ResponseTokensWithThats
(W{REGEXP("(?i)That")} Be) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ResponseTokensWithThats", "level"="A2")};

//14.Closing
(W{REGEXP("(?i)That")} Be W{REGEXP("(?i)all")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="Closing", "level"="A2")};



//5.Quantity
//15.SomeAndAny
(W{REGEXP("(?i)some")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="SomeAndAny", "level"="A2")};
(W{REGEXP("(?i)any")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="SomeAndAny", "level"="A2")};

//16.SomeAsSubjectAndObject
(W{REGEXP("(?i)some")} VC) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="SomeAsSubjectAndObject", "level"="A2")};
(VC W{REGEXP("(?i)some")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="SomeAsSubjectAndObject", "level"="A2")};

//17.AnyAsObject
(VC W{REGEXP("(?i)any")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="AnyAsObject", "level"="A2")};

//18.WithOfObjectPronoun
( W{REGEXP("(?i)all")} W{REGEXP("(?i)of")} POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="WithOfObjectPronoun", "level"="A2")};
( W{REGEXP("(?i)both")} W{REGEXP("(?i)of")} POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="WithOfObjectPronoun", "level"="A2")};


//6.Substitution, one, ones, none
//19.One
(W{REGEXP("(?i)one")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="One", "level"="A2")};

//20.PreModifying
(Determiner POS_ADJ W{REGEXP("(?i)one")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="PreModifying", "level"="A2")};

//21.PostModifyingSpecifying
(W{REGEXP("(?i)one")} POS_ADJ W{REGEXP("(?i)one")} # PM) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="PostModifyingSpecifying", "level"="A2")};
(W{REGEXP("(?i)one")}  W{REGEXP("(?i)one")} # PM) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="PostModifyingSpecifying", "level"="A2")};


//7.Indefinite - thing, -one, -body etc
//22.ObjectOrComplement
(VC IndefinitePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="ObjectOrComplement", "level"="A2")};
(Preposition IndefinitePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="ObjectOrComplement", "level"="A2")};

//23.Subject
(W{REGEXP("(?i)someone")} VC) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="Subject", "level"="A2")};
(W{REGEXP("(?i)everyone")} VC) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="Subject", "level"="A2")};

//24.NegativeAnything
(Not # W{REGEXP("(?i)anything")}) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="NegativeAnything", "level"="A2")};

//25.WithAdjectiveSpecifying
(W{REGEXP("(?i)something")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithAdjectiveSpecifying", "level"="A2")};
(W{REGEXP("(?i)anything")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithAdjectiveSpecifying", "level"="A2")};

//26.WithToInfinitiveSpecifying
(W{REGEXP("(?i)something")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithToInfinitiveSpecifying", "level"="A2")};
(W{REGEXP("(?i)anything")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithToInfinitiveSpecifying", "level"="A2")};

//27.WithElse
(IndefinitePronoun W{REGEXP("(?i)else")}) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithElse", "level"="A2")};

//28.SomethingInVagueExpressions
(W{REGEXP("(?i)something")}) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="SomethingInVagueExpressions", "level"="A2")};


//8.GenericUse
//29.YouGenral
(W{REGEXP("(?i)you")}) {-> CREATE(GrammarProfile, "subCategory"="GenericUsePronoun", "superCategory"="Pronoun", "name"="YouGenral", "level"="A2")};



//SCRIPT A2_Level.A2_Adjectives;

//1.Combining
//1.CombiningTwoAdjectivesWithBut
(POS_ADJ W{REGEXP("(?i)but")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningTwoAdjectivesWithBut", "level"="A2")} ; 


//2.Comparatives
//2.ErComparatives
(POS{FEATURE("PosValue", "JJR")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="ErComparatives", "level"="A2")} ; 

//3.IerComparatives
(POS{FEATURE("PosValue", "JJR")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="IerComparatives", "level"="A2")} ; 

//4.BeforeNounsComparatives
(Comparative POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="BeforeNounsComparatives", "level"="A2")} ; 

//5.ComplementOfBeComparatives
(Be Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="ComplementOfBeComparatives", "level"="A2")} ; 

//6.DoubleConsonantErComparatives
(POS{FEATURE("PosValue", "JJR")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="DoubleConsonantErComparatives", "level"="A2")} ; 

//7.EndingInER
(POS{FEATURE("PosValue", "JJR")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="EndingInER", "level"="A2")} ; 

//8.IrregularComparatives
(IrregularComparatives) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="IrregularComparatives", "level"="A2")} ; 

//9.WithMoreComparatives
(W{REGEXP("(?i)more")}  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithMoreComparatives", "level"="A2")} ; 

//10.WithThanComparatives
(Comparative W{REGEXP("(?i)than")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithThanComparatives", "level"="A2")} ; 


//3.Modifying
//11.WithDegreeAdverbsModifying
(Degree POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithDegreeAdverbsModifying", "level"="A2")} ; 

//12.WithPrepositionalPhraseModifying
(POS_ADJ PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithPrepositionalPhraseModifying", "level"="A2")} ; 

//13.WithTooModifying
(W{REGEXP("(?i)too")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithTooModifying", "level"="A2")} ; 

//14.WithTooPrepositionalPhraseModifying
(W{REGEXP("(?i)too")} POS_ADJ PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithTooPrepositionalPhraseModifying", "level"="A2")} ; 



//4.Position
//15.LimitingAdjectivesPosition
(W{REGEXP("(?i)main")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="LimitingAdjectivesPosition", "level"="A2")} ; 
(W{REGEXP("(?i)only")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="LimitingAdjectivesPosition", "level"="A2")} ; 

//16.PredicativeWithBePosition
(Be POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="PredicativeWithBePosition", "level"="A2")} ; 

//17.PredicativeWithLinkingVerbsPosition
(Lemma{FEATURE("value", "feel")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="PredicativeWithLinkingVerbsPosition", "level"="A2")} ; 
(Lemma{FEATURE("value", "look")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="PredicativeWithLinkingVerbsPosition", "level"="A2")} ; 


//5.Superlatives
//18.ComplexNounPhrasesSuperlatives
(Superlative POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="ComplexNounPhrasesSuperlatives", "level"="A2")}; 

//19.WithInNounSuperlatives
(Superlative POS_NOUN W{REGEXP("(?i)in")} NC) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithInNounSuperlatives", "level"="A2")}; 

//20.WithOfNounSuperlatives
(Superlative POS_NOUN W{REGEXP("(?i)of")} NC) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithOfNounSuperlatives", "level"="A2")}; 

//21.EllipsisWithTheSuperlatives
(Superlative PM) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="EllipsisWithTheSuperlatives", "level"="A2")}; 

//22.WithEst1Superlatives
(POS{FEATURE("PosValue", "JJS")}) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithEst1Superlatives", "level"="A2")}; 

//23.WithEst2Superlatives
(POS{FEATURE("PosValue", "JJS")}) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithEst2Superlatives", "level"="A2")}; 

//24.WithEst3Superlatives
(POS{FEATURE("PosValue", "JJS")}) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithEst3Superlatives", "level"="A2")}; 

//25.WithMyOrYourSuperlatives
(W{REGEXP("(?i)your")} POS{FEATURE("PosValue", "JJS")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithMyOrYourSuperlatives", "level"="A2")}; 
(W{REGEXP("(?i)my")} POS{FEATURE("PosValue", "JJS")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithMyOrYourSuperlatives", "level"="A2")}; 

//26.WithStSuperlatives
(POS{FEATURE("PosValue", "JJS")}) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithStSuperlatives", "level"="A2")}; 

//27.WithTheSuperlatives
(W{REGEXP("(?i)the")} POS{FEATURE("PosValue", "JJS")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithTheSuperlatives", "level"="A2")}; 

//28.WithTheMostSuperlatives
(W{REGEXP("(?i)the")} W{REGEXP("(?i)most")}  POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithTheMostSuperlatives", "level"="A2")}; 




//SCRIPT A2_Level.A2_Prepositions;

//1.Prepositions
//1.SimplePrepositions
(SimplePreposition) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="SimplePrepositions", "level"="A2")};

//2.ComplexPrepositions
(ComplexPreposition) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="ComplexPrepositions", "level"="A2")};

//3.JustPrepositions
(W{REGEXP("(?i)just")} Preposition) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="JustPrepositions", "level"="A2")};

//4.IngPrepositions
(Preposition Doing) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="IngPrepositions", "level"="A2")};

//5.StrandingPrepositions
(POS_VERB Preposition PERIOD) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="StrandingPrepositions", "level"="A2")};



//SCRIPT A2_Level.A2_Adverbs;

//1.AdverbsAsModifiers
//1.TimeAdverbAsModifiers
(TimeAdv) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="TimeAdverbAsModifiers", "level"="A2")};

//2.FrequencyAdverbAsModifiers
(Frequency) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="FrequencyAdverbAsModifiers", "level"="A2")};

//3.DegreeWithAdjectivesAdverbAsModifiers
(Degree POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="DegreeWithAdjectivesAdverbAsModifiers", "level"="A2")};

//4.DegreeWithVerbsAdverbAsModifiers
(VC NC Degree) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="DegreeWithVerbsAdverbAsModifiers", "level"="A2")};
(VC Degree) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="DegreeWithVerbsAdverbAsModifiers", "level"="A2")};

//5.MannerAdverbAsModifiers
(Manner) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="MannerAdverbAsModifiers", "level"="A2")};

//6.LinkingAdverbAsModifiers
(Linking) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="LinkingAdverbAsModifiers", "level"="A2")};

//7.FocusAdverbAsModifiers
(Focus) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="FocusAdverbAsModifiers", "level"="A2")};

//8.SequencingAdverbAsModifiers
(Sequencing) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="FocusAdverbAsModifiers", "level"="A2")};

//9.CertraintyAdverbAsModifiers
(Certainty) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="CertaintyAdverbAsModifiers", "level"="A2")};

//10.StanceAdverbAsModifiers
(Stance) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="StanceAdverbAsModifiers", "level"="A2")};


//2.AdverbsAndAdverbPhrases: types and meanings
//11.DegreeModifyingAdjectives
(Degree POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeModifyingAdjectives", "level"="A2")};

//12.MannerModifyingVerbs
(VC NC Manner) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="MannerModifyingVerbs", "level"="A2")};
(VC Manner) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="MannerModifyingVerbs", "level"="A2")};

//13.TimrAndSequencingModifyingClauses
(TimeAdv) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="TimrAndSequencingModifyingClauses", "level"="A2")};
(Sequencing) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="TimrAndSequencingModifyingClauses", "level"="A2")};


//3.Position
//14.DegreeBeforeAdjectivesPosition
(Degree POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="DegreeBeforeAdjectivesPosition", "level"="A2")};

//15.FrontPosition
(Adverb NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="FrontPosition", "level"="A2")};
(Adverb POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="FrontPosition", "level"="A2")};

//16.MidPosition
(NC Adverb POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="MidPosition", "level"="A2")};
(NC ModalVerb Adverb POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="MidPosition", "level"="A2")};
(NC Have Adverb Done) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="MidPosition", "level"="A2")};

//17.EndPositionManner
(VC NC Adverb) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="EndPositionManner", "level"="A2")};

//18.DegreeEndPosition
(VC NC Degree) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="DegreeEndPosition", "level"="A2")};

//19.SentenceAdverbFrontPosition
(W{REGEXP("(?i)actually")}) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="SentenceAdverbFrontPosition", "level"="A2")};
(W{REGEXP("(?i)unfortunately")} COMMA) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="SentenceAdverbFrontPosition", "level"="A2")};
(W{REGEXP("(?i)first")} COMMA) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="SentenceAdverbFrontPosition", "level"="A2")};


//4.AdverbPhrases - form
//20.AdverbAdverb
(AdverbModifyingAdverb Adverb) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="AdverbAdverb", "level"="A2")};


//SCRIPT A2_Level.A2_Determiners;


//1.Articles
//1.TheAdjectivesSpecifying
(W{REGEXP("(?i)the")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="TheAdjectivesSpecifying", "level"="A2")};

//2.TheSuperlatives.
(Superlative POS_NOUN POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="TheSuperlatives", "level"="A2")};
(Superlative POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="TheSuperlatives", "level"="A2")};


//2.Demonstratives
//3.ThisWithUncountableNouns
(W{REGEXP("(?i)this")} UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisWithUncountableNouns", "level"="A2")};

//4.ThisPointing
(W{REGEXP("(?i)this")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisPointing", "level"="A2")};

//5.Pointing
(W{REGEXP("(?i)this")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="Pointing", "level"="A2")};

//6.ThisAlreadyMentioned
(W{REGEXP("(?i)this")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisAlreadyMentioned", "level"="A2")};

//7.That
(W{REGEXP("(?i)that")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="That", "level"="A2")};

//8.ThatPointing
(W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThatPointing", "level"="A2")};

//9.ThatAlreadyMentioned
(W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThatAlreadyMentioned", "level"="A2")};

//10.These
(W{REGEXP("(?i)these")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="These", "level"="A2")};

//11.ThesePointing
(W{REGEXP("(?i)these")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThesePointing", "level"="A2")};

//12.TheseAlreadyMentioned
(W{REGEXP("(?i)these")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="TheseAlreadyMentioned", "level"="A2")};

//13.Those
(W{REGEXP("(?i)those")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="Those", "level"="A2")};

//14.ThoseAlreadyMentioned
(W{REGEXP("(?i)those")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThoseAlreadyMentioned", "level"="A2")};

//15.ThosePointing
(W{REGEXP("(?i)those")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThosePointing", "level"="A2")};


//3.Possessives
//16.SingularNounS
(POS{FEATURE("PosValue", "NNP")} POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="SingularNounS", "level"="A2")};
(POS{FEATURE("PosValue", "NN")} POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="SingularNounS", "level"="A2")};

//17.WithQuantifyingDeterminersOf
(DeterminerOf POS{FEATURE("PosValue", "PRP$")} POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="WithQuantifyingDeterminersOf", "level"="A2")};


//4.Quantity
//18.WithPluralNounsQuantity
(DeterminerWithPluralNouns POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="WithPluralNounsQuantity", "level"="A2")};

//19.WithPluralAndUncountableNounsQuantity
(DeterminerWithPluralAndUncountableNouns POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="WithPluralAndUncountableNounsQuantity", "level"="A2")};

//20.WithSingularNounsQuantity
(DeterminerWithSingularNouns POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="WithSingularNounsQuantity", "level"="A2")};
(DeterminerWithSingularNouns POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="WithSingularNounsQuantity", "level"="A2")};

//21.MuchWithUncountableNounsNegativeQuantity
(Not POS_VERB W{REGEXP("(?i)much")} UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="MuchWithUncountableNounsNegativeQuantity", "level"="A2")};
(Not W{REGEXP("(?i)much")} UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="MuchWithUncountableNounsNegativeQuantity", "level"="A2")};

//22.ManyWithPluralNounsNegativeQuantity
(Not POS_VERB W{REGEXP("(?i)many")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="ManyWithPluralNounsNegativeQuantity", "level"="A2")};
(Not W{REGEXP("(?i)many")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="ManyWithPluralNounsNegativeQuantity", "level"="A2")};

//23.SoManyWithPluralNounsQuantity
(W{REGEXP("(?i)so")} W{REGEXP("(?i)many")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="SoManyWithPluralNounsQuantity", "level"="A2")};
(W{REGEXP("(?i)too")} W{REGEXP("(?i)many")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="SoManyWithPluralNounsQuantity", "level"="A2")};

//24.DeterminerOfDeterminerQuantity
(DeterminerOf Determiner POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="DeterminerOfDeterminerQuantity", "level"="A2")};



//SCRIPT A2_Level.A2_Modality;

//1.Adjectives
//1.BeSureClause
(W{REGEXP("(?i)I")} Be W{REGEXP("(?i)sure")}) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="BeSureClause", "level"="A2")};


//2.Can
//2.PermissionCan
(Can POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="PermissionCan", "level"="A2")};


//3.ExpressionsWithBe
//3.WillBeAbleTo
(Will Be W{REGEXP("(?i)able")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="WillBeAbleTo", "level"="A2")};


//4.HaveGotTo
//4.AffirmativeHaveGotTo
(Lemma{FEATURE("value", "have")} W{REGEXP("(?i)got")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="AffirmativeHaveGotTo", "level"="A2")};
(Lemma{FEATURE("value", "have")}  ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="AffirmativeHaveGotTo", "level"="A2")};

//5.NegativeHaveGotTo
(Lemma{FEATURE("value", "have")} Not W{REGEXP("(?i)got")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="NegativeHaveGotTo", "level"="A2")};
(Lemma{FEATURE("value", "have")} Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="NegativeHaveGotTo", "level"="A2")};

//6.QuestionsHaveGotTo
(Do NC Have W{REGEXP("(?i)got")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="QuestionsHaveGotTo", "level"="A2")};
(Do NC Have ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="QuestionsHaveGotTo", "level"="A2")};

//7.ObligationHaveGotTo
(Have W{REGEXP("(?i)got")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="ObligationHaveGotTo", "level"="A2")};
(Have ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="ObligationHaveGotTo", "level"="A2")};


//5.May
//8.AffirmativeMay
(Lemma{FEATURE("value", "may")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="AffirmativeMay", "level"="A2")};

//9.PossibilityMay
(May POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="PossibilityMay", "level"="A2")};

 
//6.Might
//10.AffirmativeMight
(Lemma{FEATURE("value", "might")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="AffirmativeMight", "level"="A2")};

//11.PossibilityMight
(Might POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="PossibilityMight", "level"="A2")};


//7.Must
//12.AffirmativeMust
(Lemma{FEATURE("value", "must")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="AffirmativeMust", "level"="A2")};

//13.NegativeMust
(Lemma{FEATURE("value", "must")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="NegativeMust", "level"="A2")};

//14.ObligationAndNecessity
(POS_PRON Must POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="ObligationAndNecessity", "level"="A2")};


//8.Shall
//15.AffirmativeShall
(Lemma{FEATURE("value", "shall")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="AffirmativeShall", "level"="A2")};

//16.QuestionsShall
(Shall NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="QuestionsShall", "level"="A2")};

//17.OffersShall
(Shall W{REGEXP("(?i)I")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="OffersShall", "level"="A2")};

//18.SuggestionsShall
(Shall W{REGEXP("(?i)we")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="SuggestionsShall", "level"="A2")};


//9.Should
//19.AffirmativeShould
(Lemma{FEATURE("value", "should")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="AffirmativeShould", "level"="A2")};

//20.NegativeShould
(Lemma{FEATURE("value", "should")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="NegativeShould", "level"="A2")};

//21.QuestionsShould
(Should NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="QuestionsShould", "level"="A2")};

//22.AdviceShould
(Should POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="AdviceShould", "level"="A2")};

//23.SuggestionsShould
(Should POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="SuggestionsShould", "level"="A2")};



//10.Will
//24.AfterIfFutureSituations
(IfClause COMMA NC Will POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="SuggestionsShould", "level"="A2")};

//25.NegativeWill
(Lemma{FEATURE("value", "will")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="NegativeWill", "level"="A2")};

//26.QuestionsWill
(Will NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="QuestionsWill", "level"="A2")};

//27.PlansAndIntentionsWill
(Will NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="PlansAndIntentionsWill", "level"="A2")};

//28.WillngnessOffersWill
(Will POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="WillngnessOffersWill", "level"="A2")};

//29.RequestsWill
(Will NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="RequestsWill", "level"="A2")};


//11.Would
//30.AffirmativeWould
(Lemma{FEATURE("value", "would")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="AffirmativeWould", "level"="A2")};

//31.NegativeWould
(Lemma{FEATURE("value", "would")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="NegativeWould", "level"="A2")};

//32.QuestionsWithLikeWould
(Would W{REGEXP("(?i)you")} W{REGEXP("(?i)like")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="QuestionsWithLikeWould", "level"="A2")};

//33.ImaginedSituationWould
(Would POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="ImaginedSituationWould", "level"="A2")};

//34.SuggestionsWithItWouldBe
(W{REGEXP("(?i)it")} W{REGEXP("(?i)would")} W{REGEXP("(?i)be")}) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="SuggestionsWithItWouldBe", "level"="A2")};

//35.WishesAndPreferencesWould
(Would W{REGEXP("(?i)prefer")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="WishesAndPreferencesWould", "level"="A2")};
(Would W{REGEXP("(?i)love")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="WishesAndPreferencesWould", "level"="A2")};


//12.Adverbs
//36.MidPositionHedgingOrEmphasis
(Be Adverb) {-> CREATE(GrammarProfile, "subCategory"="AdverbsModality", "superCategory"="Modality", "name"="MidPositionHedgingOrEmphasis", "level"="A2")};
(ModalVerb Adverb POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="AdverbsModality", "superCategory"="Modality", "name"="MidPositionHedgingOrEmphasis", "level"="A2")};
(Be Adverb Doing) {-> CREATE(GrammarProfile, "subCategory"="AdverbsModality", "superCategory"="Modality", "name"="MidPositionHedgingOrEmphasis", "level"="A2")};

//37.ClausePositionAdverbs
(W{REGEXP("(?i)maybe")}) {-> CREATE(GrammarProfile, "subCategory"="AdverbsModality", "superCategory"="Modality", "name"="ClausePositionAdverbs", "level"="A2")};
(W{REGEXP("(?i)perhaps")}) {-> CREATE(GrammarProfile, "subCategory"="AdverbsModality", "superCategory"="Modality", "name"="ClausePositionAdverbs", "level"="A2")};



//13.Could
//38.AffirmativeCould
(Lemma{FEATURE("value", "could")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="AffirmativeCould", "level"="A2")};

//39.NegativeCould
(Lemma{FEATURE("value", "could")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="NegativeCould", "level"="A2")};

//40.QuestionsCould
(Could NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="QuestionsCould", "level"="A2")};

//41.AbilityCould
(Could POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="AbilityCould", "level"="A2")};

//42.RequestsCould
(Could NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="RequestsCould", "level"="A2")};

//43.SuggestionsCould
(Could POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="SuggestionsCould", "level"="A2")};



//SCRIPT A2_Level.A2_Conjunctions;

//1.Subordinating
//1.SimpleSubordinatingConjunctions
(SimpleSubordinatingConjunction) {-> CREATE(GrammarProfile, "subCategory"="SubordinatingConjunction", "superCategory"="Conjunction", "name"="SimpleSubordinatingConjunctions", "level"="A2")};



//SCRIPT A2_Level.A2_DiscourseMarkers;

//1.DiscourseMarkersInWriting
//1.AsYouKnowOrganisingMarkingSharedKnowledge
(W{REGEXP("(?i)as")} W{REGEXP("(?i)you")} W{REGEXP("(?i)know")}) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="AsYouKnowOrganisingMarkingSharedKnowledge", "level"="A2")};

//2.SoSummarisingInformal
(W{REGEXP("(?i)so")} COMMA) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="SoSummarisingInformal", "level"="A2")};


//SCRIPT A2_Level.A2_Focus;

//1.Focus
//1.PrepositionalPhrasesFronting
(PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="PrepositionalPhrasesFronting", "level"="A2")} ; 


//SCRIPT A2_Level.A2_Negation;

//1.Negation
//1.AuxiliaryVerbsBeHavePresentNegation
(W{REGEXP("(?i)am|is|are|have|has")} Not) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="AuxiliaryVerbsBeHavePresentNegation", "level"="A2")};

//2.AuxiliaryVerbDoPastNegation
(W{REGEXP("(?i)did")} Not) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="AuxiliaryVerbDoPastNegation", "level"="A2")};

//3.DoImperativesNegation
(W{REGEXP("(?i)don")} SPECIAL{REGEXP("'")} W{REGEXP("t")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="DoImperativesNegation", "level"="A2")};

//4/ModalVerbsNegation
(Lemma{FEATURE("value", "can")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="ModalVerbsNegation", "level"="A2")};
(Lemma{FEATURE("value", "will")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="ModalVerbsNegation", "level"="A2")};
(Lemma{FEATURE("value", "should")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="ModalVerbsNegation", "level"="A2")};

//5.PronounsNegation
(Not POS_VERB W{REGEXP("(?i)any")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="PronounsNegation", "level"="A2")};
(Not POS_VERB W{REGEXP("(?i)many")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="PronounsNegation", "level"="A2")};
(Not POS_VERB W{REGEXP("(?i)anything")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="PronounsNegation", "level"="A2")};

//6.DeterminersNo
(W{REGEXP("(?i)no")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="DeterminersNo", "level"="A2")};

//7.DeterminersAnyMuchMany
(Not POS_VERB W{REGEXP("(?i)any")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="DeterminersAnyMuchMany", "level"="A2")};
(Not POS_VERB W{REGEXP("(?i)much")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="DeterminersAnyMuchMany", "level"="A2")};
(Not POS_VERB W{REGEXP("(?i)many")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="DeterminersAnyMuchMany", "level"="A2")};

(Not  W{REGEXP("(?i)any")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="DeterminersAnyMuchMany", "level"="A2")};
(Not  W{REGEXP("(?i)much")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="DeterminersAnyMuchMany", "level"="A2")};
(Not  W{REGEXP("(?i)many")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="DeterminersAnyMuchMany", "level"="A2")};


//SCRIPT A2_Level.A2_Questions;

//1.Alternatives
//1.WordWord
(POS_NOUN W{REGEXP("(?i)or")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="WordWord", "level"="A2")};
(POS_ADJ W{REGEXP("(?i)or")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="WordWord", "level"="A2")};
(POS_VERB W{REGEXP("(?i)or")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="WordWord", "level"="A2")};


//2.Tags
//2.QuestionTags
(Do NC QUESTION) {-> CREATE(GrammarProfile, "subCategory"="TagsQuestion", "superCategory"="Question", "name"="QuestionTags", "level"="A2")};
(Be NC QUESTION) {-> CREATE(GrammarProfile, "subCategory"="TagsQuestion", "superCategory"="Question", "name"="QuestionTags", "level"="A2")};


//3.Wh
//3.MainVerbBeWH
(WHWord Be NC) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="MainVerbBeWH", "level"="A2")};

//4.WithAuxiliaryDoWH
(WHWord Do NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="WithAuxiliaryDoWH", "level"="A2")};

//5.WithAuxiliaryHaveWH
(WHWord Have NC Done) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="WithAuxiliaryHaveWH", "level"="A2")};

//6.WithAuxiliaryBeWH
(WHWord Be NC Doing) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="WithAuxiliaryBeWH", "level"="A2")};

//7.ModalVerbsWH
(WHWord ModalVerb NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="ModalVerbsWH", "level"="A2")};

//8.NegativeQuestionsSuggestionsWH
(W{REGEXP("(?i)why")} Dont NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="NegativeQuestionsSuggestionsWH", "level"="A2")};


//4.YesNo
//9.MainVerbBeYesno
(Be NC) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="MainVerbBeYesno", "level"="A2")};

//10.ModalVerbsYesno
(ModalVerb NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="ModalVerbsYesno", "level"="A2")};

//11.LexicalVerbsWithDoYesno
(Do NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="LexicalVerbsWithDoYesno", "level"="A2")};

//12.AuxiliaryBeYesno
(Be NC Doing) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="AuxiliaryBeYesno", "level"="A2")};

//13.AuxiliaryHaveYesno
(Have NC Done) {-> CREATE(GrammarProfile, "subCategory"="Question", "superCategory"="Question", "name"="AuxiliaryHaveYesno", "level"="A2")};


//SCRIPT A2_Level.A2_Verbs;

//1.PhrasalPrepositional
//1.LookForwardTo
(Lemma{FEATURE("value", "look")} W{REGEXP("(?i)forward")} W{REGEXP("(?i)to")}) {-> CREATE(GrammarProfile, "subCategory"="PhrasalPrepositionalVerb", "superCategory"="Verb", "name"="LookForwardTo", "level"="A2")};


//2.PatternsThatClauses
//2.ReportingVerbsDirectObjectThatClause
(POS_VERB W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="PatternsThatClauses", "superCategory"="Verb", "name"="ReportingVerbsDirectObjectThatClause", "level"="A2")};

//3.VerbsDirectObjectClauseWithoutThat
(POS_VERB NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PatternsThatClauses", "superCategory"="Verb", "name"="VerbsDirectObjectClauseWithoutThat", "level"="A2")};

//4.VerbsDirectObjectClause
(POS_VERB NC W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="PatternsThatClauses", "superCategory"="Verb", "name"="VerbsDirectObjectClause", "level"="A2")};
(POS_VERB NC) {-> CREATE(GrammarProfile, "subCategory"="PatternsThatClauses", "superCategory"="Verb", "name"="VerbsDirectObjectClause", "level"="A2")};


//3.Phrasal
//5.NoObjectPhrasal
(POS_VERB Particle) (W{-PARTOF(POS_NOUN)}) {-> CREATE(GrammarProfile,1, "subCategory"="PhrasalVerb", "superCategory"="Verb","name"="NoObjectPhrasal", "level"="A2")};
(POS_VERB Particle) (PM) {-> CREATE(GrammarProfile,1, "subCategory"="PhrasalVerb", "superCategory"="Verb","name"="NoObjectPhrasal", "level"="A2")};

//6.VerbPronounParticle
(POS_VERB NC Particle) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="VerbPronounParticle", "level"="A2")};


//4.Types
//7.AuxiliaryVerbsHaveAndDo
(Have NC Done) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="AuxiliaryVerbsHaveAndDo", "level"="A2")};
(Have  Done) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="AuxiliaryVerbsHaveAndDo", "level"="A2")};

(Do) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="AuxiliaryVerbsHaveAndDo", "level"="A2")};
(Do NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="AuxiliaryVerbsHaveAndDo", "level"="A2")};

//8.LinkingVerbsAdjective
(POS_VERB POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="LinkingVerbsAdjective", "level"="A2")};
(POS_VERB ADJC) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="LinkingVerbsAdjective", "level"="A2")};

//9.ModalAuxiliaryVerbs
(ModalVerb POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="ModalAuxiliaryVerbs", "level"="A2")};

//10.SemiModalAuxiliaryVerbsHaveGotTo
(Have W{REGEXP("(?i)got")}ToDo) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="SemiModalAuxiliaryVerbsHaveGotTo", "level"="A2")};
(Have ToDo) {-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="SemiModalAuxiliaryVerbsHaveGotTo", "level"="A2")};


//5.PatternsWithToAndIng
//11.VerbToInfinitive
(POS_VERB ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbToInfinitive", "level"="A2")};

//12.VerbsToInfinitiveOrIng
(POS_VERB ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbsToInfinitiveOrIng", "level"="A2")};
(POS_VERB Doing) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbsToInfinitiveOrIng", "level"="A2")};

//13.WouldLoveTo
(Would W{REGEXP("(?i)love")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="WouldLoveTo", "level"="A2")};

//14.EnjoyIng
(Lemma{FEATURE("value", "enjoy")} Doing) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="EnjoyIng", "level"="A2")};


//6.ThereIsAre
//15.ThereIsUncountable
(W{REGEXP("(?i)there")} W{REGEXP("(?i)is")} NC) {-> CREATE(GrammarProfile, "subCategory"="ThereIsAre", "superCategory"="Verb", "name"="ThereIsUncountable", "level"="A2")};

//16.ThereIsAreALotOf
(W{REGEXP("(?i)there")} Be W{REGEXP("(?i)a")} W{REGEXP("(?i)lot")} W{REGEXP("(?i)of")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ThereIsAre", "superCategory"="Verb", "name"="ThereIsAreALotOf", "level"="A2")};


//7.Linking
//17.LinkingComplement
(POS_VERB POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="LinkingVerb", "superCategory"="Verb", "name"="LinkingComplement", "level"="A2")};
(POS_VERB ADJC) {-> CREATE(GrammarProfile, "subCategory"="LinkingVerb", "superCategory"="Verb", "name"="LinkingComplement", "level"="A2")};



//SCRIPT A2_Level.A2_Present;

//1.PresentContinuous
//1.NegativePresentContinuous
(W{REGEXP("(?i)am|is|are")} Not Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="NegativePresentContinuous", "level"="A2")};

//2.QuestionsPresentContinuous
(Is NC Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="QuestionsPresentContinuous", "level"="A2")};

//3.WithAdverbsOfIndefiniteFrequencyPresentContinuous
(Is Frequency Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="WithAdverbsOfIndefiniteFrequencyPresentContinuous", "level"="A2")};

//4.EventsInprogressPresentContinuous
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="EventsInprogressPresentContinuous", "level"="A2")};

//5.TemporarySituations
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="TemporarySituations", "level"="A2")};


//2.PresentSimple
//6.RealAndImaginedSituationsAfterIfPresentSimple
(W{REGEXP("(?i)If")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="RealAndImaginedSituationsAfterIfPresentSimple", "level"="A2")};

//7.AffirmativePresentSimple
(POS{FEATURE("PosValue", "VBZ")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="AffirmativePresentSimple", "level"="A2")};
(POS{FEATURE("PosValue", "VBP")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="AffirmativePresentSimple", "level"="A2")};

//8.IndirectQuestionsPresentSimple
(W{REGEXP("(?i)do")} W{REGEXP("(?i)you")} W{REGEXP("(?i)know")} WHWord) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="IndirectQuestionsPresentSimple", "level"="A2")};

//9.NegativePresentSimple
(Doesnt POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativePresentSimple", "level"="A2")};
(Dont POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativePresentSimple", "level"="A2")};

//10.QuestionsPresentSimple
(Does NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="QuestionsPresentSimple", "level"="A2")};

//11.WithAdverbsOfIndefiniteFrequencyPresentSimple
(Frequency Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="WithAdverbsOfIndefiniteFrequencyPresentSimple", "level"="A2")};

//12.InstructionsAndDirectionsPresentSimple
(Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="InstructionsAndDirectionsPresentSimple", "level"="A2")};

//13.MentalProcessVerbsPresentSimple
(Lemma{FEATURE("value", "think")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="MentalProcessVerbsPresentSimple", "level"="A2")};
(Lemma{FEATURE("value", "hope")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="MentalProcessVerbsPresentSimple", "level"="A2")};
(Lemma{FEATURE("value", "know")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="MentalProcessVerbsPresentSimple", "level"="A2")};

//14.SuggestionsPresentSimple
(W{REGEXP("(?i)why")} W{REGEXP("(?i)don")} SPECIAL{REGEXP("'")} W{REGEXP("t")} W{REGEXP("(?i)you")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SuggestionsPresentSimple", "level"="A2")};
(W{REGEXP("(?i)why")} W{REGEXP("(?i)don")} SPECIAL{REGEXP("'")} W{REGEXP("t")} W{REGEXP("(?i)we")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SuggestionsPresentSimple", "level"="A2")};
(W{REGEXP("(?i)if")} W{REGEXP("(?i)you")} W{REGEXP("(?i)want")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SuggestionsPresentSimple", "level"="A2")};
(W{REGEXP("(?i)if")} W{REGEXP("(?i)you")} W{REGEXP("(?i)like")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SuggestionsPresentSimple", "level"="A2")};




//SCRIPT A2_Level.A2_Past;


//1.PastContinuous
//1.AffirmativePastContinuous
(W{REGEXP("(?i)was|were")}  Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="AffirmativePastContinuous", "level"="A2")};

//2.WithAdverbsPastContinuous
(Was POS_ADV Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="WithAdverbsPastContinuous", "level"="A2")};

//3.BackgrounEventsPastContinuous
(Was Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="BackgrounEventsPastContinuous", "level"="A2")};

//4.EventsInProgressPastContinuous
(Was Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="EventsInProgressPastContinuous", "level"="A2")};


//2.PastSimple
//5.AffirmativePastSimple
(POS{FEATURE("PosValue", "VBD")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="AffirmativePastSimple", "level"="A2")};

//6.NegativePastSimple
(Didnt POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="NegativePastSimple", "level"="A2")};

//7.QuestionsPastSimple
(Did NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="A2")};
(Did POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="A2")};

//8.WithWhenPastSimple
(W{REGEXP("(?i)when")} NC Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="WithWhenPastSimple", "level"="A2")};


//3.PresentPerfectSimple
//9.TimeWithForPresentPerfectSimple
(Hasnt Done NC W{REGEXP("(?i)for")} NC) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="TimeWithForPresentPerfectSimple", "level"="A2")};
(Hasnt Done NC W{REGEXP("(?i)for")} W{REGEXP("(?i)so")} NC) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="TimeWithForPresentPerfectSimple", "level"="A2")};
(Hasnt Done W{REGEXP("(?i)for")} NC) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="TimeWithForPresentPerfectSimple", "level"="A2")};
(Hasnt Done W{REGEXP("(?i)for")} W{REGEXP("(?i)so")} NC) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="TimeWithForPresentPerfectSimple", "level"="A2")};

//10.WithYetPresentPerfectSimple
(Hasnt Done NC W{REGEXP("(?i)yet")}) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="WithYetPresentPerfectSimple", "level"="A2")};
(Hasnt Done  W{REGEXP("(?i)yet")}) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="WithYetPresentPerfectSimple", "level"="A2")};

//11.AffirmativePresentPerfectSimple
(POS_PRON W{REGEXP("(?i)has|have")} Done ) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="AffirmativePresentPerfectSimple", "level"="A2")};

//12.NegativePresentPerfectSimple
(POS_PRON Hasnt Done ) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="NegativePresentPerfectSimple", "level"="A2")};

//13.QuestionsPresentPerfectSimple
(Has NC Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="QuestionsPresentPerfectSimple", "level"="A2")};

//14.WithAdverbsPresentPerfectSimple
(Has Adverb Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="WithAdverbsPresentPerfectSimple", "level"="A2")};

//15.ExperiencesPresentPerfectSimple
(Has Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="ExperiencesPresentPerfectSimple", "level"="A2")};



//SCRIPT A2_Level.A2_Future;

//1.FutureContinuous
//1.AffirmativeWithWill
(Lemma{FEATURE("value", "will")}  Be Doing) {-> CREATE(GrammarProfile, "subCategory"="FutureContinuous", "superCategory"="Future", "name"="AffirmativeWithWill", "level"="A2")};

//2.FutureArrangements
(Will Be Doing) {-> CREATE(GrammarProfile, "subCategory"="FutureContinuous", "superCategory"="Future", "name"="FutureArrangements", "level"="A2")};


//2.FutureWithWillAndShall
//3.AffirmativeShall
(POS_PRON Lemma{FEATURE("value", "shall")}  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="AffirmativeShall", "level"="A2")};

//4.NegativeWill
(Lemma{FEATURE("value", "will")}  Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="NegativeWill", "level"="A2")};

//5.QuestionsWillShall
(WillShall NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="QuestionsWillShall", "level"="A2")};

//6.OffersWithShall
(Shall W{REGEXP("(?i)I")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="OffersWithShall", "level"="A2")};

//7.PlansAndIntentionsWithWill
(Will NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="PlansAndIntentionsWithWill", "level"="A2")};

//8.RequestsWithWill
(Will NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="RequestsWithWill", "level"="A2")};

//9.SuggestionsWithShall
(Shall W{REGEXP("(?i)we")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="SuggestionsWithShall", "level"="A2")};

//10.WillingnessWithWill
(Will POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="WillingnessWithWill", "level"="A2")};


//3.FutureWithBeGoingTo
//11.AffirmativeBeGoingTo
(W{REGEXP("(?i)am|is|are")} Going ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="AffirmativeBeGoingTo", "level"="A2")};

//12.QuestionsBeGoingTo
(Is NC  Going ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="QuestionsBeGoingTo", "level"="A2")};

//13.IntentionsBeGoingTo
(Is Going ToDo) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="IntentionsBeGoingTo", "level"="A2")};
(Is NC  Going ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="IntentionsBeGoingTo", "level"="A2")};

//14.PredictionsWithBeBeGoingTo
(Is Going ToDo) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="PredictionsWithBeBeGoingTo", "level"="A2")};


//4.PresentContinuousForFutureUse
//15.FutureArrangementsPresentContinuous
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuousForFutureUse", "superCategory"="Future", "name"="FutureArrangementsPresentContinuous", "level"="A2")};

//16.QuestionsAboutTheFuturePresentContinuous
(Is NC Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuousForFutureUse", "superCategory"="Future", "name"="QuestionsAboutTheFuturePresentContinuous", "level"="A2")};


//5.PresentSimpleForFutureUse
//17.WithWhenPresentSimple
(W{REGEXP("(?i)when")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimpleForFutureUse", "superCategory"="Future", "name"="WithWhenPresentSimple", "level"="A2")};

//18.HopePresentSimple
(W{REGEXP("(?i)I")} W{REGEXP("(?i)hope")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimpleForFutureUse", "superCategory"="Future", "name"="HopePresentSimple", "level"="A2")};

//19.TimetablesAndPlansPresentSimple
(Present) {-> CREATE(GrammarProfile, "subCategory"="", "superCategory"="Future", "name"="TimetablesAndPlansPresentSimple", "level"="A2")};


//SCRIPT A2_Level.A2_Passives;

//1.Passives: form
//1.WithByToAddInformationPassives
(Be Done W{REGEXP("(?i)by")}) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="WithByToAddInformationPassives", "level"="A2")};

//2.PastSimpleAffirmativePassives
(W{REGEXP("(?i)was|were")} Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PastSimpleAffirmativePassives", "level"="A2")};

//3.PresentSimpleAffirmativePassives
(W{REGEXP("(?i)am|is|are")}  Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentSimpleAffirmativePassives", "level"="A2")};


//SCRIPT A2_Level.A2_ReportedSpeech;

//1.ReportedSpeech
//1.ReportedStatementsWithSayPronounShift
(Lemma{FEATURE("value", "say")}  W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportedStatementsWithSayPronounShift", "level"="A2")};

//2.ReportedStatementsWithTellPronounShift
(Lemma{FEATURE("value", "tell")}  NC W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportedStatementsWithTellPronounShift", "level"="A2")};


//SCRIPT A2_Level.A2_Clauses;

//1.Comparatives
//1.BeLikeNounOrPronoun
(Be W{REGEXP("(?i)like")} NC) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="BeLikeNounOrPronoun", "level"="A2")};

//2.Coordinated
//2.MultipleMainClausesInstructions(????)
(COMMA) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="MultipleMainClausesInstructions", "level"="A2")};
(Conjunction) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="MultipleMainClausesInstructions", "level"="A2")};


//3.Declarative
//3.NegativeDeclarativeWithHave
(Havent Done) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="NegativeDeclarativeWithHave", "level"="A2")};
(Havent W{REGEXP("(?i)got")}) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="NegativeDeclarativeWithHave", "level"="A2")};

//4.NegativeDeclarativeModalAuxiliaryVerbs
(ModalVerb  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="NegativeDeclarativeModalAuxiliaryVerbs", "level"="A2")};


//4.Imperatives
//5.AffirmativeImperatives
(POS{FEATURE("PosValue", "VB")} NC Adverb) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="AffirmativeImperatives", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} NC) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="AffirmativeImperatives", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} Adverb) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="AffirmativeImperatives", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} ) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="AffirmativeImperatives", "level"="A2")}; 

//6.InstructionsImperatives
(POS{FEATURE("PosValue", "VB")} NC) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="InstructionsImperatives", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} ) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="InstructionsImperatives", "level"="A2")}; 

//7.ClosingsImperatives
(POS{FEATURE("PosValue", "VB")} NC Adverb) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="ClosingsImperatives", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} NC ) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="ClosingsImperatives", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} Adverb) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="ClosingsImperatives", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} ) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="ClosingsImperatives", "level"="A2")}; 

(POS{FEATURE("PosValue", "VB")} PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="ClosingsImperatives", "level"="A2")}; 

//8.NegativeImperatives
(Dont POS_VERB NC) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="NegativeImperatives", "level"="A2")}; 
(Dont POS_VERB ) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="NegativeImperatives", "level"="A2")}; 

//9.letsSuggestion
(W{REGEXP("(?i)let")} SPECIAL{REGEXP("'")} W{REGEXP("t")}POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="letsSuggestion", "level"="A2")}; 

//10.EmphasisingAnInstructionImperatives
(Dont POS_VERB NC) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="EmphasisingAnInstructionImperatives", "level"="A2")}; 
(Dont POS_VERB ) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="EmphasisingAnInstructionImperatives", "level"="A2")}; 


//5.Interrogatives
//11.AffirmativeInterrogativeWithAuxiliaryBeHave
(Lemma{FEATURE("value", "be")} NC Doing) {-> CREATE(GrammarProfile, "subCategory"="InterrogativesClause", "superCategory"="Clause", "name"="AffirmativeInterrogativeWithAuxiliaryBeHave", "level"="A2")}; 
(Lemma{FEATURE("value", "have")} NC Done) {-> CREATE(GrammarProfile, "subCategory"="InterrogativesClause", "superCategory"="Clause", "name"="AffirmativeInterrogativeWithAuxiliaryBeHave", "level"="A2")}; 
(Lemma{FEATURE("value", "have")} NC W{REGEXP("(?i)got")}) {-> CREATE(GrammarProfile, "subCategory"="InterrogativesClause", "superCategory"="Clause", "name"="AffirmativeInterrogativeWithAuxiliaryBeHave", "level"="A2")}; 

//12.AffirmativeInterrogative
(Lemma{FEATURE("value", "do")} NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="InterrogativesClause", "superCategory"="Clause", "name"="AffirmativeInterrogative", "level"="A2")}; 

//13.AffirmativeInterrogativeWithModalAuxiliaryVerbs
(ModalVerb NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="InterrogativesClause", "superCategory"="Clause", "name"="AffirmativeInterrogativeWithModalAuxiliaryVerbs", "level"="A2")}; 

//14.AffirmativeWHInterrogative
(WHWord POS_VERB NC) {-> CREATE(GrammarProfile, "subCategory"="InterrogativesClause", "superCategory"="Clause", "name"="AffirmativeWHInterrogative", "level"="A2")}; 

//15.NegativeWHInterrogative
(WHWord POS_VERB Not NC) {-> CREATE(GrammarProfile, "subCategory"="InterrogativesClause", "superCategory"="Clause", "name"="NegativeWHInterrogative", "level"="A2")}; 

//16.NegativeInterrogative
(POS_VERB Not NC) {-> CREATE(GrammarProfile, "subCategory"="InterrogativesClause", "superCategory"="Clause", "name"="NegativeInterrogative", "level"="A2")}; 



//6.PhrasesExclamations
//17.WhatA
(W{REGEXP("(?i)what")} W{REGEXP("(?i)a")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PhrasesExclamationsClause", "superCategory"="Clause", "name"="WhatA", "level"="A2")}; 

//18.WhatAPityThatClause
(W{REGEXP("(?i)what")} W{REGEXP("(?i)a")} W{REGEXP("(?i)pity")} W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="PhrasesExclamationsClause", "superCategory"="Clause", "name"="WhatAPityThatClause", "level"="A2")}; 
(W{REGEXP("(?i)what")} W{REGEXP("(?i)a")} W{REGEXP("(?i)pity")}) {-> CREATE(GrammarProfile, "subCategory"="PhrasesExclamationsClause", "superCategory"="Clause", "name"="WhatAPityThatClause", "level"="A2")}; 



//7.Relative
//19.NonDefiningSubjectWithWho
(NC W{REGEXP("(?i)who")} Adverb POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="NonDefiningSubjectWithWho", "level"="A2")}; 
(NC W{REGEXP("(?i)who")}  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="NonDefiningSubjectWithWho", "level"="A2")}; 

//20.DefiningSubjectWithWho
(NC W{REGEXP("(?i)who")} Adverb POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="DefiningSubjectWithWho", "level"="A2")}; 
(NC W{REGEXP("(?i)who")}  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="DefiningSubjectWithWho", "level"="A2")}; 

//21.NonDefiningSubjectWithWhich
(NC COMMA W{REGEXP("(?i)which")}  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="NonDefiningSubjectWithWhich", "level"="A2")}; 
(NC  W{REGEXP("(?i)which")}  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="NonDefiningSubjectWithWhich", "level"="A2")}; 

//22.DefiningSubjectWithWhich
(NC COMMA W{REGEXP("(?i)which")}  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="DefiningSubjectWithWhich", "level"="A2")}; 
(NC  W{REGEXP("(?i)which")}  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="DefiningSubjectWithWhich", "level"="A2")}; 

//23.DefiningObjectWithThat
(NC W{REGEXP("(?i)that")} NC VC) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="DefiningObjectWithThat", "level"="A2")}; 

//24.NondefiningObjectWithWhich
(NC W{REGEXP("(?i)which")} NC VC) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="NondefiningObjectWithWhich", "level"="A2")}; 

//25.DefiningObjectWithWhich
(NC W{REGEXP("(?i)which")} NC VC) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="DefiningObjectWithWhich", "level"="A2")}; 

//26.DefiningWithoutPronoun
(NC NC VC) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="DefiningWithoutPronoun", "level"="A2")}; 



//8.Subordinated
//27.IfClausesConditions
(IfClause) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="IfClausesConditions", "level"="A2")}; 

//28.TimeSubordinated
(W{REGEXP("(?i)when")} FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="TimeSubordinated", "level"="A2")}; 
(W{REGEXP("(?i)while")} FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="TimeSubordinated", "level"="A2")}; 

//29.PurposeSubordinated
(ToDoNonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="PurposeSubordinated", "level"="A2")}; 


//9.Conditional
//30.IfPresentSimple
(W{REGEXP("(?i)if")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfPresentSimple", "level"="A2")}; 

//31.PresentSimpleIfClauseImperative
(W{REGEXP("(?i)if")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseImperative", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} NC) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseImperative", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} ) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseImperative", "level"="A2")}; 

//32.PresentSimpleIfClauseRealConditions
(W{REGEXP("(?i)if")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseRealConditions", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} NC) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseRealConditions", "level"="A2")}; 
(POS{FEATURE("PosValue", "VB")} ) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseRealConditions", "level"="A2")}; 

(NC Can POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseRealConditions", "level"="A2")}; 

//33.IfClauseImperativeHedging
(W{REGEXP("(?i)if")} W{REGEXP("(?i)you")} W{REGEXP("(?i)like")}) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfClauseImperativeHedging", "level"="A2")}; 
(W{REGEXP("(?i)if")} W{REGEXP("(?i)you")} W{REGEXP("(?i)want")}) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfClauseImperativeHedging", "level"="A2")}; 
(W{REGEXP("(?i)if")} W{REGEXP("(?i)you")} W{REGEXP("(?i)prefer")}) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfClauseImperativeHedging", "level"="A2")}; 










//B1****************************
//SCRIPT B1_Level.B1_Nouns;

//1.NounPhrases
//EXAMPLE 1.ComplexNounPhrasesWithAdjectives
((POS_ADJ COMMA)+ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithAdjectives", "level"="B1")};
((POS_ADJ)+ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithAdjectives", "level"="B1")};

//EXAMPLE 2.ComplexNounPhrasesWithAdverbsAdjectives
((POS_ADV POS_ADJ COMMA)+ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithAdverbsAdjectives", "level"="B1")};
((POS_ADV POS_ADJ)+ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithAdverbsAdjectives", "level"="B1")};
((POS_ADJ COMMA)+ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithAdverbsAdjectives", "level"="B1")};
((POS_ADJ)+ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithAdverbsAdjectives", "level"="B1")};

//EXAMPLE 3.SuchAAdjectiveNoun
(W{REGEXP("(?i)such")} W{REGEXP("(?i)a")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="SuchAAdjectiveNoun", "level"="B1")};
(W{REGEXP("(?i)such")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="SuchAAdjectiveNoun", "level"="B1")};

//EXAMPLE 4.NounPrepositionalPhrases
(POS_NOUN  PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounPrepositionalPhrases", "level"="B1")};

//EXAMPLE 5.NounPhrasesWithSuperlatives
(Superlative POS_NOUN) (POS_PRON Have Done) {-> CREATE(GrammarProfile,1, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounPhrasesWithSuperlatives", "level"="B1")}; 

//EXAMPLE 6.PossessiveSWithoutNoun
(POS_NOUN  POS{FEATURE("PosValue", "POS")}) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="PossessiveSWithoutNoun", "level"="B1")};

//EXAMPLE 7.NounOfPossessivePronoun
(POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounOfPossessivePronoun", "level"="B1")};

//EXAMPLE 8.FriendOfPossessivePronoun
(W{REGEXP("(?i)a")} W{REGEXP("(?i)friend")} W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")} POS_NOUN ) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="FriendOfPossessivePronoun", "level"="B1")};
(W{REGEXP("(?i)friends")} W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")} POS_NOUN ) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="FriendOfPossessivePronoun", "level"="B1")};

//EXAMPLE 9.ComplexNounPhraseWithPossessiveSNoun
(POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")} POS_NOUN POS{FEATURE("PosValue", "POS")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhraseWithPossessiveSNoun", "level"="B1")};

//EXAMPLE 10.NounPhraseNounPhrase
(NC COMMA NC) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounPhraseNounPhrase", "level"="B1")};

//EXAMPLE 11.IndefinitePronounsNounPhrase
(IndefinitePronoun POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="IndefinitePronounsNounPhrase", "level"="B1")};
(IndefinitePronoun NonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="IndefinitePronounsNounPhrase", "level"="B1")};

//EXAMPLE 12.TheThingNounPhrase
(W{REGEXP("(?i)the")} W{REGEXP("(?i)thing")}) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="TheThingNounPhrase", "level"="B1")};

//2.TypesNoun
//EXAMPLE 1.CommenNounsTypes
(POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="CommenNounsTypes", "level"="B1")};

//3.PluralNoun
//EXAMPLE 1.CollectiveNounsPlural
(CollectiveNoun) {-> CREATE(GrammarProfile, "subCategory"="PluralNoun", "superCategory"="Noun", "name"="CollectiveNounsPlural", "level"="B1")};

//4.UncountableNoun
//EXAMPLE 1.UncountableNounsPlural
(UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="UncountableNoun", "superCategory"="Noun", "name"="UncountableNounsPlural", "level"="B1")};

//EXAMPLE 2.WithDeterminersQualityUncountable
(DeterminerWithUncountableNouns UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="Uncountable", "superCategory"="Noun", "name"="WithDeterminersQualityUncountable", "level"="B1")};


//SCRIPT B1_Level.B1_Pronouns;

//1.PossessivePronoun
//EXAMPLE 1.OfYoursPossessive
(POS_NOUN W{REGEXP("(?i)of")} W{REGEXP("(?i)yours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OfYoursPossessive", "level"="B1")};

//EXAMPLE 2.ComparativeClausesWithMineYours
(AsAdjAs W{REGEXP("(?i)mine|yours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="ComparativeClausesWithMineYours", "level"="B1")};

//EXAMPLE 3.YoursAsSubject
(W{REGEXP("(?i)yours")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="YoursAsSubject", "level"="B1")};

//2.ReflexivePronoun
//EXAMPLE 1.BySingularReflexive
(W{REGEXP("(?i)by")} W{REGEXP("(?i)myself|yourself|himself|herself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="BySingularReflexive", "level"="B1")};

//EXAMPLE 2.SameSubjectAndObjectSingularReflexive
(POS_VERB W{REGEXP("(?i)myself|yourself|himself|herself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="SameSubjectAndObjectSingularReflexive", "level"="B1")};

//EXAMPLE 3.AfterPrepositionsSingularReflexive
(POS_ADP W{REGEXP("(?i)myself|yourself|himself|herself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="AfterPrepositionsSingularReflexive", "level"="B1")};

//EXAMPLE 4.ForEmphasisSingularReflexive
(W{REGEXP("(?i)myself|yourself|himself|herself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="ForEmphasisSingularReflexive", "level"="B1")};

//3.SubjectObjectPronoun
//EXAMPLE 1.SubjectUsingItToIntroduce
(W{REGEXP("(?i)it")} Be POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectUsingItToIntroduce", "level"="B1")};

//4.DemonstrativesPronoun
//EXAMPLE 1.ThisAlreadyMentioned
(W{REGEXP("(?i)this")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThisAlreadyMentioned", "level"="B1")};

//EXAMPLE 2.TheseDemonstratives
(W{REGEXP("(?i)these")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="TheseDemonstratives", "level"="B1")};

//EXAMPLE 3.TheseAlreadyMentioned
(W{REGEXP("(?i)these")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="TheseAlreadyMentioned", "level"="B1")};

//EXAMPLE 4.ThoseDemonstratives
(W{REGEXP("(?i)those")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThoseDemonstratives", "level"="B1")};

//EXAMPLE 5.ModifyingDemonstratives
(DeterminerOf DemonstrativePronoun) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ModifyingDemonstratives", "level"="B1")};

//EXAMPLE 6.ThisOneThatOneSubstitutionDemonstratives
(W{REGEXP("(?i)this")} W{REGEXP("(?i)one")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThisOneThatOneSubstitutionDemonstratives", "level"="B1")};
(W{REGEXP("(?i)that")} W{REGEXP("(?i)one")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThisOneThatOneSubstitutionDemonstratives", "level"="B1")};

//5.QuantityPronoun
//EXAMPLE 1.SubjectAndObjectPronounsBothAfewAnother
(W{REGEXP("(?i)both")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="SubjectAndObjectPronounsBothAfewAnother", "level"="B1")};
(W{REGEXP("(?i)a")} W{REGEXP("(?i)few")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="SubjectAndObjectPronounsBothAfewAnother", "level"="B1")};
(W{REGEXP("(?i)another")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="SubjectAndObjectPronounsBothAfewAnother", "level"="B1")};

//EXAMPLE 2.WithOfObjectPronoun
(DeterminerOf POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="WithOfObjectPronoun", "level"="B1")};

//6.SubstitutionPronoun, one, ones, none
//EXAMPLE 1.WhichOneSubstitution
(W{REGEXP("(?i)which")} W{REGEXP("(?i)one")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="WhichOneSubstitution", "level"="B1")};

//EXAMPLE 2.ThisOneThatOneSubstitution
(W{REGEXP("(?i)this")} W{REGEXP("(?i)one")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="ThisOneThatOneSubstitution", "level"="B1")};
(W{REGEXP("(?i)that")} W{REGEXP("(?i)one")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="ThisOneThatOneSubstitution", "level"="B1")};

//EXAMPLE 3.OnesSubstitution
(W{REGEXP("(?i)ones")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="OnesSubstitution", "level"="B1")};

//EXAMPLE 4.PremodifyingSubstitution
(POS_DET POS_ADJ W{REGEXP("(?i)ones")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="PremodifyingSubstitution", "level"="B1")};

//EXAMPLE 5.PostmodifyingSpecifyingSubstitution
(W{REGEXP("(?i)the")} W{REGEXP("(?i)ones")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="PostmodifyingSpecifyingSubstitution", "level"="B1")};

//EXAMPLE 6.PremodifierOnesGeneralReference
(POS_ADJ W{REGEXP("(?i)ones")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="PremodifierOnesGeneralReference", "level"="B1")};

//7.IndefinitePronoun - thing, -one, -body etc
//EXAMPLE 1.SubjectIndefinite
(IndefinitePronoun VC) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="SubjectIndefinite", "level"="B1")};

//EXAMPLE 2.ObjectOrComplementIndefinite
(IndefinitePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="ObjectOrComplementIndefinite", "level"="B1")};

//EXAMPLE 3.PremodifiersIntensifyingIndefinite
(IndefinitePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="PremodifiersIntensifyingIndefinite", "level"="B1")};

//8.GenericUsePronoun
//EXAMPLE 1.OneGeneralFormal
(W{REGEXP("(?i)one")}) {-> CREATE(GrammarProfile, "subCategory"="GenericUsePronoun", "superCategory"="Pronoun", "name"="OneGeneralFormal", "level"="B1")};

//9.Reciprocal
//EXAMPLE 1.EachOtherReciprocal
(W{REGEXP("(?i)each")} W{REGEXP("(?i)other")}) {-> CREATE(GrammarProfile, "subCategory"="GenericUsePronoun", "superCategory"="Pronoun", "name"="EachOtherReciprocal", "level"="B1")};



//SCRIPT B1_Level.B1_Adjectives;

//1.CombiningAdjective:
    //EXAMPLE 1: BeforeTheNounCombiningAdjectives
(POS_ADJ COMMA POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="BeforeTheNounCombiningAdjectives", "level"="B1")} ; 
    
//EXAMPLE 2: CombiningComparativeAdjectivesWithAnd 
(Comparative W{REGEXP("(?i)and")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningComparativeAdjectivesWithAnd", "level"="B1")}; 

//EXAMPLE 3: CombiningMoreThanTwoAdjectives
(Be AdjectivePhrase) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningMoreThanTwoAdjectives", "level"="B1")};
    
//EXAMPLE 4: CombiningTheSameComparativeAdjectiveWithAnd
(Lemma{FEATURE("value", "become")} Comparative W{REGEXP("(?i)and")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningTheSameComparativeAdjectiveWithAnd", "level"="B1")}; 
(Lemma{FEATURE("value", "get")} Comparative W{REGEXP("(?i)and")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningTheSameComparativeAdjectiveWithAnd", "level"="B1")}; 
(Comparative W{REGEXP("(?i)and")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningTheSameComparativeAdjectiveWithAnd", "level"="B1")}; 

//EXAMPLE 5: CompoundAdjectives 
(POS_ADJ{CONTAINS(SPECIAL)})  {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CompoundAdjectives", "level"="B1")};



//2.ComparativesAdjective:
    //EXAMPLE 1: WithSoMuchComparatives
(Be? W{REGEXP("(?i)so")} W{REGEXP("(?i)much")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithSoMuchComparatives", "level"="B1")}; 
(Be? W{REGEXP("(?i)much")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithSoMuchComparatives", "level"="B1")}; 

//EXAMPLE 2: WithALittleBitComparatives
(Be? W{REGEXP("(?i)a")} W{REGEXP("(?i)bit")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithALittleBitComparatives", "level"="B1")}; 
(Be? W{REGEXP("(?i)a")} W{REGEXP("(?i)little")} W{REGEXP("(?i)bit")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithALittleBitComparatives", "level"="B1")}; 

//EXAMPLE 3: WithAndComparatives
(Lemma{FEATURE("value", "get")} Comparative W{REGEXP("and")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithAndComparatives", "level"="B1")}; 
(Lemma{FEATURE("value", "become")} Comparative W{REGEXP("and")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithAndComparatives", "level"="B1")}; 
(Comparative W{REGEXP("and")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithAndComparatives", "level"="B1")}; 

//EXAMPLE 4: WithEvenComparatives
(Be W{REGEXP("(?i)even")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithEvenComparatives", "level"="B1")}; 
(Lemma{FEATURE("value", "get")} W{REGEXP("(?i)even")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithEvenComparatives", "level"="B1")}; 
(W{REGEXP("(?i)even")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithEvenComparatives", "level"="B1")}; 



//3.ModifyingAdjective:
    //EXAMPLE 1.AdjectivePhraseNoun
(AdverbAdjective POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="AdjectivePhraseNoun", "level"="B1")}; 

//EXAMPLE 2.WithEnoughModifying
(POS_ADJ W{REGEXP("(?i)enough")}) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithEnoughModifying", "level"="B1")}; 

//EXAMPLE 3.WithQuiteAModifying
(W{REGEXP("(?i)quite")} W{REGEXP("(?i)a")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithQuiteAModifying", "level"="B1")}; 

//EXAMPLE 4.WithTooToInfinitiveModifying
(W{REGEXP("(?i)too")} POS_ADJ ToDo) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithTooToInfinitiveModifying", "level"="B1")}; 




//4.PositionAdjective:
    DECLARE AAdj;
(POS_ADJ{REGEXP("\\ba\\S*")}) {-> MARK(AAdj)};
(POS_ADV{REGEXP("\\ba\\S*")}) {-> MARK(AAdj)};

//EXAMPLE 1.AdjectivesWithPrefixA 
(AAdj) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="AdjectivesWithPrefixA", "level"="B1")}; 

//EXAMPLE 2.AttributiveWithNouns
(POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="AttributiveWithNouns", "level"="B1")}; 

//EXAMPLE 3.WithMakeAsObjectComplementPosition
(Lemma{FEATURE("value", "make")} NC POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="WithMakeAsObjectComplementPosition", "level"="B1")}; 

//EXAMPLE 4.WithPronounPosition
(IndefinitePronoun POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="WithPronounPosition", "level"="B1")}; 


//5.SuperlativesAdjective:
    
    //EXAMPLE 1.ComplexNounPhrasesSuperlatives
(Superlative POS_NOUN PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="ComplexNounPhrasesSuperlatives", "level"="B1")}; 

//EXAMPLE 2.TheBestWithNounAndPresentPerfect
(W{REGEXP("(?i)the")} W{REGEXP("(?i)best")} POS_NOUN W{REGEXP("(?i)present")} POS_PRON Has Done) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="TheBestWithNounAndPresentPerfect", "level"="B1")}; 
(W{REGEXP("(?i)the")} W{REGEXP("(?i)best")} POS_NOUN POS_PRON Has Done) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="TheBestWithNounAndPresentPerfect", "level"="B1")}; 

//EXAMPLE 3.OneOfSuperlative
(W{REGEXP("(?i)one")} W{REGEXP("(?i)of")} Superlative) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="OneOfSuperlative", "level"="B1")}; 

//EXAMPLE 4.TheBestWithNounAndToInfinitive
(W{REGEXP("(?i)the")} W{REGEXP("(?i)best")} POS_NOUN ToDo) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="TheBestWithNounAndToInfinitive", "level"="B1")}; 

//EXAMPLE 5.WithDeterminersSuperlatives
(POS{FEATURE("PosValue", "PRP$")} POS{FEATURE("PosValue", "JJS")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithDeterminersSuperlatives", "level"="B1")}; 
(POS{FEATURE("PosValue", "PRP$")} W{REGEXP("(?i)most")}  POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithDeterminersSuperlatives", "level"="B1")}; 
(POS{FEATURE("PosValue", "PRP$")} W{REGEXP("(?i)least")}  POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithDeterminersSuperlatives", "level"="B1")}; 





//SCRIPT B1_Level.B1_Adverbs;

//1.AdverbAsModifiers:
    //EXAMPLE 1.TimeAdverbAsModifiers
(TimeAdv) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="TimeAdverbAsModifiers", "level"="B1")};

//EXAMPLE 2.PlaceAdverbAsModifiers
(Place) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="PlaceAdverbAsModifiers", "level"="B1")};

//EXAMPLE 3.DegreeWithVerbsAdverbAsModifiers
(POS_VERB Degree) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="DegreeWithVerbsAdverbAsModifiers", "level"="B1")}; 

//EXAMPLE 4.DegreeReallyReallyAdverbAsModifiers
(W{REGEXP("(?i)really")} W{REGEXP("(?i)really")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="DegreeReallyReallyAdverbAsModifiers", "level"="B1")}; 
(W{REGEXP("(?i)really")} W{REGEXP("(?i)really")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="DegreeReallyReallyAdverbAsModifiers", "level"="B1")}; 

//EXAMPLE 5.MannerAdverbAsModifiers
(Manner) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="MannerAdverbAsModifiers", "level"="B1")};

//EXAMPLE 6.LinkingAdverbAsModifiers
(Linking) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="LinkingAdverbAsModifiers", "level"="B1")};

//EXAMPLE 7.FocusAdverbAsModifiers
(Focus) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="FocusAdverbAsModifiers", "level"="B1")};

//EXAMPLE 8.OrganisingAdverbAsModifiers
(Organising) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="OrganisingAdverbAsModifiers", "level"="B1")};

//EXAMPLE 9.CertaintyAdverbAsModifiers
(Certainty) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="CertaintyAdverbAsModifiers", "level"="B1")};

//EXAMPLE 10.StanceAdverbAsModifiers
(Stance) {-> CREATE(GrammarProfile, "subCategory"="AdverbAsModifiers", "superCategory"="Adverb", "name"="StanceAdverbAsModifiers", "level"="B1")};



//2.AdverbsAndAdverbPhrases: types and meanings:
    //EXAMPLE 1.DegreeModifyingAdverb
(Degree POS_ADV) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeModifyingAdverb", "level"="B1")}; 

//EXAMPLE 2.MannerModifyingvVerb
(Manner POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="MannerModyfyingvVerb", "level"="B1")}; 
(POS_VERB  Manner) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="MannerModyfyingvVerb", "level"="B1")}; 

//EXAMPLE 3.StanceModifyingClause
(Stance COMMA) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="StanceModifyingClause", "level"="B1")}; 

//EXAMPLE 4.AdverbModifyingAdverbs
(AdverbModifyingAdverb POS_ADV) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="AdverbModifyingAdverbs", "level"="B1")}; 


//SCRIPT B1_Level.B1_Determiners;

//1.ArticlesDeterminer
//EXAMPLE 1.AnotherArticles
(W{REGEXP("(?i)another")} AdjectiveNoun) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="AnotherArticles", "level"="B1")};

//EXAMPLE 2.PrepositionNoArticle
(POS_ADP POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="PrepositionNoArticle", "level"="B1")};

//EXAMPLE 3.NoArticle
(W{-PARTOF(Article)}) (POS_NOUN) {-> CREATE(GrammarProfile,2, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="NoArticle", "level"="B1")};

//EXAMPLE 4.OneMoreWithAnotherArticles
(W{REGEXP("(?i)another")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="OneMoreWithAnotherArticles", "level"="B1")};

//EXAMPLE 5.DifferentWithAnotherArticles
(W{REGEXP("(?i)another")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="DifferentWithAnotherArticles", "level"="B1")};

//EXAMPLE 6.TheOtherArticles
(W{REGEXP("(?i)the")} W{REGEXP("(?i)other")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="TheOtherArticles", "level"="B1")};



//2.DemonstrativesDeterminer
//EXAMPLE 1.ThisPast
(W{REGEXP("(?i)this")} W{REGEXP("(?i)morning")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisPast", "level"="B1")};
(W{REGEXP("(?i)this")} W{REGEXP("(?i)summer")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisPast", "level"="B1")};

//3.PossessivesDeterminer
//EXAMPLE 1.Their
(W{REGEXP("(?i)their")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="Their", "level"="B1")};

//EXAMPLE 2.IrregularPluralNounS
(IrregularPluralNoun POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="IrregularPluralNounS", "level"="B1")};

//4.QuantityDeterminer

//EXAMPLE 1.WithPluralNounsQuantity
(DeterminerWithPluralNouns Article AdjectiveNoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="WithPluralNounsQuantity", "level"="B1")};
(DeterminerWithPluralNouns AdjectiveNoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="WithPluralNounsQuantity", "level"="B1")};

//EXAMPLE 2.WithUncountableNounsQuantity
(DeterminerWithUncountableNouns AdjectiveNoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="WithUncountableNounsQuantity", "level"="B1")};

//EXAMPLE 3.WithPluralAndUncountableNounsQuantity
(DeterminerWithPluralAndUncountableNouns AdjectiveNoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="WithPluralAndUncountableNounsQuantity", "level"="B1")};

//EXAMPLE 4.MuchWithUncountableNounsInterrogative
(W{REGEXP("(?i)much")} AdjectiveNoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="MuchWithUncountableNounsInterrogative", "level"="B1")};

//EXAMPLE 5.SoMuchTooMuchWithUncountableNouns
(W{REGEXP("(?i)so")} W{REGEXP("(?i)much")} AdjectiveNoun ) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="SoMuchTooMuchWithUncountableNouns", "level"="B1")};
(W{REGEXP("(?i)too")} W{REGEXP("(?i)much")} AdjectiveNoun ) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="SoMuchTooMuchWithUncountableNouns", "level"="B1")};

//EXAMPLE 6.ManyWithPluralNounsInterrogative
(W{REGEXP("(?i)many")} AdjectiveNoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="ManyWithPluralNounsInterrogative", "level"="B1")};

//EXAMPLE 7.DeterminerOfDeterminerQuantity (???)
(DeterminerOf POS{FEATURE("PosValue", "PRP$")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="DeterminerOfDeterminerQuantity", "level"="B1")};
(DeterminerOf POS_DET POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="DeterminerOfDeterminerQuantity", "level"="B1")};

//EXAMPLE 8.ModifyingQuantity
(POS_ADV Determiner) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="ModifyingQuantity", "level"="B1")};
(POS_ADV POS_DET) {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="ModifyingQuantity", "level"="B1")};







//SCRIPT B1_Level.B1_Conjunctions;

//1.CoordinatingConjunction:
    //EXAMPLE 1.ComplexAddingCoordinating
(POS_CONJ) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="ComplexAddingCoordinating", "level"="B1")};

//EXAMPLE 2.PlusWithNounsCoordinating
(W{REGEXP("(?i)plus")} NC) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="PlusWithNounsCoordinating", "level"="B1")};

//EXAMPLE 3.PlusWithClausesCoordinating
(W{REGEXP("(?i)plus")} COMMA) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="PlusWithClausesCoordinating", "level"="B1")};

//EXAMPLE 4.BothAndWithNounsCoordinating (problem!!!)
(W{REGEXP("(?i)both")} # W{REGEXP("(?i)and")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="BothAndWithNounsCoordinating", "level"="B1")};

//EXAMPLE 5.EitherOrCoordinating 
(W{REGEXP("(?i)either")} # W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="EitherOrCoordinating", "level"="B1")};


//2.SubordinatingConjunction:
    //EXAMPLE 1.SimpleSubordinatingConjunctions
(SimpleSubordinatingConjunction) {-> CREATE(GrammarProfile, "subCategory"="SubordinatingConjunction", "superCategory"="Conjunction", "name"="SimpleSubordinatingConjunctions", "level"="B1")};


//SCRIPT B1_Level.B1_DiscourseMarkers;

//1.DiscourseMarkersInWriting
//EXAMPLE 1.SequencingDiscourseMarkers    
(Organising) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="SequencingDiscourseMarkers", "level"="B1")};

//EXAMPLE 2.OrganisingContrastingDiscourseMarkers    
(Contrasting) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="OrganisingContrastingDiscourseMarkers", "level"="B1")};

//EXAMPLE 3.OrganisingMakingNewKnowledgeInformalDiscourseMarkers    
(MakingNewKnowledgeInformal) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="OrganisingMakingNewKnowledgeInformalDiscourseMarkers", "level"="B1")};

//EXAMPLE 4.AdverbsStanceDiscourseMarkers    
(Stance) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="AdverbsStanceDiscourseMarkers", "level"="B1")};

//EXAMPLE 5.OrganisingAddingDiscourseMarkers    
(Adding) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="OrganisingAddingDiscourseMarkers", "level"="B1")};


//SCRIPT B1_Level.B1_Focus;

//1.Focus
//EXAMPLE 1.FrontingAdverbsFocus
(POS_ADV COMMA NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="FrontingAdverbsFocus", "level"="B1")};
(POS_ADV NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="FrontingAdverbsFocus", "level"="B1")};

//EXAMPLE 2.ItBeAdjectiveThatFocus
(W{REGEXP("(?i)it")} Be POS_ADJ W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ItBeAdjectiveThatFocus", "level"="B1")};



//SCRIPT B1_Level.B1_Negation;

//1.Negation
//EXAMPLE 1.AuxiliaryVerbsBeHavePast
(W{REGEXP("(?i)was|were|had")} Not) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="AuxiliaryVerbsBeHavePast", "level"="B1")};

//EXAMPLE 2.MentalProcessVerbClause
(W{REGEXP("(?i)I")} W{REGEXP("(?i)do")} Not W{REGEXP("(?i)think")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="MentalProcessVerbClause", "level"="B1")};
(W{REGEXP("(?i)I")} W{REGEXP("(?i)do")} Not W{REGEXP("(?i)believe")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="MentalProcessVerbClause", "level"="B1")};

//EXAMPLE 3.QuestionsNegation
(POS_VERB Not POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="QuestionsNegation", "level"="B1")};

//EXAMPLE 4.SeekingAgreementNegation
(POS_VERB Not POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="SeekingAgreementNegation", "level"="B1")};

//EXAMPLE 5.PronounsNegation
(W{REGEXP("(?i)nothing|nobody|none|anything|anyone|anybody")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="PronounsNegation", "level"="B1")};

//EXAMPLE 6.AdverbsNegation
(W{REGEXP("(?i)ever|never|yet|still")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="AdverbsNegation", "level"="B1")};

//EXAMPLE 7.NotNonFiniteAndElliptedClauses (???????)
//(Not NonFiniteClause Particle? POS_ADV? PC? POS_PRON? NC PrepositionPhrase?) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotNonFiniteAndElliptedClauses", "level"="B1")};


//SCRIPT B1_Level.B1_Questions;

//1.Alternatives
//EXAMPLE 1.PhrasePhraseAlternatives
(W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="PhrasePhraseAlternatives", "level"="B1")};

//EXAMPLE 2.OrSomethingElseVague
(W{REGEXP("(?i)or")} W{REGEXP("(?i)something")} W{REGEXP("(?i)else")} QUESTION) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="OrSomethingElseVague", "level"="B1")};

//EXAMPLE 3.ClauseClauseAlternatives
(W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="ClauseClauseAlternatives", "level"="B1")};

//EXAMPLE 4.OrNot
(W{REGEXP("(?i)or")} W{REGEXP("(?i)not")} QUESTION) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="OrNot", "level"="B1")};

//2.tags
//EXAMPLE 1.NegativeMainClausesAffirmativeQuestionTag
(Lemma{FEATURE("value", "be")} POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="NegativeMainClausesAffirmativeQuestionTag", "level"="B1")};
(Lemma{FEATURE("value", "do")} POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="NegativeMainClausesAffirmativeQuestionTag", "level"="B1")};
(Lemma{FEATURE("value", "have")} POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="NegativeMainClausesAffirmativeQuestionTag", "level"="B1")};

//EXAMPLE 2.AffirmativeMainClausesNegativeQuestionTag
(Lemma{FEATURE("value", "be")} Not POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesNegativeQuestionTag", "level"="B1")};
(Lemma{FEATURE("value", "do")} Not POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesNegativeQuestionTag", "level"="B1")};
(Lemma{FEATURE("value", "have")} Not POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesNegativeQuestionTag", "level"="B1")};

//EXAMPLE 3.AffirmativeMainClausesAffirmativeQuestionTag
(Lemma{FEATURE("value", "be")} POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesAffirmativeQuestionTag", "level"="B1")};
(Lemma{FEATURE("value", "do")} POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesAffirmativeQuestionTag", "level"="B1")};
(Lemma{FEATURE("value", "have")} POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesAffirmativeQuestionTag", "level"="B1")};

//EXAMPLE 4.RightAsInformalTag
(W{REGEXP("(?i)right")} QUESTION) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="RightAsInformalTag", "level"="B1")};

//3.Wh
//EXAMPLE 1.NegativeQuestionsWithModalsWH
(WHWord POS{FEATURE("PosValue", "MD")} Not POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="NegativeQuestionsWithModalsWH", "level"="B1")};

//4.YesNo
//EXAMPLE 1.NegativeQuestionsWithBeYesno
(Lemma{FEATURE("value", "be")} Not POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="NegativeQuestionsWithBeYesno", "level"="B1")};

//EXAMPLE 2.NegativeQuestionsAuxiliaryVerbsYesno
(Dont POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="NegativeQuestionsAuxiliaryVerbsYesno", "level"="B1")};

//EXAMPLE 3.NegativeQuestionsModalVerbsYesno
(POS{FEATURE("PosValue", "MD")} Not POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="NegativeQuestionsModalVerbsYesno", "level"="B1")};

//EXAMPLE 4.SeekingAgreementYesno
(Lemma{FEATURE("value", "be")} Not W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesNegativeQuestionTag", "level"="B1")};
(Lemma{FEATURE("value", "do")} Not W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesNegativeQuestionTag", "level"="B1")};
(POS{FEATURE("PosValue", "MD")} Not W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesNegativeQuestionTag", "level"="B1")};
(Lemma{FEATURE("value", "be")} Not NC) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesNegativeQuestionTag", "level"="B1")};
(Lemma{FEATURE("value", "do")} Not NC) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesNegativeQuestionTag", "level"="B1")};
(POS{FEATURE("PosValue", "MD")} Not NC) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="AffirmativeMainClausesNegativeQuestionTag", "level"="B1")};


//SCRIPT B1_Level.B1_Verbs;

//1.PhrasalPrepositional
//EXAMPLE 1.VerbParticlePrepositionObject
(POS_VERB Particle POS_ADP NC) {-> CREATE(GrammarProfile, "subCategory"="PhrasalPrepositionalVerb", "superCategory"="Verb", "name"="VerbParticlePrepositionObject", "level"="B1")};

//2.Prepositional
//EXAMPLE 1.VerbPrepositionObject
(POS_VERB POS_ADP NC) {-> CREATE(GrammarProfile, "subCategory"="PrepositionalVerb", "superCategory"="Verb", "name"="VerbPrepositionObject", "level"="B1")};

//3.PatternsThatClauses
//EXAMPLE 1.ReportingVerbsDirectObjectThatClause
(POS_VERB  W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="PatternsThatClauses", "superCategory"="Verb", "name"="ReportingVerbsDirectObjectThatClause", "level"="B1")};

//EXAMPLE 2.VerbsPrepositionalPhraseThatClause
(POS_VERB PrepositionPhrase W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="PatternsThatClauses", "superCategory"="Verb", "name"="VerbsPrepositionalPhraseThatClause", "level"="B1")};

//4.Phrasal
//EXAMPLE 1.NoObjectPhrasal
//(VC Particle? POS_ADV? PC? POS_PRON? ANY{-PARTOF(NC)} PrepositionPhrase?) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="NoObjectPhrasal", "level"="B1")};

//EXAMPLE 2.VerbParticleObjectPhrasal
(POS_VERB  Particle  NC) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="VerbParticleObjectPhrasal", "level"="B1")};

//EXAMPLE 3.VerbPronounParticlePhrasal
(POS_VERB POS_PRON  Particle) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="VerbPronounParticlePhrasal", "level"="B1")};

//5.TypesVerb
//EXAMPLE 1.SemiModalAuxiliaryVerbsUsedToOughtTo
(Used ToDo ){-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="SemiModalAuxiliaryVerbsUsedToOughtTo", "level"="B1")};
(Ought ToDo ){-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="SemiModalAuxiliaryVerbsUsedToOughtTo", "level"="B1")};

//6.PatternsWithToAndIng
//EXAMPLE 1.VerbToToDo
(POS_VERB ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbToToDo", "level"="B1")};

//EXAMPLE 2.WouldPreferToPoliteness
(Would W{REGEXP("(?i)prefer")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="WouldPreferToPoliteness", "level"="B1")};

//EXAMPLE 3.VerbIngForm
(POS_VERB Doing) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbIngForm", "level"="B1")};

//EXAMPLE 4.HelpObject
(Lemma{FEATURE("value", "help")} POS_PRON ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="HelpObject", "level"="B1")};
(Lemma{FEATURE("value", "help")} POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="HelpObject", "level"="B1")};

//EXAMPLE 5.VerbDirectObjectToToDo
(POS_VERB POS_PRON ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbDirectObjectToToDo", "level"="B1")};

//EXAMPLE 6.MakeLetToDoWithoutTo
(Lemma{FEATURE("value", "make")} POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="MakeLetToDoWithoutTo", "level"="B1")};
(Lemma{FEATURE("value", "let")} POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="MakeLetToDoWithoutTo", "level"="B1")};

//7.ThereIsAre
//EXAMPLE 1.NegativeThereBe
(W{REGEXP("(?i)there")} Lemma{FEATURE("value", "be")} Lemma{FEATURE("value", "not")}) {-> CREATE(GrammarProfile, "subCategory"="ThereIsAre", "superCategory"="Verb", "name"="NegativeThereBe", "level"="B1")};

//EXAMPLE 2.ThereModalVerbs
(W{REGEXP("(?i)there")} ModalVerb Be) {-> CREATE(GrammarProfile, "subCategory"="ThereIsAre", "superCategory"="Verb", "name"="ThereModalVerbs", "level"="B1")};



//SCRIPT B1_Level.B1_Modality;

//1.AdjectivesModality
//EXAMPLE 1.ItBeImportantClause
(W{REGEXP("(?i)it")} Be W{REGEXP("(?i)important")} W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="ItBeImportantClause", "level"="B1")};

//EXAMPLE 2.IfClausePossiblePoliteness
(W{REGEXP("(?i)if")} W{REGEXP("(?i)it")} Be W{REGEXP("(?i)possible")} ) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="IfClausePossiblePoliteness", "level"="B1")};
(W{REGEXP("(?i)if")} W{REGEXP("(?i)possible")} ) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="IfClausePossiblePoliteness", "level"="B1")};

//EXAMPLE 3.ItBeAdjectiveToDoHedgingEmphasis
(W{REGEXP("(?i)it")} Be POS_ADJ ToDo) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="ItBeAdjectiveToDoHedgingEmphasis", "level"="B1")};

//EXAMPLE 4.ItBeAdjectiveForObjectToDo
(W{REGEXP("(?i)it")} Be POS_ADJ W{REGEXP("(?i)for")} POS_PRON ToDo) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="ItBeAdjectiveForObjectToDo", "level"="B1")};

//2.Can
//EXAMPLE 1.NegativeQuestionsCan
(Lemma{FEATURE("value", "can")} Not POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="NegativeQuestionsCan", "level"="B1")};

//EXAMPLE 2.WithAdverbsCan
(Lemma{FEATURE("value", "can")} POS_ADV) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="WithAdverbsCan", "level"="B1")};

//EXAMPLE 3.GeneralTruthsAndTendenciesCanBe
(Lemma{FEATURE("value", "can")} W{REGEXP("(?i)be")}) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="GeneralTruthsAndTendenciesCanBe", "level"="B1")};

//EXAMPLE 4.SuppriseCanYouBelieve
(W{REGEXP("(?i)can")} W{REGEXP("(?i)you")} W{REGEXP("(?i)believe")}) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="SuppriseCanYouBelieve", "level"="B1")};

//3.ExpressionsWithBe
//EXAMPLE 1.ModalWithBeAbleTo
(ModalVerb W{REGEXP("(?i)be")} W{REGEXP("(?i)able")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="ModalWithBeAbleTo", "level"="B1")};

//EXAMPLE 2.BeExpressionToDo
(Be W ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeExpressionToDo", "level"="B1")};

//EXAMPLE 3.BeAllowedToPermission
(Be W{REGEXP("(?i)allowed")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAllowedToPermission", "level"="B1")};

//EXAMPLE 4.BeSupposedToPastExpectation
(Be W{REGEXP("(?i)supposed")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeSupposedToPastExpectation", "level"="B1")};

//EXAMPLE 5.BeAbleToPast
(Was W{REGEXP("(?i)able")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAbleToPast", "level"="B1")};


//4.HaveGotTo
//EXAMPLE 1.IHaveToAdmit
(W{REGEXP("(?i)i")} W{REGEXP("(?i)have")} W{REGEXP("(?i)to")} W{REGEXP("(?i)admit")}) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="IHaveToAdmit", "level"="B1")};

//EXAMPLE 2.HaveToToDo
(Have ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="HaveToToDo", "level"="B1")};

 
 //5.May
 //EXAMPLE 1.NegativeMay
 (Lemma{FEATURE("value", "may")} Not) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="NegativeMay", "level"="B1")};
 
 //EXAMPLE 2.WithAdverbsMay
 (May POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="WithAdverbsMay", "level"="B1")};
 
 //EXAMPLE 3.MayIPermission
 (May W{REGEXP("(?i)I")}) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="MayIPermission", "level"="B1")};
 
 //EXAMPLE 4.MayIQuestions
 (May W{REGEXP("(?i)I")}) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="MayIQuestions", "level"="B1")};
 
 //6.Might
 //EXAMPLE 1.NegativeMight
 (Lemma{FEATURE("value", "might")} Not) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="NegativeMight", "level"="B1")};
 
 //EXAMPLE 2.ReportedSpeechMight
 (Might POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="ReportedSpeechMight", "level"="B1")};
 
 //EXAMPLE 3.SuggestionsMight
 (Might POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="SuggestionsMight", "level"="B1")};
 
 //EXAMPLE 4.PastAffirmative
 (Might Have Done) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="PastAffirmative", "level"="B1")};
 
 //EXAMPLE 5.PossibilityInThePast
 (Might Have Done) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="PossibilityInThePast", "level"="B1")};
 
 //EXAMPLE 6.FocusMight
 (W{REGEXP("(?i)as")}  W{REGEXP("(?i)you")} Might POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="FocusMight", "level"="B1")};
 
 //7.Must
 //EXAMPLE 1.EllipsisWithSubjectMust
 (POS_PRON Must) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="EllipsisWithSubjectMust", "level"="B1")};
 
 //EXAMPLE 2.EllipsisWithoutSubjectMust
 (Must POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="EllipsisWithoutSubjectMust", "level"="B1")};
 
 //EXAMPLE 3.WithAdverbsMust
 (Must POS_ADV)  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="WithAdverbsMust", "level"="B1")};
 
 //EXAMPLE 4.DeductionsAndClusionsMust
 (W{REGEXP("(?i)it")} Must Be )  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="DeductionsAndClusionsMust", "level"="B1")};
  (W{REGEXP("(?i)you")} Must Be )  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="DeductionsAndClusionsMust", "level"="B1")};

 //EXAMPLE 5.InvitationsMust
 (Must  POS_VERB W{REGEXP("(?i)and")}  POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="InvitationsMust", "level"="B1")};
 
 //EXAMPLE 6.ObligationAndNecessityMust
 (Must)  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="ObligationAndNecessityMust", "level"="B1")};
 
 //EXAMPLE 7.SuggestionsMust
 (Must)  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="SuggestionsMust", "level"="B1")};

 

//8.Ought
//EXAMPLE 1.AffirmativeOught
(Ought ToDo)  {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="AffirmativeOught", "level"="B1")};

//EXAMPLE 2.AdviceOught
( W{REGEXP("(?i)you")} Ought ToDo)  {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="AdviceOught", "level"="B1")};


//9.Shall
//EXAMPLE 1.PlansAndIntentionsShall
(Shall POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="PlansAndIntentionsShall", "level"="B1")};

//EXAMPLE 2.SeekingAdviceShall
(WHWord Shall W{REGEXP("(?i)I")} POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="SeekingAdviceShall", "level"="B1")};

//10.Should
//EXAMPLE 1.QuestionTagsShould
(Lemma{FEATURE("value", "should")} Not POS_PRON QUESTION)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="QuestionTagsShould", "level"="B1")};

//EXAMPLE 2.PastAffirmativeShould
(Should Have Done)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="PastAffirmativeShould", "level"="B1")};

//EXAMPLE 3.PastNegativeShould
(Lemma{FEATURE("value", "should")} Not Have Done)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="PastNegativeShould", "level"="B1")};

//EXAMPLE 4.IdealOrDesiredSituationsShould
(Should POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="IdealOrDesiredSituationsShould", "level"="B1")};

//EXAMPLE 5.LikelihoodShould
(Should POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="LikelihoodShould", "level"="B1")};

//EXAMPLE 6.NarrativeDeviceShould
(W{REGEXP("(?i)you")} Should Have Done)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="NarrativeDeviceShould", "level"="B1")};

//EXAMPLE 7.RegretShould
(Should Have Done)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="RegretShould", "level"="B1")};

//EXAMPLE 8.ThankingShould
(Lemma{FEATURE("value", "should")} Not Have)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="ThankingShould", "level"="B1")};



//11.UsedTo
//EXAMPLE 1.AffirmativeUsedTo
(W{REGEXP("(?i)used")} ToDo)  {-> CREATE(GrammarProfile, "subCategory"="UsedTo", "superCategory"="Modality", "name"="AffirmativeUsedTo", "level"="B1")};

//EXAMPLE 2.NegativeUsedTo
(Lemma{FEATURE("value", "do")} Not W{REGEXP("(?i)used")} ToDo)  {-> CREATE(GrammarProfile, "subCategory"="UsedTo", "superCategory"="Modality", "name"="NegativeUsedTo", "level"="B1")};

//EXAMPLE 3.NoLongerTrueUsedTo
(W{REGEXP("(?i)used")} ToDo)  {-> CREATE(GrammarProfile, "subCategory"="UsedTo", "superCategory"="Modality", "name"="NoLongerTrueUsedTo", "level"="B1")};

//12.Will
//EXAMPLE 1.FixedPlansWill
(Will POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="FixedPlansWill", "level"="B1")};

//EXAMPLE 2.PredictionsWill
(Will POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="PredictionsWill", "level"="B1")};

//13.Would
//EXAMPLE 1.AfterIfClausesWould
(W{REGEXP("(?i)if")} # POS_PRON Would)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="AfterIfClausesWould", "level"="B1")};

//EXAMPLE 2.PastAffirmativeWould
(Lemma{FEATURE("value", "would")} Have Done)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="PastAffirmativeWould", "level"="B1")};

//EXAMPLE 3.PastNegativeWould
(Lemma{FEATURE("value", "would")} Not Have Done)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="PastNegativeWould", "level"="B1")};

//EXAMPLE 4.QuestionsWould
(Would POS_PRON)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="QuestionsWould", "level"="B1")};

//EXAMPLE 5.WithAdverbsWould
( Would POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="WithAdverbsWould", "level"="B1")};

//EXAMPLE 6.FutureInThePastWould
(Would POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="FutureInThePastWould", "level"="B1")};

//EXAMPLE 7.ImaginedSituationsInThePastWould
(Would  Have Done)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="ImaginedSituationsInThePastWould", "level"="B1")};

//EXAMPLE 8.IndirectnessWould
(Would W{REGEXP("(?i)advice|imagine|recommend|say")}) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="IndirectnessWould", "level"="B1")};

//EXAMPLE 9.PoliteRequestsWould
(Would POS_PRON)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="PoliteRequestsWould", "level"="B1")};

//EXAMPLE 10.ReportedSpeechWould
(Would POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="ReportedSpeechWould", "level"="B1")};

//EXAMPLE 11.WillingnessInThePastWould
(Lemma{FEATURE("value", "would")} Not POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="WillingnessInThePastWould", "level"="B1")};

//14.Adverbs
//EXAMPLE 1.EmphasisModality
(W{REGEXP("(?i)obviously|certainly|definitely")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Adverbs", "superCategory"="Modality", "name"="EmphasisModality", "level"="B1")};

//EXAMPLE 2.ModalVerbModalAdvebHedgingOrEmphabasis
(ModalVerb POS_ADV  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Adverbs", "superCategory"="Modality", "name"="ModalVerbModalAdvebHedgingOrEmphabasis", "level"="B1")};

//EXAMPLE 3.PossiblyPoliteness
(Could POS_PRON W{REGEXP("(?i)possibly")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Adverbs", "superCategory"="Modality", "name"="PossiblyPoliteness", "level"="B1")};


     
//15.Could
//EXAMPLE 1.AbilityCould
(Could) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="AbilityCould", "level"="B1")};

//EXAMPLE 2.PermissionCould
(Could W{REGEXP("(?i)I")}) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="PermissionCould", "level"="B1")};

//EXAMPLE 3.PossibilityCould
(Could) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="PossibilityCould", "level"="B1")};

//EXAMPLE 4.SuggestionsCould
(Could POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="SuggestionsCould", "level"="B1")};



//SCRIPT B1_Level.B1_Prepositions;

//1.Prepositions
//EXAMPLE 1.SimplePrepositions
(SimplePreposition) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="SimplePrepositions", "level"="B1")};

//EXAMPLE 2.ComplexPrepositions
(ComplexPreposition) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="ComplexPrepositions", "level"="B1")};

//EXAMPLE 3.AdverbPrepositions
(POS_ADV POS_ADP) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="AdverbPrepositions", "level"="B1")};

//EXAMPLE 4.StrandingPrepositions
(POS_VERB POS_ADP PERIOD) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="StrandingPrepositions", "level"="B1")};





//SCRIPT B1_Level.B1_Present;

//1.PresentContinuous
//EXAMPLE 1.TemporaryRepeatedActions
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="TemporaryRepeatedActions", "level"="B1")};

//EXAMPLE 2.EventsInProgress
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="EventsInProgress", "level"="B1")};

//EXAMPLE 3.TemporarySituations
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="TemporarySituations", "level"="B1")};

//2.PresentSimple
//EXAMPLE 1.NegativeTagQuestionsPresentSimple
(Doesnt W{REGEXP("(?i)you")} W{REGEXP("(?i)think|agree")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeTagQuestionsPresentSimple", "level"="B1")};

//EXAMPLE 2.QuestionsPresentSimple
(Doesnt? POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="QuestionsPresentSimple", "level"="B1")};

//EXAMPLE 3.MentalProcessVerbs
(Lemma{FEATURE("value", "remember")})  {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="MentalProcessVerbs", "level"="B1")};
(Lemma{FEATURE("value", "understand")})  {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="MentalProcessVerbs", "level"="B1")};
(Lemma{FEATURE("value", "believe")})  {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="MentalProcessVerbs", "level"="B1")};

//EXAMPLE 4.ReportingsVerbs
(Lemma{FEATURE("value", "say")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="ReportingsVerbs", "level"="B1")};
(Lemma{FEATURE("value", "show")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="ReportingsVerbs", "level"="B1")};

//EXAMPLE 5.SpeechActVerbs
(Lemma{FEATURE("value", "suggest")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SpeechActVerbs", "level"="B1")};
(Lemma{FEATURE("value", "apologise")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SpeechActVerbs", "level"="B1")};
(Lemma{FEATURE("value", "recommend")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SpeechActVerbs", "level"="B1")};



//SCRIPT B1_Level.B1_Past;

//1.PastContinuous
//EXAMPLE 1.NegativePastContinuous
(W{REGEXP("(?i)was|were")} Not Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="NegativePastContinuous", "level"="B1")};

//EXAMPLE 2.QuestionsPastContinuous
(Was NC Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="QuestionsPastContinuous", "level"="B1")};

//EXAMPLE 3.WithAdverbsPastContinuous
(Was POS_ADV Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="WithAdverbsPastContinuous", "level"="B1")};

//EXAMPLE 4.ReasonPastContinuous
(W{REGEXP("(?i)because")} POS_PRON Was Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="ReasonPastContinuous", "level"="B1")};

//EXAMPLE 5.RepeatedEventsPastContinuous
(Was W{REGEXP("(?i)always")}  Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="RepeatedEventsPastContinuous", "level"="B1")};

//2.PastPerfectContinuous
//EXAMPLE 1.AffirmativePastPerfectContinuous
(W{REGEXP("(?i)had")} BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="AffirmativePastPerfectContinuous", "level"="B1")};

//EXAMPLE 2.BackgroundEventsPastPerfectContinuous
(Had BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="BackgroundEventsPastPerfectContinuous", "level"="B1")};

//EXAMPLE 3.ContinuingEventsInThePast
(Had BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="ContinuingEventsInThePast", "level"="B1")};



//3.PastPerfectSimple
//EXAMPLE 1.AfterIfClausesPastPerfectSimple
(W{REGEXP("(?i)if")} NC Had Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="AfterIfClausesPastPerfectSimple", "level"="B1")};

//EXAMPLE 2.AffirmativePastPerfectSimple
(W{REGEXP("(?i)had")}  Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="AffirmativePastPerfectSimple", "level"="B1")};

//EXAMPLE 3.NegativePastPerfectSimple
(Hadnt  Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="NegativePastPerfectSimple", "level"="B1")};

//EXAMPLE 4.WithAdverbsPastPerfectSimple
(Had POS_ADV  Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="WithAdverbsPastPerfectSimple", "level"="B1")};

//EXAMPLE 5.TimeUpToThenPastPerfectSimple
(Had Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="TimeUpToThenPastPerfectSimple", "level"="B1")};

//4.PastSimple
//EXAMPLE 1.AffirmativePastSimple
(POS{FEATURE("PosValue", "VBD")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="AffirmativePastSimple", "level"="B1")};

//EXAMPLE 2.NegativePastSimple
(Didnt POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="NegativePastSimple", "level"="B1")};

//EXAMPLE 3.QuestionsPastSimple
(Did POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="B1")};
(Did POS_PRON ) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="B1")};

//EXAMPLE 4.HabitualStatesOrActionsPastSimple
(Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="HabitualStatesOrActionsPastSimple", "level"="B1")};

//EXAMPLE 5.ImagedSituationsAfterIf
(W{REGEXP("(?i)if")} POS_PRON Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="ImagedSituationsAfterIf", "level"="B1")};

//EXAMPLE 6.OderingOfPastEvents
(Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="OderingOfPastEvents", "level"="B1")};

//EXAMPLE 7.RegretPastSimple
(W{REGEXP("(?i)wish")} W{REGEXP("(?i)that")} NC Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="RegretPastSimple", "level"="B1")};
(W{REGEXP("(?i)wish")} NC Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="RegretPastSimple", "level"="B1")};



//5.PresentPerfectContinuous
//EXAMPLE 1.AffirmativePresentPerfectContinuous
(W{REGEXP("(?i)has|have")} BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectContinuous", "superCategory"="Past", "name"="AffirmativePresentPerfectContinuous", "level"="B1")};

//EXAMPLE 2.QuestionsPresentPerfectContinuous
(Has POS_PRON BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectContinuous", "superCategory"="Past", "name"="QuestionsPresentPerfectContinuous", "level"="B1")};

//EXAMPLE 3.RepeatedContinuingEvents
(Has BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectContinuous", "superCategory"="Past", "name"="RepeatedContinuingEvents", "level"="B1")};

//EXAMPLE 4.SingleContinuingEvent
(Has BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectContinuous", "superCategory"="Past", "name"="SingleContinuingEvent", "level"="B1")};

//6.PresentPerfectSimple
//EXAMPLE 1.DurationWithSincePresentPerfectSimple
(Has Done # W{REGEXP("(?i)since")}) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="DurationWithSincePresentPerfectSimple", "level"="B1")};

//EXAMPLE 2.WithAlreadyPresentPerfectSimple
(Has W{REGEXP("(?i)already")} Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="WithAlreadyPresentPerfectSimple", "level"="B1")};

//EXAMPLE 3.AffirmativePresentPerfectSimple
(W{REGEXP("(?i)has|have")} Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="AffirmativePresentPerfectSimple", "level"="B1")};

//EXAMPLE 4.NegativePresentPerfectSimple
(Hasnt Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="NegativePresentPerfectSimple", "level"="B1")};

//EXAMPLE 5.NegativeQuestionsPresentPerfectSimple
(Hasnt NC Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="NegativeQuestionsPresentPerfectSimple", "level"="B1")};

//EXAMPLE 6.WithAdverbsPresentPerfectSimple
(Has POS_ADV Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="WithAdverbsPresentPerfectSimple", "level"="B1")};

//EXAMPLE 7.RecentPastPresentPerfectSimple
(Has POS_ADV Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="RecentPastPresentPerfectSimple", "level"="B1")};
(Has Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="RecentPastPresentPerfectSimple", "level"="B1")};

//EXAMPLE 8.UnfinishedPresentPerfectSimple
(Has Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="UnfinishedPresentPerfectSimple", "level"="B1")};

//EXAMPLE 9.WithSuperlativePresentPerfectSimple
(Superlative POS_NOUN POS_PRON Has Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="WithSuperlativePresentPerfectSimple", "level"="B1")};



//SCRIPT B1_Level.B1_Future;

//1.FutureContinuous
//EXAMPLE 1.AffirmativeWillAndShall
(WillShall  Be Doing) {-> CREATE(GrammarProfile, "subCategory"="FutureContinuous", "superCategory"="Future", "name"="AffirmativeWillAndShall", "level"="B1")};

//EXAMPLE 2.NegativeWithWill
(Lemma{FEATURE("value", "will")} Not Be Doing) {-> CREATE(GrammarProfile, "subCategory"="FutureContinuous", "superCategory"="Future", "name"="NegativeWithWill", "level"="B1")};

//2.FutureInThePast
//EXAMPLE 1.WasWereGoingTo
(Was Going ToDo) {-> CREATE(GrammarProfile, "subCategory"="FutureInThePast", "superCategory"="Future", "name"="WasWereGoingTo", "level"="B1")};

//EXAMPLE 2.FutureWould
(Would  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureInThePast", "superCategory"="Future", "name"="FutureWould", "level"="B1")};

//3.FutureWithWillAndShall
//EXAMPLE 1.FixedPlansWithWill
(Will  POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="FixedPlansWithWill", "level"="B1")};

//EXAMPLE 2.PredictionsWithWill
(Will POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="PredictionsWithWill", "level"="B1")};

//EXAMPLE 3.ImmediatePlansWithWill
(Shall POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="ImmediatePlansWithWill", "level"="B1")};



//4.FutureWithBeGoingTo
//EXAMPLE 1.NegativeBeGoingTo
(W{REGEXP("(?i)am|is|are")} Not Going ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="NegativeBeGoingTo", "level"="B1")};

//EXAMPLE 2.PastBeGoingTo
(Was Going ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="PastBeGoingTo", "level"="B1")};

//EXAMPLE 3.WithAdverbsBeGoingTo
(Is POS_ADV Going ToDo) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="WithAdverbsBeGoingTo", "level"="B1")};

//EXAMPLE 4.FutureInThePastBeGoingTo
(Was Going ToDo) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="FutureInThePastBeGoingTo", "level"="B1")};

//EXAMPLE 5.NegativeIntensionsBeGoingTo
(W{REGEXP("(?i)am|is|are")} Not Going ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="NegativeIntensionsBeGoingTo", "level"="B1")};

//EXAMPLE 6.PlansInThePastBeGoingTo
(Was Going ToDo) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="PlansInThePastBeGoingTo", "level"="B1")};

//EXAMPLE 7.PredictionsBeGoingTo
(Is  Going ToDo) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="PredictionsBeGoingTo", "level"="B1")};

//EXAMPLE 8.ReportingBeGoingTo
(Was Going ToDo) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="ReportingBeGoingTo", "level"="B1")};


//5.PresentContinuousForFutureUse
//EXAMPLE 1.FutureArrangements
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuousForFutureUse", "superCategory"="Future", "name"="FutureArrangements", "level"="B1")};

//EXAMPLE 2.QuestionsAboutTheFuture
(Is NC Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuousForFutureUse", "superCategory"="Future", "name"="QuestionsAboutTheFuture", "level"="B1")};

//EXAMPLE 3.FutureWithAsSoonAs
(W{REGEXP("(?i)as")} W{REGEXP("(?i)soon")} W{REGEXP("(?i)as")} NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuousForFutureUse", "superCategory"="Future", "name"="FutureWithAsSoonAs", "level"="B1")};


//SCRIPT B1_Level.B1_Passives;

//1.Passives: form
//EXAMPLE 1.WithByInARelativeClause
(RelativePronoun Be Done W{REGEXP("(?i)by")}) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="WithByInARelativeClause", "level"="B1")};

//EXAMPLE 2.InfinitivePassives
(ToBeDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="InfinitivePassives", "level"="B1")};

//EXAMPLE 3.PastSimpleAffirmativePassives
(W{REGEXP("(?i)was|were")} Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PastSimpleAffirmativePassives", "level"="B1")};

//EXAMPLE 4.PresentContiniousAffirmativePassives
(W{REGEXP("(?i)am|is|are")} BeingDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentContiniousAffirmativePassives", "level"="B1")};

//EXAMPLE 5.PresentSimpleAffirmativePassives
(W{REGEXP("(?i)am|is|are")}  Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentSimpleAffirmativePassives", "level"="B1")};

//EXAMPLE 6.PresentSimpleNegativePassives
(W{REGEXP("(?i)am|is|are")} Lemma{FEATURE("value", "not")}  Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentSimpleNegativePassives", "level"="B1")};

//EXAMPLE 7.WithVerbsTakingTwoObjectsPassives
(POS_PRON Be Done NC) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="WithVerbsTakingTwoObjectsPassives", "level"="B1")};

//EXAMPLE 8.GivingFocusWithByPassives
(Be Done W{REGEXP("(?i)by")}) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="GivingFocusWithByPassives", "level"="B1")};

//EXAMPLE 9.PresentContiniousFutureReferencePassives
(Be BeingDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentContiniousFutureReferencePassives", "level"="B1")};


//2.GetAndHave
//EXAMPLE 1.GetEd
(Lemma{FEATURE("value", "get")}  Done) {-> CREATE(GrammarProfile, "subCategory"="GetAndHave", "superCategory"="Passive", "name"="GetEd", "level"="B1")};



//SCRIPT B1_Level.B1_ReportedSpeech;

//1.ReportedSpeech
//EXAMPLE 1.ReportedStatementsPronounAndTenseShift
(Lemma{FEATURE("value", "say")}  W{REGEXP("(?i)that")} FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportedStatementsPronounAndTenseShift", "level"="B1")};
(Lemma{FEATURE("value", "tell")}  W{REGEXP("(?i)that")} FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportedStatementsPronounAndTenseShift", "level"="B1")};

//EXAMPLE 2.ReportedYesnoQuestions
//(Lemma{FEATURE("value", "ask")} PC? NC? (W{REGEXP("(?i)if")}|W{REGEXP("(?i)whether")}) FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportedYesnoQuestions", "level"="B1")};

//EXAMPLE 3.ReportedWHQuestions
(ReportingVerbs WHWordCluase) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportedWHQuestions", "level"="B1")};

//EXAMPLE 4.WonderReportedThought
(Lemma{FEATURE("value", "wonder")} WHWordCluase) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="WonderReportedThought", "level"="B1")};

//EXAMPLE 5.DirectSpeechReportingClauseInitialPosition (??????)
//(POS_VERB (PrepositionPhrase)? ReportingClause) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="DirectSpeechReportingClauseInitialPosition", "level"="B1")};

//EXAMPLE 6.DirectSpeechReportingClauseEndPosition
//( ReportingClause (COMMA)? POS_PRON POS_VERB (PrepositionPhrase)?) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="DirectSpeechReportingClauseEndPosition", "level"="B1")};

//EXAMPLE 7.ReportedRequestsAndCommands
(Lemma{FEATURE("value", "ask")} NC ToDo ) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportedRequestsAndCommands", "level"="B1")};
(Lemma{FEATURE("value", "tell")} NC ToDo ) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportedRequestsAndCommands", "level"="B1")};

//EXAMPLE 8.TemporalShiftsFuture(???)
//( (Past|(Had Done)) PC? NC?(W{REGEXP("(?i)that")})? ) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="TemporalShiftsFuture", "level"="B2")};


//SCRIPT B1_Level.B1_Clauses;

//1.ComparativesClause
//EXAMPLE 1.FiniteAfterThan
(Comparative W{REGEXP("(?i)than")}  FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="FiniteAfterThan", "level"="B1")};

//EXAMPLE 2.IngNonFiniteAfterThan
(Comparative W{REGEXP("(?i)than")}  Doing) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="IngNonFiniteAfterThan", "level"="B1")};

//EXAMPLE 3.AsAdjAdvAs
( Not?  W{REGEXP("(?i)as")}  POS_ADJ  W{REGEXP("(?i)as")} FiniteClause1 ) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="AsAdjAdvAs", "level"="B1")};
( Not?  W{REGEXP("(?i)as")}  POS_ADV  W{REGEXP("(?i)as")} FiniteClause1 ) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="AsAdjAdvAs", "level"="B1")};

//EXAMPLE 4.RatherThanPhrase
( W{REGEXP("(?i)rather")} W{REGEXP("(?i)than")}  NC ) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="RatherThanPhrase", "level"="B1")};
( W{REGEXP("(?i)rather")} W{REGEXP("(?i)than")}  PrepositionPhrase ) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="RatherThanPhrase", "level"="B1")};

//EXAMPLE 5.TheBestThat
(W{REGEXP("(?i)the")} W{REGEXP("(?i)best")} POS_NOUN W{REGEXP("(?i)that")} NC Has Done) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="TheBestThat", "level"="B1")}; 
(W{REGEXP("(?i)the")} W{REGEXP("(?i)best")} POS_NOUN NC Has Done) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="TheBestThat", "level"="B1")}; 

//EXAMPLE 6.TooToInfinitive
(W{REGEXP("(?i)too")} POS_ADJ ToDo) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="TooToInfinitive", "level"="B1")}; 

//EXAMPLE 7.TheSameNounAsPronounOrNoun
(W{REGEXP("(?i)the")} W{REGEXP("(?i)same")} POS_NOUN W{REGEXP("(?i)as")} NC) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="TheSameNounAsPronounOrNoun", "level"="B1")}; 
(W{REGEXP("(?i)the")} W{REGEXP("(?i)same")} POS_NOUN W{REGEXP("(?i)as")} POS_PRON) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="TheSameNounAsPronounOrNoun", "level"="B1")}; 

//EXAMPLE 8.SoAdjectiveThatClause
(W{REGEXP("(?i)so")} POS_ADJ W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SoAdjectiveThatClause", "level"="B1")}; 

//EXAMPLE 9.SenseVerbAsIfOrAsThoughFiniteClause1
(POS_VERB W{REGEXP("(?i)as")} W{REGEXP("(?i)if")} FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SenseVerbAsIfOrAsThoughFiniteClause1", "level"="B1")}; 
(POS_VERB W{REGEXP("(?i)as")} W{REGEXP("(?i)though")} FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SenseVerbAsIfOrAsThoughFiniteClause1", "level"="B1")}; 

//EXAMPLE 10.LinkingVerbLikeOrSimilarTo
(POS_VERB W{REGEXP("(?i)like")} NC) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="LinkingVerbLikeOrSimilarTo", "level"="B1")}; 
(POS_VERB W{REGEXP("(?i)similar")} W{REGEXP("(?i)to")} NC) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="LinkingVerbLikeOrSimilarTo", "level"="B1")}; 





//2.CoordinatedClause: (hard)
//EXAMPLE 1.MultipleMainClausesNarrative(hard!!!)
(Conjunction FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="MultipleMainClausesNarrative", "level"="B1")}; 

//EXAMPLE 2.EitherOr 
(W{REGEXP("(?i)either")} # W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="EitherOr", "level"="B1")}; 

//EXAMPLE 3.CombiningClausesOfTheSameType(hard!!!)
//((Conjunction FiniteClause1)|(Conjunction NonFiniteClause1)) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="CombiningClausesOfTheSameType", "level"="B1")}; 



//3.DeclarativeClause:
    //EXAMPLE 1.AuxiliaryDoForEmphasis
(Lemma{FEATURE("value", "do")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="AuxiliaryDoForEmphasis", "level"="B1")}; 

//EXAMPLE 2.Invitation
(POS{FEATURE("PosValue", "VB")} W{REGEXP("(?i)and")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="Invitation", "level"="B1")}; 

//EXAMPLE 3.LetMeFocus
(W{REGEXP("(?i)let")} W{REGEXP("(?i)me")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="LetMeFocus", "level"="B1")}; 

//EXAMPLE 4.WithInterrogativeSubject
(WHWord VC) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="WithInterrogativeSubject", "level"="B1")}; 

//EXMPLE 5.InterrogativeAdverb
(Have NC ADVC Done) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="InterrogativeAdverb", "level"="B1")}; 
(Do NC ADVC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="InterrogativeAdverb", "level"="B1")}; 

//EXMPLE 6.WhichWhose
(W{REGEXP("(?i)which")}) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="WhichWhose", "level"="B1")}; 
(W{REGEXP("(?i)whose")}) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="WhichWhose", "level"="B1")}; 

//EXMPLE 7.HowAdjective
(W{REGEXP("(?i)how")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="HowAdjective", "level"="B1")}; 

//EXMPLE 8.HowAdjectiveClause
//(W{REGEXP("(?i)how")} POS_ADJ (FiniteClause1|NonFiniteClause1)) {-> CREATE(GrammarProfile, "subCategory"="DeclarativeClause", "superCategory"="Clause", "name"="HowAdjectiveClause", "level"="B1")}; 



//4.RelativeClause:
    //EXMPLE 1.RelativeClauseObjectWithWhoOrThat
(NC COMMA W{REGEXP("(?i)who|that")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="RelativeClauseObjectWithWhoOrThat", "level"="B1")}; 
(NC W{REGEXP("(?i)who|that")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="RelativeClauseObjectWithWhoOrThat", "level"="B1")}; 

//EXMPLE 2.WithWhoseName
(NC COMMA W{REGEXP("(?i)whose")} W{REGEXP("(?i)name")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="WithWhoseName", "level"="B1")}; 
(NC W{REGEXP("(?i)whose")} W{REGEXP("(?i)name")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="WithWhoseName", "level"="B1")}; 

//EXMPLE 3.WithWherePlace
(NC COMMA W{REGEXP("(?i)where")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="WithWherePlace", "level"="B1")}; 
(NC W{REGEXP("(?i)whose")} W{REGEXP("(?i)name")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="WithWhoseName", "level"="B1")}; 

//EXMPLE 4.TheReasonWhyFocus
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)reason")} W{REGEXP("(?i)why")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="TheReasonWhyFocus", "level"="B1")}; 
(W{REGEXP("(?i)the")} W{REGEXP("(?i)reason")} W{REGEXP("(?i)why")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="TheReasonWhyFocus", "level"="B1")}; 

//EXMPLE 5.WhenFocus
(NC W{REGEXP("(?i)when")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="WhenFocus", "level"="B1")}; 

//EXMPLE 6.TheNounWhoThatFocus
DECLARE ThePerson, TheThing, TheOne;
(W{REGEXP("(?i)the")} W{REGEXP("(?i)person")}) {-> MARK(ThePerson)};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)thing")}) {-> CREATE(TheThing)};
(W{REGEXP("(?i)the")} (W{REGEXP("(?i)only")})? W{REGEXP("(?i)one")}) {-> MARK(TheOne)};

(ThePerson W{REGEXP("(?i)who|that")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="TheNounWhoThatFocus", "level"="B1")}; 
(TheThing W{REGEXP("(?i)who|that")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="TheNounWhoThatFocus", "level"="B1")}; 
(TheOne W{REGEXP("(?i)who|that")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="TheNounWhoThatFocus", "level"="B1")}; 






//5.SubordinatedClause
//EXMPLE 1.SubordinatedReason
(W{REGEXP("(?i)as|since")}  FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="SubordinatedReason", "level"="B1")}; 

//EXMPLE 2.SubordinatedPurposeResult
DECLARE SoThat, InOrderThat;
(W{REGEXP("(?i)so")} W{REGEXP("(?i)that")}) {-> MARK(SoThat)};
(W{REGEXP("(?i)so")}) {-> MARK(SoThat)};

(W{REGEXP("(?i)in")} W{REGEXP("(?i)order")} W{REGEXP("(?i)that")}) {-> CREATE(InOrderThat)};

(SoThat FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="SubordinatedPurposeResult", "level"="B1")}; 
(InOrderThat FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="SubordinatedPurposeResult", "level"="B1")}; 

//EXMPLE 3.SubordinatedContrast
DECLARE EvenThough, Although, Though, WhileIf;
(W{REGEXP("(?i)even")} W{REGEXP("(?i)though")} ) {-> CREATE(EvenThough)};
(W{REGEXP("(?i)although")}) {-> CREATE(Although)};
(W{REGEXP("(?i)though")}) {-> CREATE(Though)};
(W{REGEXP("(?i)while")} W{REGEXP("(?i)if")} ) {-> CREATE(WhileIf)};

(EvenThough  FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="SubordinatedContrast", "level"="B1")}; 
(Although  FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="SubordinatedContrast", "level"="B1")}; 
(Though  FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="SubordinatedContrast", "level"="B1")}; 
(WhileIf  FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="SubordinatedContrast", "level"="B1")}; 

//EXMPLE 4.SubordinatedNonFiniteWithIng
(W{REGEXP("(?i)before|after")}  Doing) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="SubordinatedNonFiniteWithIng", "level"="B1")}; 





//6.ConditionalClause
//EXMPLE 1.PresentSimpleIfClauseWill(FirstConditional)
(W{REGEXP("(?i)if")} NC ADVC Present) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseWill", "level"="B1")}; 
(NC ADVC Future) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseWill", "level"="B1")}; 
(W{REGEXP("(?i)if")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseWill", "level"="B1")}; 
(NC Future) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseWill", "level"="B1")}; 


//EXMPLE 2.PresentSimpleIfClauseModalFuturePossibleOutcome
(W{REGEXP("(?i)if")} NC ADVC Present) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseModalFuturePossibleOutcome", "level"="B1")}; 
(NC ADVC ModalVerb) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseModalFuturePossibleOutcome", "level"="B1")}; 
(W{REGEXP("(?i)if")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseModalFuturePossibleOutcome", "level"="B1")}; 
(NC ModalVerb) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentSimpleIfClauseModalFuturePossibleOutcome", "level"="B1")}; 


//EXMPLE 3.PresentContinuousIfClausePlansAdvice
(W{REGEXP("(?i)if")} NC ADVC Be Doing) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentContinuousIfClausePlansAdvice", "level"="B1")}; 
(W{REGEXP("(?i)if")} NC ADVC Be Going ToDo) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentContinuousIfClausePlansAdvice", "level"="B1")}; 
(NC ADVC ModalVerb) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentContinuousIfClausePlansAdvice", "level"="B1")}; 

(W{REGEXP("(?i)if")} NC  Be Doing) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentContinuousIfClausePlansAdvice", "level"="B1")}; 
(W{REGEXP("(?i)if")} NC  Be Going ToDo) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentContinuousIfClausePlansAdvice", "level"="B1")}; 
(NC  ModalVerb) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PresentContinuousIfClausePlansAdvice", "level"="B1")}; 


//EXMPLE 4.PastSimpleIfClauseWouldFuture(SecondConditional)
(W{REGEXP("(?i)if")} NC ADVC Past) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastSimpleIfClauseWouldFuture", "level"="B1")}; 
(NC ADVC Would) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastSimpleIfClauseWouldFuture", "level"="B1")}; 
(W{REGEXP("(?i)if")} NC  Past) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastSimpleIfClauseWouldFuture", "level"="B1")}; 
(NC  Would) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastSimpleIfClauseWouldFuture", "level"="B1")}; 

//EXMPLE 5.IfIWereYouWouldFuture
(W{REGEXP("(?i)if")} W{REGEXP("(?i)I")} W{REGEXP("(?i)were")} W{REGEXP("(?i)you")} COMMA NC ADVC Would) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfIWereYouWouldFuture", "level"="B1")}; 
(W{REGEXP("(?i)if")} W{REGEXP("(?i)I")} W{REGEXP("(?i)were")} W{REGEXP("(?i)you")} COMMA NC Would) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfIWereYouWouldFuture", "level"="B1")}; 
(W{REGEXP("(?i)if")} W{REGEXP("(?i)I")} W{REGEXP("(?i)were")} W{REGEXP("(?i)you")}  NC ADVC Would) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfIWereYouWouldFuture", "level"="B1")}; 
(W{REGEXP("(?i)if")} W{REGEXP("(?i)I")} W{REGEXP("(?i)were")} W{REGEXP("(?i)you")}  NC  Would) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfIWereYouWouldFuture", "level"="B1")}; 

//EXMPLE 6.UnlessExceptionsConditional
(W{REGEXP("(?i)unless")} NC ADVC Present) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="UnlessExceptionsConditional", "level"="B1")}; 
(W{REGEXP("(?i)unless")} NC  Present) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="UnlessExceptionsConditional", "level"="B1")}; 

//EXMPLE 7.PastSimpleIfClauseCouldFuture
(W{REGEXP("(?i)if")} NC ADVC Past) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastSimpleIfClauseCouldFuture", "level"="B1")}; 
(NC ADVC Could) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastSimpleIfClauseCouldFuture", "level"="B1")}; 
(W{REGEXP("(?i)if")} NC  Past) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastSimpleIfClauseCouldFuture", "level"="B1")}; 
(NC  Could) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastSimpleIfClauseCouldFuture", "level"="B1")}; 

//EXMPLE 8.PastPerfectIfWouldHaveDoneRegret(ThirdConditional)
(W{REGEXP("(?i)if")} NC ADVC Had Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastPerfectIfWouldHaveDoneRegret", "level"="B1")}; 
(NC ADVC Would Have Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastPerfectIfWouldHaveDoneRegret", "level"="B1")}; 
(W{REGEXP("(?i)if")} NC  Had Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastPerfectIfWouldHaveDoneRegret", "level"="B1")}; 
(NC Would Have Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="PastPerfectIfWouldHaveDoneRegret", "level"="B1")}; 

//EXMPLE 9.ElliptedIfNotAlternative
(W{REGEXP("(?i)if")} W{REGEXP("(?i)not")} COMMA) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="ElliptedIfNotAlternative", "level"="B1")}; 

//EXMPLE 10.ElliptedIfSoConfirming
(W{REGEXP("(?i)if")} W{REGEXP("(?i)so")} COMMA) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="ElliptedIfSoConfirming", "level"="B1")}; 










//B2****************************
//SCRIPT B2_Level.B2_Nouns;

//1.NounPhrases  
//EXAMPLE 1.NounOfPossessiveDeterminerNoun
(NC W{REGEXP("(?i)of")}  POS{FEATURE("PosValue", "PRP$")} POS_NOUN POS{FEATURE("PosValue", "POS")}) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounOfPossessiveDeterminerNoun", "level"="B2")};

//EXAMPLE 2.PossessionWithPluralNouns
(POS{FEATURE("PosValue", "NNS")} POS{FEATURE("PosValue", "POS")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="PossessionWithPluralNouns", "level"="B2")};

//EXAMPLE 3.PostmodifyingWithAdjectivePhrase
(POS_NOUN W{REGEXP("(?i)full")} W{REGEXP("(?i)of")}) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="PostmodifyingWithAdjectivePhrase", "level"="B2")};
(POS_NOUN COMMA W{REGEXP("(?i)beautifully")} W{REGEXP("(?i)set")}) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="PostmodifyingWithAdjectivePhrase", "level"="B2")};

//EXAMPLE 4.ComplexNounPhrasesWithAdjectivesCombinedWithBut
(POS_ADJ W{REGEXP("(?i)but")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithAdjectivesCombinedWithBut", "level"="B2")};


//2.TypesNoun
//EXAMPLE 1.FormIngFormsSubject
(Doing PrepositionPhrase? W{REGEXP("(?i)every")} W{REGEXP("(?i)evening")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="FormIngFormsSubject", "level"="B2")};
(Doing PrepositionPhrase? POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="FormIngFormsSubject", "level"="B2")};

//3.UncountableNoun
//EXAMPLE 1.NoArticleUncountableNouns
(UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="UncountableNoun", "superCategory"="Noun", "name"="NoArticleUncountableNouns", "level"="B2")};



//SCRIPT B2_Level.B2_Pronouns;

//1.PossessivePronoun
//EXAMPLE 1.OfOursPossessive
(NC W{REGEXP("(?i)of")} W{REGEXP("(?i)ours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OfOursPossessive", "level"="B2")};

//EXAMPLE 2.ComparativeClausesWithOursHers
(ComparativeClause W{REGEXP("(?i)ours|hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="ComparativeClausesWithOursHers", "level"="B2")};

//EXAMPLE 3.HersAsObject (???)
(VC Particle? POS_ADV PC POS_PRON W{REGEXP("(?i)hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HersAsObject", "level"="B2")};
(VC Particle? PC POS_PRON W{REGEXP("(?i)hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HersAsObject", "level"="B2")};
(VC Particle? POS_ADV PC POS_PRON W{REGEXP("(?i)hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HersAsObject", "level"="B2")};
(VC Particle? PC W{REGEXP("(?i)hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HersAsObject", "level"="B2")};
(VC Particle? POS_ADV POS_PRON W{REGEXP("(?i)hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HersAsObject", "level"="B2")};
(VC Particle?  POS_PRON W{REGEXP("(?i)hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HersAsObject", "level"="B2")};
(VC Particle? POS_ADV POS_PRON W{REGEXP("(?i)hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HersAsObject", "level"="B2")};
(VC Particle? W{REGEXP("(?i)hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HersAsObject", "level"="B2")};

//EXAMPLE 4.OursAsObject
(VC Particle? POS_ADV PC POS_PRON W{REGEXP("(?i)ours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsObject", "level"="B2")};
(VC Particle? POS_ADV PC  W{REGEXP("(?i)ours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsObject", "level"="B2")};
(VC Particle? PC POS_PRON W{REGEXP("(?i)ours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsObject", "level"="B2")};
(VC Particle? PC W{REGEXP("(?i)ours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsObject", "level"="B2")};
(VC Particle? POS_ADV  POS_PRON W{REGEXP("(?i)ours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsObject", "level"="B2")};
(VC Particle? POS_ADV   W{REGEXP("(?i)ours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsObject", "level"="B2")};
(VC Particle?  POS_PRON W{REGEXP("(?i)ours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsObject", "level"="B2")};
(VC Particle?  W{REGEXP("(?i)ours")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsObject", "level"="B2")};

//EXAMPLE 5.OursAsSubject (???)
(W{REGEXP("(?i)ours")} POS_ADV VC) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsSubject", "level"="B2")};
(W{REGEXP("(?i)ours")} VC) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsSubject", "level"="B2")};

//EXAMPLE 6.TheirsAsObject (???)
(VC Particle? POS_ADV PC POS_PRON W{REGEXP("(?i)theirs")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="TheirsAsObject", "level"="B2")};
(VC Particle? POS_ADV PC W{REGEXP("(?i)theirs")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="TheirsAsObject", "level"="B2")};
(VC Particle? PC POS_PRON W{REGEXP("(?i)theirs")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="TheirsAsObject", "level"="B2")};
(VC Particle? PC W{REGEXP("(?i)theirs")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="TheirsAsObject", "level"="B2")};
(VC Particle? POS_ADV  POS_PRON W{REGEXP("(?i)theirs")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="TheirsAsObject", "level"="B2")};
(VC Particle? POS_ADV  W{REGEXP("(?i)theirs")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="TheirsAsObject", "level"="B2")};
(VC Particle? POS_PRON W{REGEXP("(?i)theirs")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="TheirsAsObject", "level"="B2")};
(VC Particle? W{REGEXP("(?i)theirs")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="TheirsAsObject", "level"="B2")};

//2.ReflexivePronoun
//EXAMPLE 1.ByPluralReflexive
(W{REGEXP("(?i)by")} W{REGEXP("(?i)ourselves|yourselves|themselves")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="ByPluralReflexive", "level"="B2")};

//EXAMPLE 2.ByItself
(W{REGEXP("(?i)by")} W{REGEXP("(?i)itself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="ByItself", "level"="B2")};

//EXAMPLE 3.PluralAfterPrepositionsReflexive
(PC W{REGEXP("(?i)ourselves|yourselves|themselves")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="PluralAfterPrepositionsReflexive", "level"="B2")};

//EXAMPLE 4.SameSubjectAndObjectPluralReflexive (???)
(ReflexivePronoun) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="SameSubjectAndObjectPluralReflexive", "level"="B2")};

//EXAMPLE 5.InItselfIntensifying
(W{REGEXP("(?i)in")} W{REGEXP("(?i)itself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="InItselfIntensifying", "level"="B2")};

//EXAMPLE 6.ItselfForEmphasis
(W{REGEXP("(?i)itself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="ItselfForEmphasis", "level"="B2")};

//EXAMPLE 7.PluralForEmphasisReflexive
(W{REGEXP("(?i)ourselves|yourselves|themselves")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="PluralForEmphasisReflexive", "level"="B2")};

//EXAMPLE 8.YourselvesForPolitenessReflexive
(W{REGEXP("(?i)yourselves")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="YourselvesForPolitenessReflexive", "level"="B2")};

//3.SubjectObjectPronoun
//EXAMPLE 1.ObjUsingItToIntroduce
(Lemma{FEATURE("value", "make")} W{REGEXP("(?i)it")} POS_ADJ PrepositionPhrase ToDo) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="ObjUsingItToIntroduce", "level"="B2")};

//EXAMPLE 2.SubjectEllipsis
(ANY{-PARTOF(W)} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectEllipsis", "level"="B2")};

//EXAMPLE 3.SubjectEmptyIt
(W{REGEXP("(?i)it")} W{REGEXP("(?i)appears|feels|looks|seems")}) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectEmptyIt", "level"="B2")};

//EXAMPLE 4.SubjectOne
(W{REGEXP("(?i)one")} VC) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectOne", "level"="B2")};


//4.DemonstrativesPronoun
//EXAMPLE 1.TheseOnesThoseOnesSubstitutionDemonstratives
(W{REGEXP("(?i)these")} W{REGEXP("(?i)ones")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="TheseOnesThoseOnesSubstitutionDemonstratives", "level"="B2")};
(W{REGEXP("(?i)those")} W{REGEXP("(?i)ones")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="TheseOnesThoseOnesSubstitutionDemonstratives", "level"="B2")};

//EXAMPLE 2.ThoseSubstitutionDemonstratives
(W{REGEXP("(?i)those")} RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThoseSubstitutionDemonstratives", "level"="B2")};
(W{REGEXP("(?i)those")} Done) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThoseSubstitutionDemonstratives", "level"="B2")};
(W{REGEXP("(?i)those")} Doing) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThoseSubstitutionDemonstratives", "level"="B2")};



//5.QuantityPronoun
//EXAMPLE 1.SubjectAndObjectPronounsEachSeveralNeitherEnoughEither
(W{REGEXP("(?i)each|several|neither|enough|either")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="SubjectAndObjectPronounsEachSeveralNeitherEnoughEither", "level"="B2")};

//EXAMPLE 2.WithOfObjectPronoun
(W{REGEXP("(?i)neither|either|none|of")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="WithOfObjectPronoun", "level"="B2")};


//6.SubstitutionPronoun, one, ones, none
//EXAMPLE 1.TheseOnesThoseOnesSubstitutionOneOnesNone
(W{REGEXP("(?i)these")} W{REGEXP("(?i)ones")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="TheseOnesThoseOnesSubstitutionOneOnesNone", "level"="B2")};
(W{REGEXP("(?i)those")} W{REGEXP("(?i)ones")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="TheseOnesThoseOnesSubstitutionOneOnesNone", "level"="B2")};


//7.IndefinitePronoun - thing, -one, -body etc
//EXAMPLE 1.SubjectIndefinite
(IndefinitePronoun VC) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="SubjectIndefinite", "level"="B2")};

//EXAMPLE 2.WithRelativeClausesFocusIndefinite
(IndefinitePronoun POS_ADV POS_ADJ PrepositionPhrase? Be? COMMA RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithRelativeClausesFocusIndefinite", "level"="B2")};
(IndefinitePronoun POS_ADV PrepositionPhrase? Be? COMMA RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithRelativeClausesFocusIndefinite", "level"="B2")};
(IndefinitePronoun POS_ADJ PrepositionPhrase? Be? COMMA RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithRelativeClausesFocusIndefinite", "level"="B2")};
(IndefinitePronoun PrepositionPhrase? Be? COMMA RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithRelativeClausesFocusIndefinite", "level"="B2")};
(IndefinitePronoun POS_ADV POS_ADJ PrepositionPhrase? Be?  RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithRelativeClausesFocusIndefinite", "level"="B2")};
(IndefinitePronoun POS_ADV PrepositionPhrase? Be? RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithRelativeClausesFocusIndefinite", "level"="B2")};
(IndefinitePronoun POS_ADJ PrepositionPhrase? Be? RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithRelativeClausesFocusIndefinite", "level"="B2")};
(IndefinitePronoun PrepositionPhrase? Be? RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="WithRelativeClausesFocusIndefinite", "level"="B2")};

//EXAMPLE 3.VagueExpressionsIndefinite
(IndefinitePronoun) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="VagueExpressionsIndefinite", "level"="B2")};


//8.GenericUsePronoun
//EXAMPLE 1.WeUsGeneral
(W{REGEXP("(?i)we|us")}) {-> CREATE(GrammarProfile, "subCategory"="GenericUsePronoun", "superCategory"="Pronoun", "name"="WeUsGeneral", "level"="B2")};

//EXAMPLE 2.GenderNeutralTheyThem
(W{REGEXP("(?i)they|them")}) {-> CREATE(GrammarProfile, "subCategory"="GenericUsePronoun", "superCategory"="Pronoun", "name"="GenderNeutralTheyThem", "level"="B2")};


//EXAMPLE 3.GenderNeutral
(W{REGEXP("(?i)he|she|they")}) {-> CREATE(GrammarProfile, "subCategory"="GenericUsePronoun", "superCategory"="Pronoun", "name"="GenderNeutral", "level"="B2")};

//9.ReciprocalPronoun
//EXAMPLE 1.OneAnotherFormalReciprocal
(W{REGEXP("(?i)one")} W{REGEXP("(?i)another")}) {-> CREATE(GrammarProfile, "subCategory"="ReciprocalPronoun", "superCategory"="Pronoun", "name"="OneAnotherFormalReciprocal", "level"="B2")};



//SCRIPT B2_Level.B2_Adjectives;

//1.CombiningAdjective:
    //EXAMPLE 1.AdjetivePhrasesModifyingNouns
(AdjectivePhrase POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="AdjetivePhrasesModifyingNouns", "level"="B2")} ; 

//2.ComparativesAdjective:
    //EXAMPLE 1.WithALotComparatives
(Be W{REGEXP("(?i)a")} W{REGEXP("(?i)lot")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithALotComparatives", "level"="B2")} ; 

//EXAMPLE 2.WithMuchNounComparatives
(W{REGEXP("(?i)much")} Comparative POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithMuchNounComparatives", "level"="B2")} ; 

//3.ModifyingAdjective:
    //EXAMPLE 1.WithEnoughToInfinitiveModifying
(POS_ADJ W{REGEXP("(?i)enough")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithEnoughModifying", "level"="B2")}; 

//EXAMPLE 2.WithRatherAModifying
(W{REGEXP("(?i)rather")} W{REGEXP("(?i)a")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithRatherAModifying", "level"="B2")};

//4.PositionAdjective:
    //EXAMPLE 1.DegreeAdjectivesBeforeNouns
(DegreeAdj POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="DegreeAdjectivesBeforeNouns", "level"="B2")}; 

//EXAMPLE 2.AttributiveOnlyTimeAdjectives
(TimeAdj POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="AttributiveOnlyTimeAdjectives", "level"="B2")};

//5.SuperlativesAdjective:
    DECLARE OneOf;
(W{REGEXP("(?i)one")} W{REGEXP("(?i)of")}) {-> MARK(OneOf)};

//EXAMPLE 1.WithByFarSuperlatives
(W{REGEXP("(?i)by")} W{REGEXP("(?i)far")} Superlative) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithByFarSuperlatives", "level"="B2")}; 

//EXAMPLE 2.EllipsisWithTheSuperlative
(OneOf Superlative) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="EllipsisWithTheSuperlative", "level"="B2")}; 
(Superlative) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="EllipsisWithTheSuperlative", "level"="B2")}; 

//EXAMPLE 4.WithNounAndToInfinitiveSuperlatives
(Superlative POS_NOUN ToDo) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithNounAndToInfinitiveSuperlatives", "level"="B2")}; 



//SCRIPT B2_Level.B2_Adverbs;

//1.AdverbsAsModifiers
//EXAMPLE 1.TimeAdverbsAsModifiers
(TimeAdv) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="TimeAdverbAsModifiers", "level"="B2")};

//EXAMPLE 2.MannerAdverbsAsModifiers
(Manner) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="MannerAdverbAsModifiers", "level"="B2")};

//2.AdverbsAndAdverbPhrases: types and meanings
//EXAMPLE 1.DegreeModifyingNounPhrases
(Degree AdjectiveNoun) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeModifyingNounPhrases", "level"="B2")}; 

//EXAMPLE 2.DegreeModifyingPronouns
(Degree IndefinitePronoun) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeModifyingPronouns", "level"="B2")}; 

//EXAMPLE 3.DegreeModifyingDeterminers
(Degree Determiner) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeModifyingDeterminers", "level"="B2")}; 

//3.PositionAdverb
//EXAMPLE 1.FrontPositionInversionWithNever
(W{REGEXP("(?i)never")} Have NC Done) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="FrontPositionInversionWithNever", "level"="B2")}; 

//4.AdverbPhrases - form
//EXAMPLE 1.ComparativeAdverbPhrases
(ComparativeAdv) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="ComparativeAdverbPhrases", "level"="B2")}; 



//SCRIPT B2_Level.B2_Determiners;

//1.ArticlesDeterminer
//EXAMPLE 1.TheMoreTheMoreArticles
(W{REGEXP("(?i)the")} W{REGEXP("(?i)more|better|less|worse")}) {-> CREATE(GrammarProfile, "subCategory"="ArticlesDeterminer", "superCategory"="Determiner", "name"="TheMoreTheMoreArticles", "level"="B2")};

//2.PossessivesDeterminer
//EXAMPLE 1.ItsPossessives
(W{REGEXP("(?i)its")} AdjectiveNoun)  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="ItsPossessives", "level"="B2")};

//EXAMPLE 2.GenericTheir
(W{REGEXP("(?i)their")} AdjectiveNoun) {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="GenericTheir", "level"="B2")};

//EXAMPLE 3.PluralNounS
(POS{FEATURE("PosValue", "NNS")} POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="PluralNounS", "level"="B2")};

//EXAMPLE 4.OfNounPhraseS
(W{REGEXP("(?i)of")} NC POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="OfNounPhraseS", "level"="B2")};

//3.QuantityDeterminer
//EXAMPLE 1.LittleFewQuantityDeterminers
(POS_ADV W{REGEXP("(?i)little|few")} AdjectiveNoun)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="LittleFewQuantityDeterminers", "level"="B2")};







//SCRIPT B2_Level.B2_Prepositions;

//1.Prepositions
//EXAMPLE 1.ComplexPrepositions
(ComplexPreposition) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="ComplexPrepositions", "level"="B2")};

//EXAMPLE 2.PrepositionWHWordPrepositions
(POS_ADP RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="PrepositionWHWordPrepositions", "level"="B2")};

//EXAMPLE 3.FormalSimplePrepositions
(SimplePreposition) {-> CREATE(GrammarProfile, "subCategory"="Prepositions", "superCategory"="Preposition", "name"="FormalSimplePrepositions", "level"="B2")};



//SCRIPT B2_Level.B2_Conjunctions;

//1.CoordinatingConjunction
//EXAMPLE 1.NeitherNorCoordinating (problem!!!)
//(W{REGEXP("(?i)neither")} _ W{REGEXP("(?i)nor")} _) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="NeitherNorCoordinating", "level"="B2")};

//EXAMPLE 2.BothAndWithPhrasesAndClauses (problem!!!)
//(W{REGEXP("(?i)both")} _ W{REGEXP("(?i)and")} _) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="BothAndWithPhrasesAndClauses", "level"="B2")};

//2.SubordinatingConjunction
//EXAMPLE 1.SimpleSubordinatingConjunction
(SimpleSubordinatingConjunction) {-> CREATE(GrammarProfile, "subCategory"="SubordinatingConjunction", "superCategory"="Conjunction", "name"="SimpleSubordinatingConjunction", "level"="B2")};

//EXAMPLE 2.ComplexSubordinatingConjunction
(ComplexSubordinatingConjunction) {-> CREATE(GrammarProfile, "subCategory"="SubordinatingConjunction", "superCategory"="Conjunction", "name"="ComplexSubordinatingConjunction", "level"="B2")};



//SCRIPT B2_Level.B2_DiscourseMarkers;

//1.DiscourseMarkersInWriting
//EXAMPLE 1.ComparingDiscourseMarkers    
(Comparing) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="ComparingDiscourseMarkers", "level"="B2")};

//EXAMPLE 2.OrganisingOpeningsAndClosingFormalDiscourseMarkers    
(Organising) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="OrganisingOpeningsAndClosingFormalDiscourseMarkers", "level"="B2")};

//EXAMPLE 3.SummarisingFormalDiscourseMarkers    
(Summarising) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="SummarisingFormalDiscourseMarkers", "level"="B2")};



//SCRIPT B2_Level.B2_Focus;

//1.Focus
//EXAMPLE 1.TheReasonThatThePlaceWhichClauseSubject
(W{REGEXP("(?i)the")} W{REGEXP("(?i)reason")} W{REGEXP("(?i)that")} FiniteClause1 Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="TheReasonThatThePlaceWhichClauseSubject", "level"="B2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)reason")} FiniteClause1 Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="TheReasonThatThePlaceWhichClauseSubject", "level"="B2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)place")} W{REGEXP("(?i)which")} FiniteClause1 Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="TheReasonThatThePlaceWhichClauseSubject", "level"="B2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)place")} FiniteClause1 Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="TheReasonThatThePlaceWhichClauseSubject", "level"="B2")};

(W{REGEXP("(?i)the")} W{REGEXP("(?i)reason")} W{REGEXP("(?i)that")} FiniteClause2 Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="TheReasonThatThePlaceWhichClauseSubject", "level"="B2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)reason")} FiniteClause2 Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="TheReasonThatThePlaceWhichClauseSubject", "level"="B2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)place")} W{REGEXP("(?i)which")} FiniteClause2 Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="TheReasonThatThePlaceWhichClauseSubject", "level"="B2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)place")} FiniteClause2 Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="TheReasonThatThePlaceWhichClauseSubject", "level"="B2")};

//EXAMPLE 2.TheThingFactPointProblemIsThat
(W{REGEXP("(?i)the")} W{REGEXP("(?i)thing|fact|point|problem")} Be W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="TheThingFactPointProblemIsThat", "level"="B2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)thing|fact|point|problem")} Be  ) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="TheThingFactPointProblemIsThat", "level"="B2")};



//SCRIPT B2_Level.B2_Negation;

//1.Negation
//EXAMPLE 1.NotEmphasis
(Not) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotEmphasis", "level"="B2")};

//EXAMPLE 2.NeverInvertedFrontPositionFocus
(W{REGEXP("(?i)never")} Have W{REGEXP("(?i)I")} Done) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NeverInvertedFrontPositionFocus", "level"="B2")};
(W{REGEXP("(?i)never")} Have Done) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NeverInvertedFrontPositionFocus", "level"="B2")};

//EXAMPLE 3.NeitherNor
(W{REGEXP("(?i)neither")} # W{REGEXP("(?i)nor")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NeitherNor", "level"="B2")};

//EXAMPLE 4.NeitherOfNoneOfPronoun
(W{REGEXP("(?i)neither")} W{REGEXP("(?i)of")} NC POS_VERB){-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NeitherOfNoneOfPronoun", "level"="B2")};
(W{REGEXP("(?i)none")} W{REGEXP("(?i)of")} NC POS_VERB){-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NeitherOfNoneOfPronoun", "level"="B2")};

//SCRIPT B2_Level.B2_Questions;


//1.TagsQuestion
//EXAMPLE 1.TagsWithImperativesAsSofteners
(COMMA WillShall POS_PRON QUESTION) {-> CREATE(GrammarProfile, "subCategory"="TagsQuestion", "superCategory"="Question", "name"="TagsWithImperativesAsSofteners", "level"="B2")};

//2.WhQuestion
//EXAMPLE 1.NegativeQuestionsWithMainVerbs
(WHWord Dont NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="NegativeQuestionsWithMainVerbs", "level"="B2")};
(WHWord Havent NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="NegativeQuestionsWithMainVerbs", "level"="B2")};


//SCRIPT B2_Level.B2_Verbs;

//1.PhrasalPrepositionalVerb
//EXAMPLE 1.VerbParticlePrepositionObject
(VC Particle PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="PhrasalPrepositionalVerb", "superCategory"="Verb", "name"="VerbParticlePrepositionObject", "level"="B2")};

//2.PrepositionalVerb
//EXAMPLE 1.PrepositionalVerbStrandedPreposition
(VC POS_ADP PERIOD) {-> CREATE(GrammarProfile, "subCategory"="PrepositionalVerb", "superCategory"="Verb", "name"="PrepositionalVerbStrandedPreposition", "level"="B2")};

//EXAMPLE 2.VerbAdverbPreposition
(VC POS_ADV POS_ADP) {-> CREATE(GrammarProfile, "subCategory"="PrepositionalVerb", "superCategory"="Verb", "name"="VerbAdverbPreposition", "level"="B2")};

//3.PhrasalVerb
//EXAMPLE 1.NoObjectPhrasalVerbs (???)
(VC W{-PARTOF(NC)}) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="NoObjectPhrasalVerbs", "level"="B2")};

//EXAMPLE 2.VerbParticleObjectPhrasalVerbs
(POS_VERB Particle POS_ADV POS_ADP NC) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="VerbParticleObjectPhrasalVerbs", "level"="B2")};
(POS_VERB Particle POS_ADP NC) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="VerbParticleObjectPhrasalVerbs", "level"="B2")};
(POS_VERB Particle POS_ADV NC) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="VerbParticleObjectPhrasalVerbs", "level"="B2")};
(POS_VERB Particle NC) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="VerbParticleObjectPhrasalVerbs", "level"="B2")};

//EXAMPLE 3.VerbNounParticlePhrasal(???)
(POS_VERB NC Particle) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="VerbNounParticlePhrasal", "level"="B2")};

//4.TypesVerb
//EXAMPLE 1.SemiModalAuxiliaryVerbsDareNeed
(Lemma{FEATURE("value", "dare")} Not? POS_VERB ){-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="SemiModalAuxiliaryVerbsDareNeed", "level"="B2")};
(Lemma{FEATURE("value", "need")} Not? POS_VERB ){-> CREATE(GrammarProfile, "subCategory"="TypesVerb", "superCategory"="Verb", "name"="SemiModalAuxiliaryVerbsDareNeed", "level"="B2")};

//5.PatternsWithToAndIng
//EXAMPLE 1.VerbIngForm
(POS_VERB Doing) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbIngForm", "level"="B2")};

//EXAMPLE 2.VerbNewSubjectIngForm
(POS_VERB NC Doing) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbNewSubjectIngForm", "level"="B2")};

//EXAMPLE 3.ToInfinitiveOrIngFormMeaning
(POS_VERB ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="ToInfinitiveOrIngFormMeaning", "level"="B2")};
(POS_VERB Doing) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="ToInfinitiveOrIngFormMeaning", "level"="B2")};

//EXAMPLE 4.VerbsOfSensesObjectIng
(POS_VERB NC Doing) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbsOfSensesObjectIng", "level"="B2")};

//6.ThereIsAre
//EXAMPLE 1.ThereVerbsWithModalMeaning
(W{REGEXP("(?i)there")} POS_VERB W{REGEXP("(?i)to")} W{REGEXP("(?i)be")}) {-> CREATE(GrammarProfile, "subCategory"="ThereIsAre", "superCategory"="Verb", "name"="ThereVerbsWithModalMeaning", "level"="B2")};

//7.LinkingVerb
//EXAMPLE 1.LinkingComplementVerbs
(VC POS_ADV ADJC PrepositionPhrase?) {-> CREATE(GrammarProfile, "subCategory"="LinkingVerb", "superCategory"="Verb", "name"="LinkingComplementVerbs", "level"="B2")};
(VC ADJC PrepositionPhrase?) {-> CREATE(GrammarProfile, "subCategory"="LinkingVerb", "superCategory"="Verb", "name"="LinkingComplementVerbs", "level"="B2")};



//SCRIPT B2_Level.B2_Modality;

//1.AdjectivesModality
//EXAMPLE 1.ItLinkingVerbAdjectivesClause
(W{REGEXP("(?i)it")} VC ADJC PrepositionPhrase? W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="ItLinkingVerbAdjectivesClause", "level"="B2")};

//EXAMPLE 2.ItLinkingVerbAdjectivesClauseHedging
(W{REGEXP("(?i)it")} VC ADJC PrepositionPhrase? W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="ItLinkingVerbAdjectivesClauseHedging", "level"="B2")};

//EXAMPLE 3.SubjectBeAdjectiveToInfinitive
(NC Be ADJC ToDo) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="SubjectBeAdjectiveToInfinitive", "level"="B2")};

//EXAMPLE 4.ItLinkingVerbAdjectivesClauseFocus
(W{REGEXP("(?i)it")} VC ADJC PrepositionPhrase? W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="ItLinkingVerbAdjectivesClauseFocus", "level"="B2")};

//2.Can
//EXAMPLE 1.WithAdverbsCan
(Lemma{FEATURE("value", "can")} POS_ADV) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="WithAdverbsCan", "level"="B2")};

//EXAMPLE 2.GeneralTruthsAndTendenciesCan
(Lemma{FEATURE("value", "can")}) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="GeneralTruthsAndTendenciesCan", "level"="B2")};

//EXAMPLE 3.GuessesAndPredictionsCan
(Lemma{FEATURE("value", "can")} Not) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="GuessesAndPredictionsCan", "level"="B2")};

//EXAMPLE 4.ReproachesAndAppealsCan
(Lemma{FEATURE("value", "can")} Not) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="ReproachesAndAppealsCan", "level"="B2")};

//3.Dare
//EXAMPLE 1.AffirmativeDare
(Lemma{FEATURE("value", "dare")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="AffirmativeDare", "level"="B2")};

//EXAMPLE 2.NegativeDare
(Lemma{FEATURE("value", "dare")} Not POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="NegativeDare", "level"="B2")};

//EXAMPLE 3.BravadoDare
(Lemma{FEATURE("value", "dare")} Not? POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="BravadoDare", "level"="B2")};

    
//4.ExpressionsWithBe
//EXAMPLE 1.BeExpressionInfinitive
(Be W ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeExpressionInfinitive", "level"="B2")};

//EXAMPLE 2.BeAdjectiveThat
(Be ADJC W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAdjectiveThat", "level"="B2")};

//EXAMPLE 3.BeMoreLessLikelyComparison
(Be W{REGEXP("(?i)more|less|likely")}) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeMoreLessLikelyComparison", "level"="B2")};

//EXAMPLE 4.BeLikelyToProbability
(Be POS_ADV W{REGEXP("(?i)likely")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeLikelyToProbability", "level"="B2")};

//EXAMPLE 5.BeDueToBeToSchedulesModality
(Be W{REGEXP("(?i)due")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeDueToBeToSchedulesModality", "level"="B2")};
(Be ToDo ) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeDueToBeToSchedulesModality", "level"="B2")};

//EXAMPLE 6.BeMeantToIdealStates
(Be W{REGEXP("(?i)meant")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeMeantToIdealStates", "level"="B2")};

//EXAMPLE 7.BeSupposedToObligationExpectation
(Be W{REGEXP("(?i)supposed")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeSupposedToObligationExpectation", "level"="B2")};

//EXAMPLE 8.BeSupposedToHearsay
(Be W{REGEXP("(?i)supposed")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeSupposedToHearsay", "level"="B2")};

//EXAMPLE 9.BeBoundToCertainty
(Be POS_ADV W{REGEXP("(?i)bound")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeBoundToCertainty", "level"="B2")};
(Be W{REGEXP("(?i)bound")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeBoundToCertainty", "level"="B2")};

//EXAMPLE 10.ImperativeBeSureTo
(Be W{REGEXP("(?i)sure")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="ImperativeBeSureTo", "level"="B2")};

//EXAMPLE 11.BeSureCertainTo
(Be W{REGEXP("(?i)sure|certain")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeSureCertainTo", "level"="B2")};

//EXAMPLE 12.BeObligatdToObligation
(Be W{REGEXP("(?i)obliged")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeObligatdToObligation", "level"="B2")};

//EXAMPLE 13.BeForcedToObligation
(Be W{REGEXP("(?i)forced")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeForcedToObligation", "level"="B2")};

//5.HaveGotTo
//EXAMPLE 1.YouHaveGotToSuggestion
(W{REGEXP("(?i)you")} Have W{REGEXP("(?i)got")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="YouHaveGotToSuggestion", "level"="B2")};
(W{REGEXP("(?i)you")} Have ToDo) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="YouHaveGotToSuggestion", "level"="B2")};


//6.May
//EXAMPLE 1.PastAffirmativeMay
(May Have Done) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="PastAffirmativeMay", "level"="B2")};
 
//EXAMPLE 2.WithAdverbsMay
(May POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="WithAdverbsMay", "level"="B2")};
 
//EXAMPLE 3.MayICommand
(May W{REGEXP("(?i)I")}) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="MayICommand", "level"="B2")};

//EXAMPLE 4.AsYouMayFocusing
(W{REGEXP("(?i)as")} W{REGEXP("(?i)you")} May W{REGEXP("(?i)know")}) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="AsYouMayFocusing", "level"="B2")};
(W{REGEXP("(?i)as")} W{REGEXP("(?i)you")} May Have Done) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="AsYouMayFocusing", "level"="B2")};

//EXAMPLE 5.MayButOpinion
(May POS_VERB # W{REGEXP("(?i)but")}) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="MayButOpinion", "level"="B2")};

//EXAMPLE 6.MayIPoliteRequest
(May W{REGEXP("(?i)I")}) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="MayIPoliteRequest", "level"="B2")};
    
//7.Must
//EXAMPLE 1.PastAffirmativeMust
(Lemma{FEATURE("value", "must")} Have Done) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="PastAffirmativeMust", "level"="B2")};

//EXAMPLE 2.QuestionsMust
(Must NC VC) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="QuestionsMust", "level"="B2")};

//EXAMPLE 3.WithAdverbsMust
(Must POS_ADV POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="WithAdverbsMust", "level"="B2")};
 
//EXAMPLE 4.ConcessionsMust
 (W{REGEXP("(?i)I|you")} Must W{REGEXP("(?i)admit")})  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="ConcessionsMust", "level"="B2")};
 
//EXAMPLE 5.DeductionsAndClusionsMust
 ( Must Have Done )  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="DeductionsAndClusionsMust", "level"="B2")};

//EXAMPLE 6.EmphasisMust
 (W{REGEXP("(?i)I")} Must W{REGEXP("(?i)say")})  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="EmphasisMust", "level"="B2")};

//EXAMPLE 7.ObligationAndNecessityMust
(Must)  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="ObligationAndNecessityMust", "level"="B2")};
 
//EXAMPLE 8.RulesMust
(Lemma{FEATURE("value", "must")} Not)  {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="RulesMust", "level"="B2")};
 

//8.Need
//EXAMPLE 1.NegativeNeed
(Lemma{FEATURE("value", "need")} Not)  {-> CREATE(GrammarProfile, "subCategory"="Need", "superCategory"="Modality", "name"="NegativeNeed", "level"="B2")};
 
//EXAMPLE 2.ObligationAndNecessity
(Lemma{FEATURE("value", "need")} Not)  {-> CREATE(GrammarProfile, "subCategory"="Need", "superCategory"="Modality", "name"="ObligationAndNecessity", "level"="B2")};
  

//9.Ought
//EXAMPLE 1.EllipsisOught
(Ought W{REGEXP("(?i)to")} PERIOD)  {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="EllipsisOught", "level"="B2")};

//EXAMPLE 2.DesiredStatesOught
(Ought ToDo)  {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="DesiredStatesOught", "level"="B2")};


//10.Should
//EXAMPLE 1.EllipsisShould
(Should PERIOD)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="EllipsisShould", "level"="B2")};

//EXAMPLE 2.ShouldBeDoing
(Should Be Doing)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="ShouldBeDoing", "level"="B2")};

//EXAMPLE 3.ShouldBeDoingExpectation
(Should Be Doing)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="ShouldBeDoingExpectation", "level"="B2")};

//EXAMPLE 4.ShouldBeDoingObligation
(Should Be Doing)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="ShouldBeDoingObligation", "level"="B2")};

//11.UsedTo    
//EXAMPLE 1.EllipsisUsedTo
(Used W{REGEXP("(?i)to")} PERIOD)  {-> CREATE(GrammarProfile, "subCategory"="UsedTo", "superCategory"="Modality", "name"="EllipsisUsedTo", "level"="B2")};

//12.Will
//EXAMPLE 1.WillYouRequests
(Will W{REGEXP("(?i)you")} W{REGEXP("(?i)please")} POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="WillYouRequests", "level"="B2")};
(Will W{REGEXP("(?i)you")} POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="WillYouRequests", "level"="B2")};

//13.Would
//EXAMPLE 1.HabitualPastWould
(Would POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="HabitualPastWould", "level"="B2")};

//14.Could
//EXAMPLE 1.PastCould
(Could Have Done) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="PastCould", "level"="B2")};

//EXAMPLE 2.PastPossibilityCould
(Lemma{FEATURE("value", "could")} Have Done) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="PastPossibilityCould", "level"="B2")};

//EXAMPLE 3.PastSpeculationCould
(Could Have Done) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="PastSpeculationCould", "level"="B2")};

//EXAMPLE 4.RegretCould
(Could Have Done) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="RegretCould", "level"="B2")};

//EXAMPLE 5.ReportedSpeechCould
(Could POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="ReportedSpeechCould", "level"="B2")};



//SCRIPT B2_Level.B2_Present;

//1.PresentContinuous
//EXAMPLE 1.WithAdverbsOfIndefiniteFrequencyPresentContinuous
(Is IndefiniteFrequency Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="WithAdverbsOfIndefiniteFrequencyPresentContinuous", "level"="B2")};

//2.PresentSimple
//EXAMPLE 1.InversionWithNotOnlyButAlsoPresentSimple
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} Does POS_PRON POS_VERB # W{REGEXP("(?i)but")} POS_PRON POS_VERB W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="InversionWithNotOnlyButAlsoPresentSimple", "level"="B2")};
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} Does POS_PRON POS_VERB # W{REGEXP("(?i)but")}  W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="InversionWithNotOnlyButAlsoPresentSimple", "level"="B2")};

//EXAMPLE 2.SpeechActVerbsPresentSimple
(W{REGEXP("(?i)disagree|disagrees")} Not?) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SpeechActVerbsPresentSimple", "level"="B2")};
(W{REGEXP("(?i)agree|agrees")} Not?) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SpeechActVerbsPresentSimple", "level"="B2")};
(W{REGEXP("(?i)accept|accepts")} Not?) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SpeechActVerbsPresentSimple", "level"="B2")};
(W{REGEXP("(?i)advise|advises")} Not?) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="SpeechActVerbsPresentSimple", "level"="B2")};

//EXAMPLE 3.StoriesAndCommentariesPresentSimple
(Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="StoriesAndCommentariesPresentSimple", "level"="B2")};


//SCRIPT B2_Level.B2_Past;

//1.PastContinuous
//EXAMPLE 1.WithAdverbsPastContinuous
(Was POS_ADV Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="WithAdverbsPastContinuous", "level"="B2")};

//EXAMPLE 2.PolitenessPastContinuous
(Was Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="PolitenessPastContinuous", "level"="B2")};

//2.PastPerfectContinuous
//EXAMPLE 1.BackgroundInformationWithRelativeClausePastPerfectContinuous
(RelativePronoun NC Had BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="BackgroundInformationWithRelativeClausePastPerfectContinuous", "level"="B2")};
(RelativePronoun Had BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="BackgroundInformationWithRelativeClausePastPerfectContinuous", "level"="B2")};

//EXAMPLE 2.BackgroundInformationWithTimeConjunctionPastPerfectContinuous
(W{REGEXP("(?i)after")} NC Had BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="BackgroundInformationWithTimeConjunctionPastPerfectContinuous", "level"="B2")};
(W{REGEXP("(?i)after")} Had BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="BackgroundInformationWithTimeConjunctionPastPerfectContinuous", "level"="B2")};

//EXAMPLE 3.NegativePastPerfectContinuous
(Hadnt BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="NegativePastPerfectContinuous", "level"="B2")};

//EXAMPLE 4.WithAdverbsPastPerfectContinuous
(Had POS_ADV BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="WithAdverbsPastPerfectContinuous", "level"="B2")};

//EXAMPLE 5.ResultsPastPerfectContinuous
(Had BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="ResultsPastPerfectContinuous", "level"="B2")};


//3.PastPerfectSimple
//EXAMPLE 1.AfterBecauseExplanationsPastPerfectSimple
(W{REGEXP("(?i)because")} NC Had Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="AfterBecauseExplanationsPastPerfectSimple", "level"="B2")};

//EXAMPLE 2.AfterIfOnlyAndWishImaginedPast
(W{REGEXP("(?i)if")} W{REGEXP("(?i)only")} NC W{REGEXP("(?i)had")} Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="AfterIfOnlyAndWishImaginedPast", "level"="B2")};
(W{REGEXP("(?i)wish")} NC Had Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="AfterIfOnlyAndWishImaginedPast", "level"="B2")};

//EXAMPLE 3.InversionWithNeverBeforePastPerfectSimple
(W{REGEXP("(?i)never")} W{REGEXP("(?i)before")} Had NC Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionWithNeverBeforePastPerfectSimple", "level"="B2")};
(W{REGEXP("(?i)never")} Had NC Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionWithNeverBeforePastPerfectSimple", "level"="B2")};

//EXAMPLE 4.InversionWithNoSoonerThanPastPerfectSimple
(W{REGEXP("(?i)no")} W{REGEXP("(?i)sooner")} Had NC Done # W{REGEXP("(?i)than")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionWithNoSoonerThanPastPerfectSimple", "level"="B2")};

//EXAMPLE 5.SubjectEllipsisPastPerfectSimple
(W{REGEXP("(?i)and")} Had Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="SubjectEllipsisPastPerfectSimple", "level"="B2")};

//EXAMPLE 6.QuestionsPastPerfectSimple
(Had NC Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="QuestionsPastPerfectSimple", "level"="B2")};

//EXAMPLE 7.WithAdverbsPastPerfectSimple
(Had POS_ADV Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="WithAdverbsPastPerfectSimple", "level"="B2")};

//EXAMPLE 8.BackgroundInformationWithRelativeClausePastPerfectSimple
(RelativePronoun NC Had Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="BackgroundInformationWithRelativeClausePastPerfectSimple", "level"="B2")};
(RelativePronoun Had Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="BackgroundInformationWithRelativeClausePastPerfectSimple", "level"="B2")};

//EXAMPLE 9.ChangeOfSituationPastPerfectSimple
(Had Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="ChangeOfSituationPastPerfectSimple", "level"="B2")};

//EXAMPLE 10.ReportsOfQuestionsPastPerfectSimple(hard)
//(Past NC? (W{REGEXP("(?i)if")}|RelativePronoun|WHWord) NC? Had Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="ReportsOfQuestionsPastPerfectSimple", "level"="B2")};

//EXAMPLE 11.ReportsOfStatementsPastPerfectSimple(hard)
//(Past ToDo? NC? (RelativePronoun|WHWord) NC? Had Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="ReportsOfStatementsPastPerfectSimple", "level"="B2")};

//4.PastSimple
//EXAMPLE 1.NegativePastSimple
(Didnt POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="NegativePastSimple", "level"="B2")};

//EXAMPLE 2.QuestionsPastSimple
(Did NC VC) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="B2")};

//EXAMPLE 3.WithSubordinatingConjunctionsPastSimple
(Conjunction NC Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="WithSubordinatingConjunctionsPastSimple", "level"="B2")};

//EXAMPLE 4.WithTimeAdjunctsPastSimple(????)
//(Past POS_PART? ADVC? PC? POS_PRON? NC PrepositionPhrase? TimeAdjunct) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="WithTimeAdjunctsPastSimple", "level"="B2")};

//EXAMPLE 5.PolitenessAfterIfPastSimple
(W{REGEXP("(?i)if")} NC Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="PolitenessAfterIfPastSimple", "level"="B2")};

//EXAMPLE 6.PolitenessIWonderedAndIWanted
(W{REGEXP("(?i)I")} W{REGEXP("(?i)wondered|wanted")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="PolitenessIWonderedAndIWanted", "level"="B2")};

//5.PresentPerfectContinuous
//EXAMPLE 1.NegativePresentPerfectContinuous
(Hasnt BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectContinuous", "superCategory"="Past", "name"="NegativePresentPerfectContinuous", "level"="B2")};

//EXAMPLE 2.WithAdverbsPresentPerfectContinuous
(Has POS_ADV BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectContinuous", "superCategory"="Past", "name"="WithAdverbsPresentPerfectContinuous", "level"="B2")};

//EXAMPLE 3.RecentPastPresentPerfectContinuous
(Has BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectContinuous", "superCategory"="Past", "name"="RecentPastPresentPerfectContinuous", "level"="B2")};

//6.PresentPerfectSimple
//EXAMPLE 1.WithStillPresentPerfectSimple
(W{REGEXP("(?i)still")} Has Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="WithStillPresentPerfectSimple", "level"="B2")};

//EXAMPLE 2.QuestionsPresentPerfectSimple
(Has NC Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="QuestionsPresentPerfectSimple", "level"="B2")};



//SCRIPT B2_Level.B2_Future;

//1.FutureContinuous  
//EXAMPLE 1.QuestionsFutureContinuous
(Will NC Be Doing) {-> CREATE(GrammarProfile, "subCategory"="FutureContinuous", "superCategory"="Future", "name"="QuestionsFutureContinuous", "level"="B1")};

//EXAMPLE 2.PolitenessFutureContinuous
(Will NC Be Doing) {-> CREATE(GrammarProfile, "subCategory"="FutureContinuous", "superCategory"="Future", "name"="PolitenessFutureContinuous", "level"="B1")};

//2.FutureExpressionsWithBe
//EXAMPLE 1.BeAboutToFuture
(Is W{REGEXP("(?i)about")} ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureExpressionsWithBe", "superCategory"="Future", "name"="BeAboutToFuture", "level"="B1")};

//EXAMPLE 2.BeDueToFuture
(Is W{REGEXP("(?i)due")} ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureExpressionsWithBe", "superCategory"="Future", "name"="BeDueToFuture", "level"="B1")};

//EXAMPLE 3.BeToFuture
(Is ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureExpressionsWithBe", "superCategory"="Future", "name"="BeToFuture", "level"="B1")};

//EXAMPLE 4.ImmediateFutureWithBeAboutTo
(Is W{REGEXP("(?i)just")} W{REGEXP("(?i)about")} ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureExpressionsWithBe", "superCategory"="Future", "name"="ImmediateFutureWithBeAboutTo", "level"="B1")};
(Is W{REGEXP("(?i)about")} ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureExpressionsWithBe", "superCategory"="Future", "name"="ImmediateFutureWithBeAboutTo", "level"="B1")};

//EXAMPLE 5.ObligationsAndInstructionsWithBeTo
(Is ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureExpressionsWithBe", "superCategory"="Future", "name"="ObligationsAndInstructionsWithBeTo", "level"="B1")};

//EXAMPLE 6.SchedulesFuture
(Is W{REGEXP("(?i)due")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="FutureExpressionsWithBe", "superCategory"="Future", "name"="SchedulesFuture", "level"="B1")};
(Is ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureExpressionsWithBe", "superCategory"="Future", "name"="SchedulesFuture", "level"="B1")};

//3.FutureInThePast
//EXAMPLE 1.BeAboutToFutureInThePast
(Was W{REGEXP("(?i)about")} ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureInThePast", "superCategory"="Future", "name"="BeAboutToFutureInThePast", "level"="B1")};

//EXAMPLE 2.BeOnThePointOfFutureInThePast
(Was W{REGEXP("(?i)on")} W{REGEXP("(?i)the")} W{REGEXP("(?i)point")} W{REGEXP("(?i)of")} Doing ) {-> CREATE(GrammarProfile, "subCategory"="FutureInThePast", "superCategory"="Future", "name"="BeOnThePointOfFutureInThePast", "level"="B1")};

//4.FuturePerfectContinuous
//EXAMPLE 1.AffirmativeFuturePerfectContinuous
(Lemma{FEATURE("value", "will")} Have BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectContinuous", "superCategory"="Future", "name"="AffirmativeFuturePerfectContinuous", "level"="B1")};

//EXAMPLE 2.NegativeFuturePerfectContinuous
(Lemma{FEATURE("value", "will")} Not Have BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectContinuous", "superCategory"="Future", "name"="NegativeFuturePerfectContinuous", "level"="B1")};

//EXAMPLE 3.LookingBackFromAPointInTheFuture
(Will Have BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectContinuous", "superCategory"="Future", "name"="LookingBackFromAPointInTheFuture", "level"="B1")};

//5.FuturePerfectSimple 
//EXAMPLE 1.AffirmativeFuturePerfectSimple
(Lemma{FEATURE("value", "will")} Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="AffirmativeFuturePerfectSimple", "level"="B1")};
 
//EXAMPLE 2.NegativeFuturePerfectSimple
(Lemma{FEATURE("value", "will")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="NegativeFuturePerfectSimple", "level"="B1")};
 
//EXAMPLE 3.EventsCompletedInTheFuture
(Will Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="EventsCompletedInTheFuture", "level"="B1")};
 

//6.PresentContinuousForFutureUse
//EXAMPLE 1.FutureArrangements
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuousForFutureUse", "superCategory"="Future", "name"="FutureArrangements", "level"="B1")};

//EXAMPLE 2.QuestionsAboutTheFuture
(Is NC Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuousForFutureUse", "superCategory"="Future", "name"="QuestionsAboutTheFuture", "level"="B1")};



//SCRIPT B2_Level.B2_Passives;

//1.Passives: form
//EXAMPLE 1.InfinitivePassives
(ToBeDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="InfinitivePassives", "level"="B2")};

//EXAMPLE 2.ModalPerfectPassives
(ModalVerb Have BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="ModalPerfectPassives", "level"="B2")};

//EXAMPLE 3.PastContiniousAffirmativePassives
(W{REGEXP("(?i)was|were")} BeingDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PastContiniousAffirmativePassives", "level"="B2")};

//EXAMPLE 4.PastPerfetSimpleAffirmativePassives
(W{REGEXP("(?i)had")} BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PastPerfetSimpleAffirmativePassives", "level"="B2")};

//EXAMPLE 5.PastPerfetSimpleNegativePassives
(W{REGEXP("(?i)had")} Not BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PastPerfetSimpleNegativePassives", "level"="B2")};

//EXAMPLE 6.PresentContiniousAffirmativePassives
(W{REGEXP("(?i)am|is|are")} BeingDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentContiniousAffirmativePassives", "level"="B2")};

//EXAMPLE 7.PresentContiniousNegativePassives
(W{REGEXP("(?i)am|is|are")} Not BeingDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentContiniousNegativePassives", "level"="B2")};

//EXAMPLE 8.PresentPerfetSimpleAffirmativePassives
(W{REGEXP("(?i)has|have")} BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentPerfetSimpleAffirmativePassives", "level"="B2")};

//EXAMPLE 9.PresentPerfetSimpleNegativePassives
(W{REGEXP("(?i)has|have")} Not BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentPerfetSimpleNegativePassives", "level"="B2")};

//EXAMPLE 10.WithModalVerbsPassives
(ModalVerb Be Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="WithModalVerbsPassives", "level"="B2")};

//EXAMPLE 11.WithVerbsTakingTwoObjectsWithPrepositionalPhrasePassives
(NC Passive PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="WithVerbsTakingTwoObjectsWithPrepositionalPhrasePassives", "level"="B2")};

//EXAMPLE 12.WithVerbsTakingTwoObjectsPassives
(NC Passive NC) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="WithVerbsTakingTwoObjectsPassives", "level"="B2")};

//EXAMPLE 13.WithModalVerbsSummariesAndEvaluationsPassives
(ModalVerb Be Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="WithModalVerbsSummariesAndEvaluationsPassives", "level"="B2")};

//EXAMPLE 14.WithWillFutureReferencePassives
(Will Be Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="WithWillFutureReferencePassives", "level"="B2")};

//2.GetAndHave
//EXAMPLE 1.GetReflexivePronounEd
(Lemma{FEATURE("value", "get")} ReflexivePronoun Done) {-> CREATE(GrammarProfile, "subCategory"="GetAndHave", "superCategory"="Passive", "name"="GetReflexivePronounEd", "level"="B2")};

//EXAMPLE 2.HaveObjEdProactivePassive
(Have NC Done) {-> CREATE(GrammarProfile, "subCategory"="GetAndHave", "superCategory"="Passive", "name"="HaveObjEdProactivePassive", "level"="B2")};

//EXAMPLE 3.GetObjectToInfinitive
(Lemma{FEATURE("value", "get")} NC ToDo) {-> CREATE(GrammarProfile, "subCategory"="GetAndHave", "superCategory"="Passive", "name"="GetObjectToInfinitive", "level"="B2")};



//SCRIPT B2_Level.B2_ReportedSpeech;

//1.ReportedSpeech
//EXAMPLE 1.DirectSpeechReportingClauseMidPosition (???????????)
//(ReportingClause COMMA NC ReportingVerbs COMMA ReportingClause) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="DirectSpeechReportingClauseMidPosition", "level"="B2")};

//EXAMPLE 2.DirectSpeechReportingClauseInvertedSubject
//(ReportingClause COMMA ReportingVerbs NC) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="DirectSpeechReportingClauseInvertedSubject", "level"="B2")};

//EXAMPLE 3.ModificationReportingVerbAdverb
//(NC ReportingVerbs  ADVC) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ModificationReportingVerbAdverb", "level"="B2")};

//EXAMPLE 4.ReportedRequestsAndCommandsNegative
(Lemma{FEATURE("value", "ask")} NC Not ToDo ) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportedRequestsAndCommandsNegative", "level"="B2")};
(Lemma{FEATURE("value", "tell")} NC Not ToDo ) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportedRequestsAndCommandsNegative", "level"="B2")};

//EXAMPLE 5.CitationPresentSimple
//(((W{REGEXP("(?i)say")}|W{REGEXP("(?i)says")})|(W{REGEXP("(?i)tell")}|W{REGEXP("(?i)tells")})) PC? NC?(W{REGEXP("(?i)that")})? FiniteClause) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="CitationPresentSimple", "level"="B2")};

//EXAMPLE 6.ReportingVerbsPastContinuous
(Was Doing WHWordCluase) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="ReportingVerbsPastContinuous", "level"="B2")};

//EXAMPLE 7.TemporalShiftsPast(???)
//( (Past|(Had Done)) PC? NC?(W{REGEXP("(?i)that")})? ) {-> CREATE(GrammarProfile, "subCategory"="ReportedSpeech", "superCategory"="ReportedSpeech", "name"="TemporalShiftsPast", "level"="B2")};



//SCRIPT B2_Level.B2_Clauses;


//1.ComparativesClause
//EXAMPLE 1.ComparativeAdjectiveThanNonFiniteClause
(W{REGEXP("(?i)than")} ToDoNonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="ComparativeAdjectiveThanNonFiniteClause", "level"="B2")};
(W{REGEXP("(?i)than")} DoneNonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="ComparativeAdjectiveThanNonFiniteClause", "level"="B2")};

//EXAMPLE 2.SuperlativeAdjectiveThat
(Superlative POS_NOUN W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SuperlativeAdjectiveThat", "level"="B2")};
(Superlative POS_NOUN ) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SuperlativeAdjectiveThat", "level"="B2")};
(Superlative W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SuperlativeAdjectiveThat", "level"="B2")};
(Superlative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SuperlativeAdjectiveThat", "level"="B2")};

//EXAMPLE 3.AdjectiveEnoughToInfinitive
(POS_ADJ W{REGEXP("(?i)enough")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="AdjectiveEnoughToInfinitive", "level"="B2")};

//EXAMPLE 4.TheSameNounAsClause
(W{REGEXP("(?i)the")} W{REGEXP("(?i)same")} POS_NOUN W{REGEXP("(?i)as")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="TheSameNounAsClause", "level"="B2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)same")} W{REGEXP("(?i)as")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="TheSameNounAsClause", "level"="B2")};

//EXAMPLE 5.RatherThanNonFiniteClause (???)
( W{REGEXP("(?i)rather")} W{REGEXP("(?i)than")}  NonFiniteClause ) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="RatherThanNonFiniteClause", "level"="B2")};

//EXAMPLE 6.AsIfOrAsThoughFiniteClause
(W{REGEXP("(?i)as")} W{REGEXP("(?i)if")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="AsIfOrAsThoughFiniteClause", "level"="B2")};
(W{REGEXP("(?i)as")} W{REGEXP("(?i)though")}) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="AsIfOrAsThoughFiniteClause", "level"="B2")};

//2.Coordinated
//EXAMPLE 1.NeitherNorEmphasis 
(W{REGEXP("(?i)neither")} # W{REGEXP("(?i)nor")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="NeitherNorEmphasis", "level"="B2")}; 

//EXAMPLE 2.NotOnlyButAlsoFocus
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} # W{REGEXP("(?i)but")} W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="NotOnlyButAlsoFocus", "level"="B2")}; 
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} # W{REGEXP("(?i)but")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="NotOnlyButAlsoFocus", "level"="B2")}; 

//3.Imperatives
//EXAMPLE 1.LetUsNotSuggestion
// POS{FEATURE("PosValue", "POS")} 
(W{REGEXP("(?i)let")} SPECIAL{REGEXP("'")} W{REGEXP("s")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetUsNotSuggestion", "level"="B2")}; 

//EXAMPLE 2.DoNotEmphasis
(W{REGEXP("(?i)do")} Not POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="DoNotEmphasis", "level"="B2")}; 

//4.Interrogatives
//EXMPLE 1.NegativeInterrogativeAdverb
(Not NC POS_ADV POS_VERB # QUESTION) {-> CREATE(GrammarProfile, "subCategory"="InterrogativesClause", "superCategory"="Clause", "name"="NegativeInterrogativeAdverb", "level"="B2")}; 

//5.PhrasesExclamations    
//EXMPLE 1.NegativeInterrogative (???)
(Not NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PhrasesExclamationsClause", "superCategory"="Clause", "name"="NegativeInterrogative", "level"="B2")}; 

//6.Relative
//EXMPLE 1.PronounPrepositionRelative
(RelativePronoun # POS_ADP PERIOD) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="PronounPrepositionRelative", "level"="B2")}; 

//EXMPLE 2.NondefiningWithWhoseRelative
(NC COMMA W{REGEXP("(?i)whose")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="NondefiningWithWhoseRelative", "level"="B2")}; 
(NC W{REGEXP("(?i)whose")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="NondefiningWithWhoseRelative", "level"="B2")}; 

//EXMPLE 3.DefiningWithWhoseRelative
(NC COMMA W{REGEXP("(?i)whose")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="DefiningWithWhoseRelative", "level"="B2")}; 
(NC W{REGEXP("(?i)whose")}) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="DefiningWithWhoseRelative", "level"="B2")}; 

//EXMPLE 4.SentenceEvaluativeRelative
(RelativePronoun # PERIOD) {-> CREATE(GrammarProfile, "subCategory"="RelativeClause", "superCategory"="Clause", "name"="SentenceEvaluativeRelative", "level"="B2")}; 

//7.Subordinated
//EXMPLE 1.NonFiniteWithIngSubordinated
(W{REGEXP("(?i)after")} Have Done) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteWithIngSubordinated", "level"="B2")}; 
(W{REGEXP("(?i)after")} BeingDone) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteWithIngSubordinated", "level"="B2")}; 

//EXMPLE 2.ConditionsSubordinated
(Conjunction FiniteClause1) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="ConditionsSubordinated", "level"="B2")}; 

//EXMPLE 3.IngClauseSubordinated
(DoingNonFiniteClause COMMA) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="IngClauseSubordinated", "level"="B2")}; 


//8.Conditional
//EXMPLE 1.SubordinatingConjunctionsConditions
(Conjunction  NC Is Doing) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="SubordinatingConjunctionsConditions", "level"="B2")}; 
(Conjunction  NC Present) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="SubordinatingConjunctionsConditions", "level"="B2")}; 









//C1***************************
//SCRIPT C1_Level.C1_Nouns;


//1.NounPhrases
//1.NounPhraseWithPossessiveSWithoutNoun
(POS_NOUN POS{FEATURE("PosValue", "POS")} PM) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounPhraseWithPossessiveSWithoutNoun", "level"="C1")};
(POS{FEATURE("PosValue", "NNS")} POS{FEATURE("PosValue", "POS")} PM) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NounPhraseWithPossessiveSWithoutNoun", "level"="C1")};

//2.NominalisationFormality
(W{REGEXP("(?i)output|rest")}) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="NominalisationFormality", "level"="C1")};

//3.WHCleftFocuse
(WHWord POS_NOUN POS_VERB Particle? Be) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="WHCleftFocuse", "level"="C1")};


//2.TypesNoun
//4.FormIngFormsAbstractNouns(?)
(W{REGEXP("(?i)learning|advertising|teaching")}) {-> CREATE(GrammarProfile, "subCategory"="TypesNoun", "superCategory"="Noun", "name"="FormIngFormsAbstractNouns", "level"="C1")};


//3.UncountableNoun
//5.UncountableNouns
(UncountableNoun) {-> CREATE(GrammarProfile, "subCategory"="UncountableNoun", "superCategory"="Noun", "name"="UncountableNouns", "level"="C1")};



//SCRIPT C1_Level.C1_Pronouns;


//1.PossessivePronoun
//1.OursAsSubject
(W{REGEXP("(?i)ours")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OursAsSubject", "level"="C1")};


//2.SubjectObjectPronoun
//2.SubjectItToPassive
(W{REGEXP("(?i)it")} Be Done) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectItToPassive", "level"="C1")};


//3.DemonstrativesPronoun
//3.ThatOfThoseOf
(W{REGEXP("(?i)that")} W{REGEXP("(?i)of")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThatOfThoseOf", "level"="C1")};
(W{REGEXP("(?i)those")} W{REGEXP("(?i)of")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesPronoun", "superCategory"="Pronoun", "name"="ThatOfThoseOf", "level"="C1")};


//4.QuantityPronoun
//4.NoneSubstitution
(W{REGEXP("(?i)none")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="NoneSubstitution", "level"="C1")};

//5.FormalQuantity
(W{REGEXP("(?i)few|many|most|others")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="FormalQuantity", "level"="C1")};

//6.ModifiedQuantity
(W{REGEXP("(?i)very|too|so|few|many")}) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="ModifiedQuantity", "level"="C1")};

//7.RelativePronounsQuantity
(W{REGEXP("(?i)some")} W{REGEXP("(?i)of")} RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="RelativePronounsQuantity", "level"="C1")};
(W{REGEXP("(?i)many")} W{REGEXP("(?i)of")} RelativePronoun) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="RelativePronounsQuantity", "level"="C1")};


//5.SubstitutionPronoun, one, ones, none
//8.NoneSubstitution
(W{REGEXP("(?i)none")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="NoneSubstitution", "level"="C1")};


//6.IndefinitePronoun - thing, -one, -body etc
//9.AnythingFocusSubstitution
(W{REGEXP("(?i)anything")}) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="AnythingFocusSubstitution", "level"="C1")};

//10.AnythingEllipsisSubstitution
(W{REGEXP("(?i)anything")}) {-> CREATE(GrammarProfile, "subCategory"="IndefinitePronoun", "superCategory"="Pronoun", "name"="AnythingEllipsisSubstitution", "level"="C1")};


//7.ReciprocalPronoun
//11.EachTheOthersAsComplement
(W{REGEXP("(?i)each")} # W{REGEXP("(?i)the")} W{REGEXP("(?i)other")}) {-> CREATE(GrammarProfile, "subCategory"="ReciprocalPronoun", "superCategory"="Pronoun", "name"="EachTheOthersAsComplement", "level"="C1")};
(W{REGEXP("(?i)each")} # W{REGEXP("(?i)the")} W{REGEXP("(?i)others")}) {-> CREATE(GrammarProfile, "subCategory"="ReciprocalPronoun", "superCategory"="Pronoun", "name"="EachTheOthersAsComplement", "level"="C1")};




//SCRIPT C1_Level.C1_Adjectives;


//1.CombiningAdjective
//1.CompoundAdjectives 
(POS_ADJ{CONTAINS(SPECIAL)})  {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CompoundAdjectives", "level"="C1")};


//2.ModifyingAdjective
//2.WithExtremeAdverbs
(W{REGEXP("(?i)absolutely")}  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithExtremeAdverbs", "level"="C1")}; 
(W{REGEXP("(?i)extremely")}  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithExtremeAdverbs", "level"="C1")}; 
(W{REGEXP("(?i)incredibly")}  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithExtremeAdverbs", "level"="C1")}; 
(W{REGEXP("(?i)totally")}  POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="WithExtremeAdverbs", "level"="C1")}; 


//3.PositionAdjective
//3.PastParticipleAsAdjective
(NC Done) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="PastParticipleAsAdjective", "level"="C1")}; 


//4.SuperlativesAdjective
//4.WithNounAndPostmodifierSuperlatives
(Superlative POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithNounAndPostmodifierSuperlatives", "level"="C1")}; 

//5.WithPostmodifierAndNounSuperlatives
(Superlative POS_NOUN POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithPostmodifierAndNounSuperlatives", "level"="C1")}; 
(W{REGEXP("(?i)her")} POS{FEATURE("PosValue", "JJS")}  POS_NOUN W{REGEXP("(?i)ever")} ) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithPostmodifierAndNounSuperlatives", "level"="C1")}; 
(W{REGEXP("(?i)her")} W{REGEXP("(?i)most")}  POS_ADJ   POS_NOUN W{REGEXP("(?i)ever")} ) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithPostmodifierAndNounSuperlatives", "level"="C1")}; 
(W{REGEXP("(?i)her")} W{REGEXP("(?i)least")}  POS_ADJ  POS_NOUN W{REGEXP("(?i)ever")} ) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="WithPostmodifierAndNounSuperlatives", "level"="C1")}; 



//SCRIPT C1_Level.C1_Adverbs;

//1.AdverbsAsModifiers
//1.DegreeWithAdjectivesAdverbAsModifiers
(Degree POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="DegreeWithAdjectivesAdverbAsModifiers", "level"="C1")}; 

//2.CertaintyAdverbAsModifiers
(Certainty) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="CertaintyAdverbAsModifiers", "level"="C1")};

//3.StanceAdverbAsModifiers
(Stance) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="StanceAdverbAsModifiers", "level"="C1")};

//2.AdverbsAndAdverbPhrases: types and meanings
//4.DegreeModifyingAdverbs
(Degree POS_ADV) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeModifyingAdverbs", "level"="C1")}; 

//5.DegreeModifyingComparatives
(Degree Comparative) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAndAdverbPhrases", "superCategory"="Adverb", "name"="DegreeModifyingComparatives", "level"="C1")}; 


//3.AdverbPhrases - form
//6.AdverbAdverb
(POS_ADV POS_ADV) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="AdverbAdverb", "level"="C1")}; 

//7.AdverbEnough
(POS_ADV W{REGEXP("(?i)enough")}) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="AdverbEnough", "level"="C1")}; 

//8.AdverbPrepositionalPhrasesHighlight
(POS_ADV PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="AdverbPrepositionalPhrasesHighlight", "level"="C1")}; 



//SCRIPT C1_Level.C1_Determiners;

//1.PossessivesDeterminer
//1.OneSPossessives
(W{REGEXP("(?i)one")} POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="OneSPossessives", "level"="C1")};

//2.QuantityDeterminer
//2.EitherNeitherWithSingularNouns
(W{REGEXP("(?i)either")} POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="EitherNeitherWithSingularNouns", "level"="C1")};
(W{REGEXP("(?i)neither")} POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="EitherNeitherWithSingularNouns", "level"="C1")};

//3.EitherNeitherOfDeterminersWithPluralNouns
(W{REGEXP("(?i)either|neither")}  W{REGEXP("(?i)of")} Determiner? POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="EitherNeitherOfDeterminersWithPluralNouns", "level"="C1")};
(W{REGEXP("(?i)either|neither")}  W{REGEXP("(?i)of")} Determiner? POS_PRON)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="EitherNeitherOfDeterminersWithPluralNouns", "level"="C1")};

//4.Hyperbole
(DeterminerOf POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="Hyperbole", "level"="C1")};






//SCRIPT C1_Level.C1_Conjunctions;


//1.CoordinatingConjunction
//1.YetConcessive
(W{REGEXP("(?i)and")} W{REGEXP("(?i)yet")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="YetConcessive", "level"="C1")};
(W{REGEXP("(?i)yet")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="YetConcessive", "level"="C1")};

//2.EitherOr
(W{REGEXP("(?i)either")} # W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="EitherOr", "level"="C1")};

//3.NotOnlyButAlso
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} # W{REGEXP("(?i)but")} W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="NotOnlyButAlso", "level"="C1")};

//4.NotOnlyButAlsoWithInversion
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} Do # W{REGEXP("(?i)but")} NC W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="NotOnlyButAlsoWithInversion", "level"="C1")};


//2.SubordinatingConjunction
//5.FocusSubordinating
(SimpleSubordinatingConjunction NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="SubordinatingConjunction", "superCategory"="Conjunction", "name"="FocusSubordinating", "level"="C1")};



//SCRIPT C1_Level.C1_DiscourseMarkers;


//1.DiscourseMarkersInWriting
//1.TextualReference
(Reference) {-> CREATE(GrammarProfile, "subCategory"="DiscourseMarkersInWriting", "superCategory"="DiscourseMarker", "name"="TextualReference", "level"="C1")};



//SCRIPT C1_Level.C1_Focus;


//1.Focus
//1.FixedExpressionFronting
(FrontingExpression) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="FixedExpressionFronting", "level"="C1")};

//2.ImperativesFocus
(POS{FEATURE("PosValue", "VB")} NC) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ImperativesFocus", "level"="C1")};

//3.WhatCleftClause
(W{REGEXP("(?i)what")} POS_PRON POS_VERB Preposition? Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WhatCleftClause", "level"="C1")};
(W{REGEXP("(?i)what")} POS_NOUN POS_VERB Preposition? Be) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WhatCleftClause", "level"="C1")};

//4.WHCleftClauseTitles
(WHWord NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WHCleftClauseTitles", "level"="C1")};

//5.NonfiniteWithEDClauses
(DoneNonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="NonfiniteWithEDClauses", "level"="C1")};


//SCRIPT C1_Level.C1_Negation;

//1.Negation
//1.NoneSubstitution
(W{REGEXP("(?i)none")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NoneSubstitution", "level"="C1")};

//2.NotAllNotEvery
(W{REGEXP("(?i)not")} W{REGEXP("(?i)everyone|everything|every|all")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotAllNotEvery", "level"="C1")};

//3.NotOnlyButAlsoWithInversion
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} POS_VERB # W{REGEXP("(?i)but")} NC POS_VERB W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotOnlyButAlsoWithInversion", "level"="C1")};
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} POS_VERB #  NC W{REGEXP("(?i)also")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotOnlyButAlsoWithInversion", "level"="C1")};

//4.NotStanceAdverbHedging
(Not Stance) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotStanceAdverbHedging", "level"="C1")};

//5.FormalNegation
DECLARE Very;
(W{REGEXP("(?i)very")}){-> MARK(Very)};
((Very)? W{REGEXP("(?i)few")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="FormalNegation", "level"="C1")};

//6.WhatsoeverEmphasis
(W{REGEXP("(?i)no")} POS_NOUN W{REGEXP("(?i)whatsoever")})  {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="WhatsoeverEmphasis", "level"="C1")};


//SCRIPT C1_Level.C1_Questions;

//1.AlternativesQuestion
//1.StrongAlternative
(W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="StrongAlternative", "level"="C1")};

//2.ElliptedModalHedging
(W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="ElliptedModalHedging", "level"="C1")};


//2.TagsQuestion
//3.TagsWithThereBe
(W{REGEXP("(?i)there")} Be) {-> CREATE(GrammarProfile, "subCategory"="TagsQuestion", "superCategory"="Question", "name"="TagsWithThereBe", "level"="C1")};


//3.WhQuestion
//4.FocusWH
(WHWord) {-> CREATE(GrammarProfile, "subCategory"="WhQuestion", "superCategory"="Question", "name"="FocusWH", "level"="C1")};







//SCRIPT C1_Level.C1_Verbs;

//1.PhrasalPrepositionalverb
//1.PhrasalPrepositionalVerbStrandedPreposition
(POS_VERB Particle Preposition PERIOD) {-> CREATE(GrammarProfile, "subCategory"="PhrasalPrepositionalverb", "superCategory"="Verb", "name"="PhrasalPrepositionalVerbStrandedPreposition", "level"="C1")};


//2.PhrasalVerb
//2.VerbPronounParticlePhrasal
(POS_VERB POS_PRON  Particle) {-> CREATE(GrammarProfile, "subCategory"="PhrasalVerb", "superCategory"="Verb", "name"="VerbPronounParticlePhrasal", "level"="C1")};


//3.PatternsWithToAndIng
//3.VerbsOfSensesObjectInfinitive
(POS_VERB NC POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="VerbsOfSensesObjectInfinitive", "level"="C1")};


//SCRIPT C1_Level.C1_Modality;

//1.AdjectivesModality
//1.ModifyingAdjectivesHedging
(Degree POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="ModifyingAdjectivesHedging", "level"="C1")};

//2.ModifyingAdjectivesEmphasis
(POS_ADV POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="AdjectivesModality", "superCategory"="Modality", "name"="ModifyingAdjectivesEmphasis", "level"="C1")};

//2.Can
//3.PastNegativeDeductionsCan
(Lemma{FEATURE("value", "can")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="PastNegativeDeductionsCan", "level"="C1")};
(Lemma{FEATURE("value", "can")} Not Have BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="PastNegativeDeductionsCan", "level"="C1")};

//4.PassiveDeductionsCan
(Can Be Done) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="PassiveDeductionsCan", "level"="C1")};

//5.WithAdverbsCan
(Can POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="WithAdverbsCan", "level"="C1")};

//6.EmphasisCan
(Can POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="EmphasisCan", "level"="C1")};


//3.Dare
//7.IDareSay
 (W{REGEXP("(?i)I")} W{REGEXP("(?i)dare")} W{REGEXP("(?i)say")}) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="IDareSay", "level"="C1")};
 
//8.QuestionDare
(Lemma{FEATURE("value", "dare")}  NC POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="QuestionDare", "level"="B2")};

//9.HowDare
 (W{REGEXP("(?i)how")} W{REGEXP("(?i)dare")}) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="HowDare", "level"="C1")};
 
 
//4.ExpressionsWithBe
//10.BeSetToAssertion
(Be W{REGEXP("(?i)set")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeSetToAssertion", "level"="C1")};

//11.HedgingBe
(Lemma{FEATURE("value", "be")} Not POS_ADJ W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="HedgingBe", "level"="C1")};


//5.May
//12.MayWell
(W{REGEXP("(?i)may")} W{REGEXP("(?i)well")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="MayWell", "level"="C1")};

//13.PastNegativeMay
(Lemma{FEATURE("value", "may")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="PastNegativeMay", "level"="C1")};


//6.Might
//14.QuestionMight
(Might NC Not? POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="QuestionMight", "level"="C1")};

//15.PastNegativeMight
(Lemma{FEATURE("value", "might")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="PastNegativeMight", "level"="C1")};

//16.PossibilityInThePastMight
(Lemma{FEATURE("value", "might")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="PossibilityInThePastMight", "level"="C1")};
   
//17.ConsolingOrJustifying
(Might # W{REGEXP("(?i)but")}) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="ConsolingOrJustifying", "level"="C1")};

//18.PoliteCriticism
(Might NC Not? POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="PoliteCriticism", "level"="C1")};


   
//7.Need
//19.PastNegativeNeed
(Lemma{FEATURE("value", "need")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="Need", "superCategory"="Modality", "name"="PastNegativeNeed", "level"="C1")};


//8.Ought
//20.DesiredStatesWithThereOughtToBe
(W{REGEXP("(?i)there")} Ought W{REGEXP("(?i)to")} W{REGEXP("(?i)be")})  {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="DesiredStatesWithThereOughtToBe", "level"="C1")};

//21.EmphasisWithReallyOught
(W{REGEXP("(?i)really")} Ought ToDo)  {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="EmphasisWithReallyOught", "level"="C1")};

//22.PastAffirmativeOught
(Ought W{REGEXP("(?i)to")} Have Done)  {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="PastAffirmativeOught", "level"="C1")};


//9.Shall
//23.NegativeShall
(Lemma{FEATURE("value", "shall")} Not POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="NegativeShall", "level"="C1")};

//24.CommandsShall
(Shall POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="CommandsShall", "level"="C1")};


//10.Should
//25.AfterIfClausesShould
(W{REGEXP("(?i)If")} NC Should POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="AfterIfClausesShould", "level"="C1")};

//26.InversionShould
(Should NC POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Should", "superCategory"="Modality", "name"="InversionShould", "level"="C1")};


//11.UsedTo
//27.QuestionsUsedTo
(WHWord Do NC W{REGEXP("(?i)used")} ToDo)  {-> CREATE(GrammarProfile, "subCategory"="UsedTo", "superCategory"="Modality", "name"="QuestionsUsedTo", "level"="C1")};


//12.Will
//28.HabitualAndTypicalWill
(Will)  {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="HabitualAndTypicalWill", "level"="C1")};


//13.Would
//29.WithAdverbsWould
(Would POS_ADV POS_VERB)  {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="WithAdverbsWould", "level"="C1")};



//14.AdverbsVerb
//30.NotNecessarily
(Not W{REGEXP("(?i)necessarily")})  {-> CREATE(GrammarProfile, "subCategory"="AdverbsVerb", "superCategory"="Modality", "name"="NotNecessarily", "level"="C1")};

//31.ResponseTokensNotNecessarily
(Not W{REGEXP("(?i)necessarily")})  {-> CREATE(GrammarProfile, "subCategory"="AdverbsVerb", "superCategory"="Modality", "name"="ResponseTokensNotNecessarily", "level"="C1")};




//SCRIPT C1_Level.C1_Present;

//1.PresentContinuous
//1.RhetoricalQuestions
(Is NC Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="RhetoricalQuestions", "level"="C1")};


//2.PresentSimple
//2.NegativeQuestionsPersuasionPresentSimple
(Doesnt? POS_PRON POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeQuestionsPersuasionPresentSimple", "level"="C1")};
(Doesnt? POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeQuestionsPersuasionPresentSimple", "level"="C1")};

//3.NegativeQuestionsOpinionPresentSimple
(Doesnt? POS_PRON POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeQuestionsOpinionPresentSimple", "level"="C1")};
(Doesnt? POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeQuestionsOpinionPresentSimple", "level"="C1")};
(Doesnt? POS_PRON W{REGEXP("(?i)all")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="NegativeQuestionsOpinionPresentSimple", "level"="C1")};

//4.ReportingVerbsPresentSimple
(Lemma{FEATURE("value", "demonstrate")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="ReportingVerbsPresentSimple", "level"="C1")};
(Lemma{FEATURE("value", "illustrate")}) {-> CREATE(GrammarProfile, "subCategory"="PresentSimple", "superCategory"="Present", "name"="ReportingVerbsPresentSimple", "level"="C1")};


//SCRIPT C1_Level.C1_Past;

//1.PastPerfectSimple
//1.InversionImagedPast
(Had NC Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionImagedPast", "level"="C1")};


//2.PastSimple
//2.NotOnlyButAlsoWithInversion
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} Did # W{REGEXP("(?i)but")}  W{REGEXP("(?i)also")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="NotOnlyButAlsoWithInversion", "level"="C1")};

//3.QuestionsPastSimple
//DECLARE All;
//(W{REGEXP("(?i)all")}) {-> MARK(All)};
//(Did NC (All)? POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="C1")};
//(Did NC (All)?) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="QuestionsPastSimple", "level"="C1")};

//4.ComplexOrderingOfPastEvents
(Past) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="ComplexOrderingOfPastEvents", "level"="C1")};

//5.ForEmphasisWithDid
(W{REGEXP("(?i)did")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="ForEmphasisWithDid", "level"="C1")};

//6.PolitenessIThought
(W{REGEXP("(?i)I")} W{REGEXP("(?i)thought")}) {-> CREATE(GrammarProfile, "subCategory"="PastSimple", "superCategory"="Past", "name"="PolitenessIThought", "level"="C1")};



//3.PresentPerfectSimple
//7.NegativePresentPerfectSimple
(Hasnt Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="NegativePresentPerfectSimple", "level"="C1")};


//SCRIPT C1_Level.C1_Future;

//1.FutureContinuous
//1.ExpectationsWithMightAndMay
(Might POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureContinuous", "superCategory"="Future", "name"="ExpectationsWithMightAndMay", "level"="C1")};
(May POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureContinuous", "superCategory"="Future", "name"="ExpectationsWithMightAndMay", "level"="C1")};


//2.FuturePerfectSimple
//2.WithAdverbsFuturePerfectSimple
(WillShall POS_ADV Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="WithAdverbsFuturePerfectSimple", "level"="C1")};

//3.AssumptionsFuturePerfectSimple
(Will POS_ADV Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="AssumptionsFuturePerfectSimple", "level"="C1")};
(Will Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="AssumptionsFuturePerfectSimple", "level"="C1")};

//4.PolitenessFuturePerfectSimple
(Will POS_ADV Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="PolitenessFuturePerfectSimple", "level"="C1")};
(Will Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="PolitenessFuturePerfectSimple", "level"="C1")};


//3.FutureWithWillAndShall
//5.NegativeShall
(Lemma{FEATURE("value", "shall")} Not) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="NegativeShall", "level"="C1")};


//4.FutureWithBeGoingTo
//6.WithAdverbsBeGoingTo
(Be POS_ADV Going ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="WithAdverbsBeGoingTo", "level"="C1")};


//5.PresentSimpleForFutureUse
//7.WithByTheTime
(W{REGEXP("(?i)by")} W{REGEXP("(?i)the")} W{REGEXP("(?i)time")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimpleForFutureUse", "superCategory"="Future", "name"="WithByTheTime", "level"="C1")};

//8.SuggestionsObligation
(POS_VERB W{REGEXP("(?i)that")} NC Present) {-> CREATE(GrammarProfile, "subCategory"="PresentSimpleForFutureUse", "superCategory"="Future", "name"="SuggestionsObligation", "level"="C1")};


//SCRIPT C1_Level.C1_Passives;

//1.Passives: form
//1.NonFiniteClausePassives
(W{REGEXP("(?i)being")} Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="NonFiniteClausePassives", "level"="C1")};

//2.PresentContiniousNegativePassives
(Be BeingDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="PresentContiniousNegativePassives", "level"="C1")};

//3.SummarisingEvaluatingWithIt
(W{REGEXP("(?i)it")} ModalVerb Be Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="SummarisingEvaluatingWithIt", "level"="C1")};
(W{REGEXP("(?i)it")} Have Be Done) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="SummarisingEvaluatingWithIt", "level"="C1")};


//2.GetAndHavePassive
//4.GetObejectED
(Lemma{FEATURE("value", "get")} NC Done) {-> CREATE(GrammarProfile, "subCategory"="GetAndHavePassive", "superCategory"="Passive", "name"="GetObejectED", "level"="C1")};

//5.GetObejectING
(Lemma{FEATURE("value", "get")} NC Doing) {-> CREATE(GrammarProfile, "subCategory"="GetAndHavePassive", "superCategory"="Passive", "name"="GetObejectING", "level"="C1")};



//SCRIPT C1_Level.C1_ReportedSpeech;


//SCRIPT C1_Level.C1_Clauses;

//1.ComparativesClause
//1.SuperlativeAdverbBestClause
(W{REGEXP("(?i)the")} W{REGEXP("(?i)best")} NC Can) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SuperlativeAdverbBestClause", "level"="C1")}; 
(W{REGEXP("(?i)the")} W{REGEXP("(?i)best")} NC Could) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SuperlativeAdverbBestClause", "level"="C1")}; 


//2.CoordinatedClause
//2.NotOnlyButAlsoWithInversionFocus 
DECLARE Also;
(W{REGEXP("(?i)also")}){-> MARK(Also)};
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} # W{REGEXP("(?i)but")} (Also)?) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="NotOnlyButAlsoWithInversionFocus", "level"="C1")}; 


//3.ImperativesClause
//3.LetThirdPersonPronounPermissionOrder
(W{REGEXP("(?i)let")} W{REGEXP("(?i)him")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounPermissionOrder", "level"="C1")}; 
(W{REGEXP("(?i)let")} W{REGEXP("(?i)her")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounPermissionOrder", "level"="C1")}; 
(W{REGEXP("(?i)let")} W{REGEXP("(?i)them")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounPermissionOrder", "level"="C1")}; 

//4.DontLetPronounPermissionOrder
(Dont W{REGEXP("(?i)let")} POS_PRON  POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="DontLetPronounPermissionOrder", "level"="C1")}; 

//5.PointingInFormalContext
(POS{FEATURE("PosValue", "VB")} NC) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="PointingInFormalContext", "level"="C1")}; 
(POS{FEATURE("PosValue", "VB")} POS_ADP NC) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="PointingInFormalContext", "level"="C1")}; 
(POS{FEATURE("PosValue", "VB")} POS_ADV) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="PointingInFormalContext", "level"="C1")}; 

//6.ImperativesAndConditional
(POS{FEATURE("PosValue", "VB")} NC W{REGEXP("(?i)and")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="ImperativesAndConditional", "level"="C1")}; 


//4.SubordinatedClause
//7.NonFiniteAfterIf
(W{REGEXP("(?i)if")} NonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteAfterIf", "level"="C1")}; 

//8.InversionSubordinated
(Should NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="InversionSubordinated", "level"="C1")}; 
(Had NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="InversionSubordinated", "level"="C1")}; 
(Was NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="InversionSubordinated", "level"="C1")}; 

//9.NonFiniteWithEdClausesFocus
(Done PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteWithEdClausesFocus", "level"="C1")}; 
(W{REGEXP("(?i)based")} PrepositionPhrase) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteWithEdClausesFocus", "level"="C1")}; 
(W{REGEXP("(?i)given")} NC W{REGEXP("(?i)explained")}) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteWithEdClausesFocus", "level"="C1")}; 

//10.NotIngClause
(Not Doing) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NotIngClause", "level"="C1")}; 

//5.ConditionalClause
//11.IfPastPerfectModalVerbsImaginedSituationRegret
(W{REGEXP("(?i)if")} NC Had Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfPastPerfectModalVerbsImaginedSituationRegret", "level"="C1")}; 
(NC ModalVerb Have Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfPastPerfectModalVerbsImaginedSituationRegret", "level"="C1")}; 

//12.ElliptedIfClause
(W{REGEXP("(?i)if")} Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="ElliptedIfClause", "level"="C1")}; 

//13.IfShouldFormalPolite
(W{REGEXP("(?i)if")} W{REGEXP("(?i)you")} W{REGEXP("(?i)should")}) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfShouldFormalPolite", "level"="C1")}; 

//14.InvertedConditionalClauseShould
(W{REGEXP("(?i)should")} NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="InvertedConditionalClauseShould", "level"="C1")}; 
(W{REGEXP("(?i)should")} W{REGEXP("(?i)there")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="InvertedConditionalClauseShould", "level"="C1")}; 













//C2********:
    //SCRIPT C2_Level.C2_Nouns;

//1.NounPhrases
//1.ComplexNounPhrasesWithLittleOrNoNoun
(W{REGEXP("(?i)little")} W{REGEXP("(?i)or")} W{REGEXP("(?i)no")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithLittleOrNoNoun", "level"="C2")};
(W{REGEXP("(?i)little")} W{REGEXP("(?i)or")} W{REGEXP("(?i)no")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithLittleOrNoNoun", "level"="C2")};


//SCRIPT C2_Level.C2_Pronouns;

//1.PossessivePronoun
//1.WithThatOFPossessive
(W{REGEXP("(?i)that")} POS_ADJ POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};
(W{REGEXP("(?i)that")} POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};

(W{REGEXP("(?i)that")} POS_ADJ ADJC{CONTAINS(SPECIAL)} POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};
(W{REGEXP("(?i)that")}  ADJC{CONTAINS(SPECIAL)} POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};
(W{REGEXP("(?i)that")} POS_ADJ POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};
(W{REGEXP("(?i)that")} POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};

//2.HersAsSubjectPossessive
(W{REGEXP("(?i)hers")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HersAsSubjectPossessive", "level"="C2")};

//3.HisPossessive
(W{REGEXP("(?i)his")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HisPossessive", "level"="C2")};

//4.OfTheirsHersHisPossessive
(POS_NOUN W{REGEXP("(?i)of")} W{REGEXP("(?i)his")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OfTheirsHersHisPossessive", "level"="C2")};
(POS_NOUN W{REGEXP("(?i)of")} W{REGEXP("(?i)hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OfTheirsHersHisPossessive", "level"="C2")};
(POS_NOUN W{REGEXP("(?i)of")} W{REGEXP("(?i)theirs")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OfTheirsHersHisPossessive", "level"="C2")};

//5.TheirsAsSubject
(W{REGEXP("(?i)theirs")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="TheirsAsSubject", "level"="C2")};



//2.ReflexivePronoun
//6.DiscourseMarkersReflexive
(W{REGEXP("(?i)as")} W{REGEXP("(?i)for")} W{REGEXP("(?i)myself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="DiscourseMarkersReflexive", "level"="C2")};



//3.SubjectObjectPronoun
//7.SubjectCleftConstructionsWithIt
(W{REGEXP("(?i)it")} POS_VERB NC WHWord) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectCleftConstructionsWithIt", "level"="C2")};


//4.QuantityPronoun
//8.ALotAndMuch
(W{REGEXP("(?i)a")} W{REGEXP("(?i)lot")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="ALotAndMuch", "level"="C2")};
(W{REGEXP("(?i)much")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="ALotAndMuch", "level"="C2")};

//9.ManyAreTheNounForFocus
(W{REGEXP("(?i)many")} W{REGEXP("(?i)are")} NC) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="ManyAreTheNounForFocus", "level"="C2")};


//5.SubstitutionPronoun, one, ones, none
//10.TheOnesThatForFocus
(W{REGEXP("(?i)the")} W{REGEXP("(?i)one")} W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="TheOnesThatForFocus", "level"="C2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)ones")} W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="TheOnesThatForFocus", "level"="C2")};


//6.ReciprocalPronoun
//11.EachTheOthersAsObject
(W{REGEXP("(?i)each")}  # W{REGEXP("(?i)the")} W{REGEXP("(?i)other")}) {-> CREATE(GrammarProfile, "subCategory"="ReciprocalPronoun", "superCategory"="Pronoun", "name"="EachTheOthersAsObject", "level"="C2")};
(W{REGEXP("(?i)each")}  # W{REGEXP("(?i)the")} W{REGEXP("(?i)others")}) {-> CREATE(GrammarProfile, "subCategory"="ReciprocalPronoun", "superCategory"="Pronoun", "name"="EachTheOthersAsObject", "level"="C2")};


//SCRIPT C2_Level.C2_Adjectives;

//1.CombiningAdjective
//1.CombiningMultipleAdjectives
(AdjectivePhrase POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningMultipleAdjectives", "level"="C2")};
(POS_ADJ COMMA POS_ADJ COMMA POS_ADJ{CONTAINS(SPECIAL)} COMMA POS_ADJ{CONTAINS(SPECIAL)} W{REGEXP("(?i)and")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningMultipleAdjectives", "level"="C2")};

//2.FocusCombining
(POS_ADJ COMMA POS_ADJ{CONTAINS(SPECIAL)} COMMA POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="FocusCombining", "level"="C2")};
(W{REGEXP("(?i)fat")} COMMA POS_ADJ W{REGEXP("(?i)and")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="FocusCombining", "level"="C2")};


//2.ComparativesAdjective
//3.WithNoOrNotAny
(W{REGEXP("(?i)no")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithNoOrNotAny", "level"="C2")};
(W{REGEXP("(?i)not")} W{REGEXP("(?i)any")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithNoOrNotAny", "level"="C2")};

//4.WithNotThatMuch
(W{REGEXP("(?i)not")} W{REGEXP("(?i)that")} W{REGEXP("(?i)much")}  Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithNotThatMuch", "level"="C2")};



//3.ModifyingAdjective
//5.ComparisonModifying
(W{REGEXP("(?i)as")} # W{REGEXP("(?i)as")}) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="ComparisonModifying", "level"="C2")};
(W{REGEXP("(?i)so")} # W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="ComparisonModifying", "level"="C2")};


//4.PositionAdjective
//6.DegreeAdjectivesBeforeNouns
(DegreeAdj POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="DegreeAdjectivesBeforeNouns", "level"="C2")};
(DegreeAdj POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="DegreeAdjectivesBeforeNouns", "level"="C2")};


//5.SuperlativesAdjective
//7.SlightestFaintest
(W{REGEXP("(?i)the")} W{REGEXP("(?i)slightest")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="SlightestFaintest", "level"="C2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)faintest")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="SlightestFaintest", "level"="C2")};


//SCRIPT C2_Level.C2_Prepositions;


//SCRIPT C2_Level.C2_Adverbs;

//1.AdverbsAsModifiers
//1.DistancingAdverbAsModifiers
(Distancing) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="DistancingAdverbAsModifiers", "level"="C2")};

//2.PositionAdverb
//2.FrontPositionInversionWithHardly
(W{REGEXP("(?i)hardly")} POS_VERB NC) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="FrontPositionInversionWithHardly", "level"="C2")};


//3.MidPositionDistancing
(Distancing) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="MidPositionDistancing", "level"="C2")};


//3.AdverbPhrases - form
//4.PreAndPostModifiedAdverbs
(W{REGEXP("(?i)almost")} W{REGEXP("(?i)exclusively")}) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="PreAndPostModifiedAdverbs", "level"="C2")};
(W{REGEXP("(?i)so")} W{REGEXP("(?i)completely")}) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="PreAndPostModifiedAdverbs", "level"="C2")};


//SCRIPT C2_Level.C2_Determiners;

//1.DemonstrativesDeterminer
//1.ThisInNarrative
(W{REGEXP("(?i)this")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisInNarrative", "level"="C2")};
(W{REGEXP("(?i)this")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisInNarrative", "level"="C2")};

//2.ThisWithNounAndPossessive
(W{REGEXP("(?i)this")} POS_ADJ POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisWithNounAndPossessive", "level"="C2")};
(W{REGEXP("(?i)this")} POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisWithNounAndPossessive", "level"="C2")};

//3.EmotionalDistance
(W{REGEXP("(?i)that|those")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="EmotionalDistance", "level"="C2")};


//2.PossessivesDeterminer
//4.SingularNounEndingInSApostrophe
(POS_NOUN POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="SingularNounEndingInSApostrophe", "level"="C2")};

//5.SWithElliptedNoun
(POS_NOUN POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="SWithElliptedNoun", "level"="C2")};

//6.SS
(POS_NOUN POS{FEATURE("PosValue", "POS")} POS_NOUN POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="SS", "level"="C2")};

//3.Quantity
//7.ManyAWithSingularNounsForFocus
(W{REGEXP("(?i)many")} W{REGEXP("(?i)a")} POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="ManyAWithSingularNounsForFocus", "level"="C2")};
(W{REGEXP("(?i)many")} W{REGEXP("(?i)an")} POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="ManyAWithSingularNounsForFocus", "level"="C2")};


//SCRIPT C2_Level.C2_Modality;

//1.Can
//1.ReflectionsCan
(W{REGEXP("(?i)how")} W{REGEXP("(?i)can")}) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="ReflectionsCan", "level"="C2")};


//2.Dare
//2.NegativeWithDidntDare
(Didnt W{REGEXP("(?i)dare")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="NegativeWithDidntDare", "level"="C2")};


//3.ExpressionsWithBe
//3.NegativeBe
(Lemma{FEATURE("value", "be")} Not POS_ADJ ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="NegativeBe", "level"="C2")};
(Lemma{FEATURE("value", "be")} Not W{REGEXP("(?i)obliged")}  ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="NegativeBe", "level"="C2")};

//4.BeAdjectiveNotTo
(Lemma{FEATURE("value", "be")}  POS_ADJ  Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAdjectiveNotTo", "level"="C2")};
(Lemma{FEATURE("value", "be")}  W{REGEXP("(?i)obliged")}  Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAdjectiveNotTo", "level"="C2")};
(Lemma{FEATURE("value", "be")}  W{REGEXP("(?i)bound")}  Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAdjectiveNotTo", "level"="C2")};
(Lemma{FEATURE("value", "be")}  POS_ADV W{REGEXP("(?i)certain")} Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAdjectiveNotTo", "level"="C2")};



//4.HaveGotTo
//5.PastHaveTo
(Have W{REGEXP("(?i)to")} Have Done) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="PastHaveTo", "level"="C2")};

//6.DeductionsAndConclusionsHaveTo
(Have W{REGEXP("(?i)to")}) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="DeductionsAndConclusionsHaveTo", "level"="C2")};
(Have W{REGEXP("(?i)got")} W{REGEXP("(?i)to")}) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="DeductionsAndConclusionsHaveTo", "level"="C2")};

//7.ObligationHaveTo
(Have W{REGEXP("(?i)to")} Have Done) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="ObligationHaveTo", "level"="C2")};


//5.May
//8.MayAsWell
(W{REGEXP("(?i)may")} W{REGEXP("(?i)as")} W{REGEXP("(?i)well")}) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="MayAsWell", "level"="C2")};

//9.ConcessionMay
(W{REGEXP("(?i)however")} POS_ADJ W{REGEXP("(?i)it")} May POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="ConcessionMay", "level"="C2")};
(W{REGEXP("(?i)whatever")} POS_NOUN? W{REGEXP("(?i)it")} May POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="ConcessionMay", "level"="C2")};
(W{REGEXP("(?i)whoever")}  W{REGEXP("(?i)it")} May POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="ConcessionMay", "level"="C2")};


//10.HedgingMay
(W{REGEXP("(?i)it")}  May Be Done) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="HedgingMay", "level"="C2")};


//6.Might
//11.EmphasisMight
(W{REGEXP("(?i)try")} W{REGEXP("(?i)as")} W{REGEXP("(?i)I")} W{REGEXP("(?i)might")}) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="EmphasisMight", "level"="C2")};

//12.MightAsWell
(W{REGEXP("(?i)might")} W{REGEXP("(?i)as")} W{REGEXP("(?i)well")}) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="MightAsWell", "level"="C2")};


//7.Must
//13.EllipsisMust
(Must Have Done) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="EllipsisMust", "level"="C2")};

//14.InversionMust
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} Must NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="InversionMust", "level"="C2")};
(W{REGEXP("(?i)never")} Must NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="InversionMust", "level"="C2")};
(W{REGEXP("(?i)nor")} Must NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="InversionMust", "level"="C2")};

//15.PastNegativeMust
(Lemma{FEATURE("value", "must")} Not Have W{REGEXP("(?i)been")}) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="PastNegativeMust", "level"="C2")};

//16.WithAdverbsMust
(Must POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="WithAdverbsMust", "level"="C2")};



//8.Need
//17.QuestionsNeed
(Need NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Need", "superCategory"="Modality", "name"="QuestionsNeed", "level"="C2")};

//18.InDiscussionNeed
(Need NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Need", "superCategory"="Modality", "name"="InDiscussionNeed", "level"="C2")};


//9.Ought
//19.ContractedFormNegativeOught
(W{REGEXP("(?i)oughtn")} SPECIAL{REGEXP("'")} W{REGEXP("t")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="ContractedFormNegativeOught", "level"="C2")};

//20.NegativeOught
(Lemma{FEATURE("value", "ought")} Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="NegativeOught", "level"="C2")};

//21.QuestionsNegativeOught
(Lemma{FEATURE("value", "ought")} NC Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="QuestionsNegativeOught", "level"="C2")};



//10.Shall
//22.AfterIfClausesShall
(W{REGEXP("(?i)if")} NC POS_VERB # NC Shall POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="AfterIfClausesShall", "level"="C2")};

//23.PredictionsShall
(Shall) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="PredictionsShall", "level"="C2")};



//11.UsedTo
//24.WithAsPronounNarrative
(W{REGEXP("(?i)as")} POS_PRON Used ToDo) {-> CREATE(GrammarProfile, "subCategory"="UsedTo", "superCategory"="Modality", "name"="WithAsPronounNarrative", "level"="C2")};

//25.UsedNotTo
(W{REGEXP("(?i)used")} Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="UsedTo", "superCategory"="Modality", "name"="UsedNotTo", "level"="C2")};


//12.Will
//26.WillfulnessOrDisapproval
(Will) {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="WillfulnessOrDisapproval", "level"="C2")};


//13.Would
//27.WithAdverbsWould
(Would POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="WithAdverbsWould", "level"="C2")};

//14.Adverbs
//28.ResponseTokens
(W{REGEXP("(?i)definitely")}) {-> CREATE(GrammarProfile, "subCategory"="Adverbs", "superCategory"="Modality", "name"="ResponseTokens", "level"="C2")};

//15.Could
//29.SpeculationCould
(Lemma{FEATURE("value", "could")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="SpeculationCould", "level"="C2")};


//SCRIPT C2_Level.C2_Conjunctions;

//1.CoordinatingConjunction
//1.NeitherCoordinating
(W{REGEXP("(?i)neither|nor")} Do) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="NeitherCoordinating", "level"="C2")};
(W{REGEXP("(?i)neither|nor")} Be) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="NeitherCoordinating", "level"="C2")};

//2.AndYetConcessive
(W{REGEXP("(?i)and")} W{REGEXP("(?i)yet")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="AndYetConcessive", "level"="C2")};


//2.Subordinating
//3.InThat
(W{REGEXP("(?i)in")} W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="SubordinatingConjunction", "superCategory"="Conjunction", "name"="InThat", "level"="C2")};



//SCRIPT C2_Level.C2_DiscourseMarkers;


//SCRIPT C2_Level.C2_Focus;

//1.Focus
//1.NotANoun
(Not W{REGEXP("(?i)a")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="NotANoun", "level"="C2")};

//2.WHCleftClause
(W{REGEXP("(?i)how")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WHCleftClause", "level"="C2")};
(W{REGEXP("(?i)why")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WHCleftClause", "level"="C2")};
(W{REGEXP("(?i)where")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WHCleftClause", "level"="C2")};

//3.ThePremodifierThingFactIsThat
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)thing")} PrepositionPhrase? Be (W{REGEXP("(?i)that")})?) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ThePremodifierThingFactIsThat", "level"="C2")};
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)fact")} PrepositionPhrase? Be (W{REGEXP("(?i)that")})?) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ThePremodifierThingFactIsThat", "level"="C2")};
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)point")} PrepositionPhrase? Be (W{REGEXP("(?i)that")})?) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ThePremodifierThingFactIsThat", "level"="C2")};
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)problem")} PrepositionPhrase? Be (W{REGEXP("(?i)that")})?) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ThePremodifierThingFactIsThat", "level"="C2")};
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)reason")} PrepositionPhrase? Be (W{REGEXP("(?i)that")})?) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ThePremodifierThingFactIsThat", "level"="C2")};

//4.ItCleft
(W{REGEXP("(?i)it")} Be NC WHWord) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ItCleft", "level"="C2")};

//5.MultipleFixedExpression
(W{REGEXP("(?i)but")} W{REGEXP("(?i)all")} W{REGEXP("(?i)of")}  W{REGEXP("(?i)a")} W{REGEXP("(?i)sudden")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="MultipleFixedExpression", "level"="C2")};
(W{REGEXP("(?i)all")} W{REGEXP("(?i)in")} W{REGEXP("(?i)all")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="MultipleFixedExpression", "level"="C2")};
(W{REGEXP("(?i)what")} W{REGEXP("(?i)is")} W{REGEXP("(?i)more")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="MultipleFixedExpression", "level"="C2")};


//SCRIPT C2_Level.C2_Negation;

//1.Negation
//1.NotANounEmphasis
(Not W{REGEXP("(?i)a")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotANounEmphasis", "level"="C2")};

//2.DontYouWarning
(Dont W{REGEXP("(?i)you")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="DontYouWarning", "level"="C2")};

//3.NeitherNegation
(W{REGEXP("(?i)neither|nor")} Do) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NeitherNegation", "level"="C2")};
(W{REGEXP("(?i)neither|nor")} Be) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NeitherNegation", "level"="C2")};

//4.InTheLeastEmphasis
(Not # W{REGEXP("(?i)in")} W{REGEXP("(?i)the")} W{REGEXP("(?i)least")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="InTheLeastEmphasis", "level"="C2")};


//SCRIPT C2_Level.C2_Questions;

//1.AlternativesQuestion
//1.Ellipsis
(W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="Ellipsis", "level"="C2")};

//2.YesNoQuestion
//2.NegativeQuestionsWithNotEmphasis
(POS_VERB NC Not) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="NegativeQuestionsWithNotEmphasis", "level"="C2")};


//SCRIPT C2_Level.C2_Verbs;

//1.PhrasalPrepositional
//1.VerbDirectObjectParticlePrepositionObject
(POS_VERB NC Particle POS_ADP NC) {-> CREATE(GrammarProfile, "subCategory"="PhrasalPrepositional", "superCategory"="Verb", "name"="VerbDirectObjectParticlePrepositionObject", "level"="C2")};

//2.PatternsWithToAndIng
//2.WouldHateTo
(Would W{REGEXP("(?i)hate")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="WouldHateTo", "level"="C2")};


//SCRIPT C2_Level.C2_Present;

//1.PresentContinuous
//1.WithAdverbsOfIndefiniteFrequencyPresentContinuous
(Is W{REGEXP("(?i)persistently")} Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="WithAdverbsOfIndefiniteFrequencyPresentContinuous", "level"="C2")};
(Is W{REGEXP("(?i)permanently")} Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="WithAdverbsOfIndefiniteFrequencyPresentContinuous", "level"="C2")};


//2.PolitenessPresentContinuous
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="PolitenessPresentContinuous", "level"="C2")};


//SCRIPT C2_Level.C2_Past;

//1.PastContinuous
//1.UndesiredEventsPastContinuous
(Was W{REGEXP("(?i)always")} Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="UndesiredEventsPastContinuous", "level"="C2")};
(Was W{REGEXP("(?i)constantly")} Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="UndesiredEventsPastContinuous", "level"="C2")};


//2.PastPerfectContinuous
//2.QuestionsPastPerfectContinuous
(Had NC BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="QuestionsPastPerfectContinuous", "level"="C2")};


//3.PastPerfectSimple
//3.AfterIfOnlyImaginedPast
(W{REGEXP("(?i)if")} W{REGEXP("(?i)only")} NC Hadnt Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="AfterIfOnlyImaginedPast", "level"="C2")};

//4.FixedExpressionHadItNotBeenForIFItHadntBeenFor
(W{REGEXP("(?i)had")} W{REGEXP("(?i)it")} W{REGEXP("(?i)not")} W{REGEXP("(?i)been")} W{REGEXP("(?i)for")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="FixedExpressionHadItNotBeenForIFItHadntBeenFor", "level"="C2")};
(W{REGEXP("(?i)if")} W{REGEXP("(?i)it")} W{REGEXP("(?i)hadn't")} W{REGEXP("(?i)been")} W{REGEXP("(?i)for")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="FixedExpressionHadItNotBeenForIFItHadntBeenFor", "level"="C2")};

//5.InversionWithHardlyWhen
(W{REGEXP("(?i)hardly")} Had NC Done # W{REGEXP("(?i)when")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionWithHardlyWhen", "level"="C2")};
(W{REGEXP("(?i)hardly")} Had NC W{REGEXP("(?i)spoken")} # W{REGEXP("(?i)when")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionWithHardlyWhen", "level"="C2")};
(W{REGEXP("(?i)hardly")} Had NC W{REGEXP("(?i)taken")} # W{REGEXP("(?i)when")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionWithHardlyWhen", "level"="C2")};


//4.PresentPerfectContinuous
//6.InversionNotOnlyBut
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} Has NC BeenDoing # W{REGEXP("(?i)but")} ) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectContinuous", "superCategory"="Past", "name"="InversionNotOnlyBut", "level"="C2")};


//5.PresentPerfectSimple
//7.Newsworthy
(Has Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="Newsworthy", "level"="C2")};


//SCRIPT C2_Level.C2_Future;

//1.FutureInThePast
//1.BeDueTo
(Was W{REGEXP("(?i)due")} ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureInThePast", "superCategory"="Future", "name"="BeDueTo", "level"="C2")};


//2.FuturePerfectContinuous
//2.AssumptionsFuturePerfectContinuous
(WillShall Have BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectContinuous", "superCategory"="Future", "name"="AssumptionsFuturePerfectContinuous", "level"="C2")};


//3.FuturePerfectSimple 
//3.QuestionsFuturePerfectSimple
(WillShall NC Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="QuestionsFuturePerfectSimple", "level"="C2")};


//4.FutureWithWillAndShall
//4.LongTermIntentionsWithShall
(Shall) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="LongTermIntentionsWithShall", "level"="C2")};

//5.PredictionsWithShall
(Shall) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="PredictionsWithShall", "level"="C2")};



//5.FutureWithBeGoingTo
//6.WithAdverbsBeGoingTo
(Be Going W{REGEXP("(?i)to")} POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="WithAdverbsBeGoingTo", "level"="C2")};


//6.PresentSimpleForFutureUse
//7.InversionWithOnlyWhen
(W{REGEXP("(?i)only")} W{REGEXP("(?i)when")} # Will) {-> CREATE(GrammarProfile, "subCategory"="PresentSimpleForFutureUse", "superCategory"="Future", "name"="InversionWithOnlyWhen", "level"="C2")};


//SCRIPT C2_Level.C2_Passives;

//1.Passives: form
//1.NonFinitePerfectClauses
(W{REGEXP("(?i)having")} BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="NonFinitePerfectClauses", "level"="C2")};
(Not W{REGEXP("(?i)having")} BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="NonFinitePerfectClauses", "level"="C2")};

//2.NonFinitePerfectComplements
(Preposition W{REGEXP("(?i)having")} BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="NonFinitePerfectComplements", "level"="C2")};


//2.GetAndHave
//3.HaveObjectInfinitive
(Have NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="GetAndHave", "superCategory"="Passive", "name"="HaveObjectInfinitive", "level"="C2")};
(Have POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="GetAndHave", "superCategory"="Passive", "name"="HaveObjectInfinitive", "level"="C2")};



//SCRIPT C2_Level.C2_ReportedSpeech;

//SCRIPT C2_Level.C2_Clauses;

//1.ComparativesClause
//1.SoAsToFormal
(W{REGEXP("(?i)so")} POS_ADJ W{REGEXP("(?i)as")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SoAsToFormal", "level"="C2")}; 

//2.AsIfNonFiniteClause
(W{REGEXP("(?i)as")} W{REGEXP("(?i)if")} NonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="AsIfNonFiniteClause", "level"="C2")}; 

//2.CoordinatedClause
//3.NegativeClauseNorFocus
(Not # W{REGEXP("(?i)nor")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="NegativeClauseNorFocus", "level"="C2")}; 
(W{REGEXP("(?i)never")} # W{REGEXP("(?i)nor")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="NegativeClauseNorFocus", "level"="C2")}; 


//3.ImperativesClause
//4.LetThirdPersonPronounDevolcingResponsibility
(W{REGEXP("(?i)let")} W{REGEXP("(?i)him")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounDevolcingResponsibility", "level"="C2")}; 
(W{REGEXP("(?i)let")} W{REGEXP("(?i)her")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounDevolcingResponsibility", "level"="C2")}; 
(W{REGEXP("(?i)let")} W{REGEXP("(?i)them")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounDevolcingResponsibility", "level"="C2")}; 

//5.DontYou
(Dont W{REGEXP("(?i)you")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="DontYou", "level"="C2")}; 


//4.PhrasesExclamationsClause
//6.HowClause
(W{REGEXP("(?i)how")} NC POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PhrasesExclamationsClause", "superCategory"="Clause", "name"="HowClause", "level"="C2")}; 
(W{REGEXP("(?i)how")} NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PhrasesExclamationsClause", "superCategory"="Clause", "name"="HowClause", "level"="C2")}; 

//7.HowAdverbClause
(W{REGEXP("(?i)how")} POS_ADV NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PhrasesExclamationsClause", "superCategory"="Clause", "name"="HowAdverbClause", "level"="C2")}; 


//5.SubordinatedClause
//8.NonFiniteAfterAlthoughThough
(W{REGEXP("(?i)although")} NonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteAfterAlthoughThough", "level"="C2")}; 
(W{REGEXP("(?i)though")} NonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteAfterAlthoughThough", "level"="C2")}; 
(W{REGEXP("(?i)although")} W{REGEXP("(?i)married")}) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteAfterAlthoughThough", "level"="C2")}; 
(W{REGEXP("(?i)though")} W{REGEXP("(?i)disappointed")}) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteAfterAlthoughThough", "level"="C2")}; 

//9.WerePronounToInfinitiveFormal
(W{REGEXP("(?i)were")} POS_PRON ToDo) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="WerePronounToInfinitiveFormal", "level"="C2")}; 


//6.Conditional
//10.InvertedShouldFuturePossibleOutcomeFormalPolite
(Should NC POS_VERB # NC Would POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="InvertedShouldFuturePossibleOutcomeFormalPolite", "level"="C2")}; 

//11.InvertedPastPerfectImaginedPast (????).
(Had NC Done # NC ModalVerb Have Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="InvertedPastPerfectImaginedPast", "level"="C2")}; 

//12.InvertedWereToInfinitiveFormal
(W{REGEXP("(?i)were")} NC ToDo) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="InvertedWereToInfinitiveFormal", "level"="C2")}; 

//13.SubordinatingConjunctionsConditions
(Conjunction) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="SubordinatingConjunctionsConditions", "level"="C2")}; 

//14.WereItNotForFormal
(W{REGEXP("(?i)were")} W{REGEXP("(?i)it")} W{REGEXP("(?i)not")} W{REGEXP("(?i)for")} NC) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="WereItNotForFormal", "level"="C2")}; 

//15.IfItWereNotForFormal (????)
(W{REGEXP("(?i)if")} W{REGEXP("(?i)it")} W{REGEXP("(?i)weren")} SPECIAL{REGEXP("'")} W{REGEXP("t")} W{REGEXP("(?i)for")} NC) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfItWereNotForFormal", "level"="C2")}; 

//16.IfItWereToInfinitiveFormFormal
(W{REGEXP("(?i)if")} W{REGEXP("(?i)it")} W{REGEXP("(?i)were")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfItWereToInfinitiveFormFormal", "level"="C2")}; 

//17.WhetherOrNotFormal
(W{REGEXP("(?i)whether")} W{REGEXP("(?i)or")} W{REGEXP("(?i)not")}) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="WhetherOrNotFormal", "level"="C2")}; 
