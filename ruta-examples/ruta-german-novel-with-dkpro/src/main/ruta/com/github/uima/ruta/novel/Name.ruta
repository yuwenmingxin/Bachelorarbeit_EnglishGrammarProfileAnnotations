// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

PACKAGE com.github.uima.ruta.novel;

IMPORT PACKAGE de.tudarmstadt.ukp.dkpro.core.api.lexmorph.type.pos FROM desc.type.POS;
IMPORT de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Lemma FROM desc.type.LexicalUnits;

TYPESYSTEM com.github.uima.ruta.novel.DirectSpeechRutaTypeSystem;

WORDLIST ObjectWordList = 'wordlists/german_novel/ObjectWords.txt';
WORDLIST VerbList = 'wordlists/german_novel/Verbs.txt';
WORDLIST dictionary = 'wordlists/german_novel.mtwl';

STRINGLIST AddNames;
STRINGLIST FirstNames;
STRINGLIST LastNames;
STRINGLIST PersNames;
STRING Match;

DECLARE PersName, AddName, FirstName, LastName, Animal,
	RelativesTitle, GeneralTitle, MilitaryTitle, NobleTitle,
	Job, BodyPart, IMPhrase, NeutralArticle;



ADDRETAINTYPE(SPACE);
TRIE("german_novel/Animals.txt" = Animal,
    "german_novel/FirstNames.txt" = FirstName,
    "german_novel/GeneralTitles.txt" = GeneralTitle,
    "german_novel/IMPhrases.txt" = IMPhrase,
    "german_novel/Jobs.txt" = Job,
    "german_novel/MilitaryTitles.txt" = MilitaryTitle,
    "german_novel/NobleTitles.txt" = NobleTitle,
    "german_novel/RelativesTitles.txt" = RelativesTitle,
     "german_novel/NeutralArticle.txt" = NeutralArticle,
    dictionary, false, 0, false, 0, ".,-/");
REMOVERETAINTYPE(SPACE);

// first names

// titles followed by unknown first name
(RelativesTitle|Animal) POS_NOUN{-PARTOF(FirstName), -PARTOF(SPECIAL)
    -> MARK(FirstName), MATCHEDTEXT(Match), ADD(FirstNames, Match)};

// also store first names with 's' postfix
FirstName{-> MATCHEDTEXT(Match), ADD(FirstNames, Match + "s")};

// Alle Vornamen in der Liste FirstNames markieren
POS_NOUN{-PARTOF(FirstName), INLIST(FirstNames) -> MARK(FirstName)};

// Vorname + Vorname = Vorname
FirstName{-> SHIFT(FirstName, 1, 2)} FirstName{-> UNMARK(FirstName)};


//-------------------------------------- NACHNAMEN ----------------------------------------------\\

// Vornamen +  CW (-> Nachname)
CW{INLIST(FirstNames)} "von"? CW{-PARTOF(FirstName), -PARTOF(LastName), -PARTOF(POS_ADP)
    -> MARK(LastName, 2, 3), MATCHEDTEXT(Match), ADD(LastNames, Match)};

// Titel, nach denen wahrscheinlich ein Nachname kommt
(GeneralTitle|MilitaryTitle|NobleTitle|Job) "von"? CW{-PARTOF(GeneralTitle), -PARTOF(Job),
	-PARTOF(NobleTitle), -PARTOF(MilitaryTitle), -PARTOF(RelativesTitle), -PARTOF(FirstName),
	-PARTOF(LastName) -> MARK(LastName, 2, 3), MATCHEDTEXT(Match), ADD(LastNames, Match)};

// Nachnamen, die mit "s" enden speichern
LastName{-> MATCHEDTEXT(Match), ADD(LastNames, Match + "s")};

// Markieren der Namen in LastName
POS_NOUN{-PARTOF(FirstName), -PARTOF(LastName), INLIST(LastNames) -> MARK(LastName)};


//-------------------------------------- ADDNAMEN -----------------------------------------------\\

// Verschiedene Titel zusammenfassen
(Animal|RelativesTitle|GeneralTitle|MilitaryTitle|NobleTitle|Job)
{-> MARK(AddName), MATCHEDTEXT(Match), ADD(AddNames, Match)};

// Alle Zusatztitel in der Liste AddNames markieren
POS_NOUN{-PARTOF(AddName), INLIST(AddNames, Lemma.value) -> MARK(AddName)};


//-------------------------------------- PERSONEN -----------------------------------------------\\

// AddName + FirstName + LastName = PersName
(AddName* @FirstName LastName*){-PARTOF(PersName) -> MARK(PersName)};
(AddName* FirstName? @LastName){-PARTOF(PersName) -> MARK(PersName)};

// Sprecher nach direkter Rede als Person markieren
DirectSpeech COMMA? POS_VERB{INLIST(VerbList, Lemma.value)} POS_DET? CW+{-PARTOF(PersName)
    -> MARK(PersName), MATCHEDTEXT(Match), ADD(PersNames, Match)};

// Alle Personen in der Liste PersNames markieren
POS_NOUN{-PARTOF(PersName), INLIST(PersNames, Lemma.value) -> MARK(PersName)};


//-------------------------------------- KORREKTUR ----------------------------------------------\\

// Eigennamen, die nicht als Vornamen oder Nachnamen erkannt wurden
Document{-> CLEAR(FirstNames)};
DirectSpeech COMMA? POS_VERB{INLIST(VerbList, Lemma.value)} CW+{-PARTOF(FirstName), -PARTOF(LastName),
-PARTOF(AddName) -> MARK(FirstName), MATCHEDTEXT(Match), ADD(FirstNames, Match)};

// Eindeutige Phrasen nach denen ein Name kommt
IMPhrase CW{-PARTOF(FirstName) -> MARK(FirstName), MATCHEDTEXT(Match),
ADD(FirstNames, Match, Match + "s")};

// Alle Vornamen in der Liste FirstNames markieren
POS_NOUN{-PARTOF(FirstName), INLIST(FirstNames) -> MARK(FirstName)};
FirstName{-PARTOF(PersName) -> MARK(PersName)};

NeutralArticle pn:PersName{IS(FirstName) -> UNMARK(pn)};
