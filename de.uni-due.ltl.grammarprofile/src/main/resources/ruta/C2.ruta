TYPESYSTEM ProjectTypeSystem;

SCRIPT GrammarBuilder;
Document{-> CALL(GrammarBuilder)};



//C2********:
//SCRIPT C2_Level.C2_Nouns;

//1.NounPhrases
//1.ComplexNounPhrasesWithLittleOrNoNoun
(W{REGEXP("(?i)little")} W{REGEXP("(?i)or")} W{REGEXP("(?i)no")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithLittleOrNoNoun", "level"="C2")};
(W{REGEXP("(?i)little")} W{REGEXP("(?i)or")} W{REGEXP("(?i)no")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="NounPhrases", "superCategory"="Noun", "name"="ComplexNounPhrasesWithLittleOrNoNoun", "level"="C2")};


//SCRIPT C2_Level.C2_Pronouns;

//1.PossessivePronoun
//1.WithThatOFPossessive
(W{REGEXP("(?i)that")} POS_ADJ POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};
(W{REGEXP("(?i)that")} POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};

(W{REGEXP("(?i)that")} POS_ADJ ADJC{CONTAINS(SPECIAL)} POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};
(W{REGEXP("(?i)that")}  ADJC{CONTAINS(SPECIAL)} POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};
(W{REGEXP("(?i)that")} POS_ADJ POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};
(W{REGEXP("(?i)that")} POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="WithThatOFPossessive", "level"="C2")};

//2.HersAsSubjectPossessive
(W{REGEXP("(?i)hers")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HersAsSubjectPossessive", "level"="C2")};

//3.HisPossessive
(W{REGEXP("(?i)his")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="HisPossessive", "level"="C2")};

//4.OfTheirsHersHisPossessive
(POS_NOUN W{REGEXP("(?i)of")} W{REGEXP("(?i)his")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OfTheirsHersHisPossessive", "level"="C2")};
(POS_NOUN W{REGEXP("(?i)of")} W{REGEXP("(?i)hers")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OfTheirsHersHisPossessive", "level"="C2")};
(POS_NOUN W{REGEXP("(?i)of")} W{REGEXP("(?i)theirs")}) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="OfTheirsHersHisPossessive", "level"="C2")};

//5.TheirsAsSubject
(W{REGEXP("(?i)theirs")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PossessivePronoun", "superCategory"="Pronoun", "name"="TheirsAsSubject", "level"="C2")};



//2.ReflexivePronoun
//6.DiscourseMarkersReflexive
(W{REGEXP("(?i)as")} W{REGEXP("(?i)for")} W{REGEXP("(?i)myself")}) {-> CREATE(GrammarProfile, "subCategory"="ReflexivePronoun", "superCategory"="Pronoun", "name"="DiscourseMarkersReflexive", "level"="C2")};



//3.SubjectObjectPronoun
//7.SubjectCleftConstructionsWithIt
(W{REGEXP("(?i)it")} POS_VERB NC WHWord) {-> CREATE(GrammarProfile, "subCategory"="SubjectObjectPronoun", "superCategory"="Pronoun", "name"="SubjectCleftConstructionsWithIt", "level"="C2")};


//4.QuantityPronoun
//8.ALotAndMuch
(W{REGEXP("(?i)a")} W{REGEXP("(?i)lot")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="ALotAndMuch", "level"="C2")};
(W{REGEXP("(?i)much")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="ALotAndMuch", "level"="C2")};

//9.ManyAreTheNounForFocus
(W{REGEXP("(?i)many")} W{REGEXP("(?i)are")} NC) {-> CREATE(GrammarProfile, "subCategory"="QuantityPronoun", "superCategory"="Pronoun", "name"="ManyAreTheNounForFocus", "level"="C2")};


//5.SubstitutionPronoun, one, ones, none
//10.TheOnesThatForFocus
(W{REGEXP("(?i)the")} W{REGEXP("(?i)one")} W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="TheOnesThatForFocus", "level"="C2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)ones")} W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="SubstitutionPronoun", "superCategory"="Pronoun", "name"="TheOnesThatForFocus", "level"="C2")};


//6.ReciprocalPronoun
//11.EachTheOthersAsObject
(W{REGEXP("(?i)each")}  # W{REGEXP("(?i)the")} W{REGEXP("(?i)other")}) {-> CREATE(GrammarProfile, "subCategory"="ReciprocalPronoun", "superCategory"="Pronoun", "name"="EachTheOthersAsObject", "level"="C2")};
(W{REGEXP("(?i)each")}  # W{REGEXP("(?i)the")} W{REGEXP("(?i)others")}) {-> CREATE(GrammarProfile, "subCategory"="ReciprocalPronoun", "superCategory"="Pronoun", "name"="EachTheOthersAsObject", "level"="C2")};


//SCRIPT C2_Level.C2_Adjectives;

//1.CombiningAdjective
//1.CombiningMultipleAdjectives
(AdjectivePhrase POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningMultipleAdjectives", "level"="C2")};
(POS_ADJ COMMA POS_ADJ COMMA POS_ADJ{CONTAINS(SPECIAL)} COMMA POS_ADJ{CONTAINS(SPECIAL)} W{REGEXP("(?i)and")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="CombiningMultipleAdjectives", "level"="C2")};

//2.FocusCombining
(POS_ADJ COMMA POS_ADJ{CONTAINS(SPECIAL)} COMMA POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="FocusCombining", "level"="C2")};
(W{REGEXP("(?i)fat")} COMMA POS_ADJ W{REGEXP("(?i)and")} POS_ADJ) {-> CREATE(GrammarProfile, "subCategory"="CombiningAdjective", "superCategory"="Adjective", "name"="FocusCombining", "level"="C2")};


//2.ComparativesAdjective
//3.WithNoOrNotAny
(W{REGEXP("(?i)no")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithNoOrNotAny", "level"="C2")};
(W{REGEXP("(?i)not")} W{REGEXP("(?i)any")} Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithNoOrNotAny", "level"="C2")};

//4.WithNotThatMuch
(W{REGEXP("(?i)not")} W{REGEXP("(?i)that")} W{REGEXP("(?i)much")}  Comparative) {-> CREATE(GrammarProfile, "subCategory"="ComparativesAdjective", "superCategory"="Adjective", "name"="WithNotThatMuch", "level"="C2")};



//3.ModifyingAdjective
//5.ComparisonModifying
(W{REGEXP("(?i)as")} # W{REGEXP("(?i)as")}) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="ComparisonModifying", "level"="C2")};
(W{REGEXP("(?i)so")} # W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="ModifyingAdjective", "superCategory"="Adjective", "name"="ComparisonModifying", "level"="C2")};


//4.PositionAdjective
//6.DegreeAdjectivesBeforeNouns
(DegreeAdj POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="DegreeAdjectivesBeforeNouns", "level"="C2")};
(DegreeAdj POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="PositionAdjective", "superCategory"="Adjective", "name"="DegreeAdjectivesBeforeNouns", "level"="C2")};


//5.SuperlativesAdjective
//7.SlightestFaintest
(W{REGEXP("(?i)the")} W{REGEXP("(?i)slightest")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="SlightestFaintest", "level"="C2")};
(W{REGEXP("(?i)the")} W{REGEXP("(?i)faintest")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="SuperlativesAdjective", "superCategory"="Adjective", "name"="SlightestFaintest", "level"="C2")};


//SCRIPT C2_Level.C2_Prepositions;


//SCRIPT C2_Level.C2_Adverbs;

//1.AdverbsAsModifiers
//1.DistancingAdverbAsModifiers
(Distancing) {-> CREATE(GrammarProfile, "subCategory"="AdverbsAsModifiers", "superCategory"="Adverb", "name"="DistancingAdverbAsModifiers", "level"="C2")};

//2.PositionAdverb
//2.FrontPositionInversionWithHardly
(W{REGEXP("(?i)hardly")} POS_VERB NC) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="FrontPositionInversionWithHardly", "level"="C2")};


//3.MidPositionDistancing
(Distancing) {-> CREATE(GrammarProfile, "subCategory"="PositionAdverb", "superCategory"="Adverb", "name"="MidPositionDistancing", "level"="C2")};


//3.AdverbPhrases - form
//4.PreAndPostModifiedAdverbs
(W{REGEXP("(?i)almost")} W{REGEXP("(?i)exclusively")}) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="PreAndPostModifiedAdverbs", "level"="C2")};
(W{REGEXP("(?i)so")} W{REGEXP("(?i)completely")}) {-> CREATE(GrammarProfile, "subCategory"="AdverbPhrases", "superCategory"="Adverb", "name"="PreAndPostModifiedAdverbs", "level"="C2")};


//SCRIPT C2_Level.C2_Determiners;

//1.DemonstrativesDeterminer
//1.ThisInNarrative
(W{REGEXP("(?i)this")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisInNarrative", "level"="C2")};
(W{REGEXP("(?i)this")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisInNarrative", "level"="C2")};

//2.ThisWithNounAndPossessive
(W{REGEXP("(?i)this")} POS_ADJ POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisWithNounAndPossessive", "level"="C2")};
(W{REGEXP("(?i)this")} POS_NOUN W{REGEXP("(?i)of")} POS{FEATURE("PosValue", "PRP$")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="ThisWithNounAndPossessive", "level"="C2")};

//3.EmotionalDistance
(W{REGEXP("(?i)that|those")}) {-> CREATE(GrammarProfile, "subCategory"="DemonstrativesDeterminer", "superCategory"="Determiner", "name"="EmotionalDistance", "level"="C2")};


//2.PossessivesDeterminer
//4.SingularNounEndingInSApostrophe
(POS_NOUN POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="SingularNounEndingInSApostrophe", "level"="C2")};

//5.SWithElliptedNoun
(POS_NOUN POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="SWithElliptedNoun", "level"="C2")};

//6.SS
(POS_NOUN POS{FEATURE("PosValue", "POS")} POS_NOUN POS{FEATURE("PosValue", "POS")})  {-> CREATE(GrammarProfile, "subCategory"="PossessivesDeterminer", "superCategory"="Determiner", "name"="SS", "level"="C2")};

//3.Quantity
//7.ManyAWithSingularNounsForFocus
(W{REGEXP("(?i)many")} W{REGEXP("(?i)a")} POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="ManyAWithSingularNounsForFocus", "level"="C2")};
(W{REGEXP("(?i)many")} W{REGEXP("(?i)an")} POS_NOUN)  {-> CREATE(GrammarProfile, "subCategory"="QuantityDeterminer", "superCategory"="Determiner", "name"="ManyAWithSingularNounsForFocus", "level"="C2")};


//SCRIPT C2_Level.C2_Modality;

//1.Can
//1.ReflectionsCan
(W{REGEXP("(?i)how")} W{REGEXP("(?i)can")}) {-> CREATE(GrammarProfile, "subCategory"="Can", "superCategory"="Modality", "name"="ReflectionsCan", "level"="C2")};


//2.Dare
//2.NegativeWithDidntDare
(Didnt W{REGEXP("(?i)dare")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Dare", "superCategory"="Modality", "name"="NegativeWithDidntDare", "level"="C2")};


//3.ExpressionsWithBe
//3.NegativeBe
(Lemma{FEATURE("value", "be")} Not POS_ADJ ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="NegativeBe", "level"="C2")};
(Lemma{FEATURE("value", "be")} Not W{REGEXP("(?i)obliged")}  ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="NegativeBe", "level"="C2")};

//4.BeAdjectiveNotTo
(Lemma{FEATURE("value", "be")}  POS_ADJ  Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAdjectiveNotTo", "level"="C2")};
(Lemma{FEATURE("value", "be")}  W{REGEXP("(?i)obliged")}  Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAdjectiveNotTo", "level"="C2")};
(Lemma{FEATURE("value", "be")}  W{REGEXP("(?i)bound")}  Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAdjectiveNotTo", "level"="C2")};
(Lemma{FEATURE("value", "be")}  POS_ADV W{REGEXP("(?i)certain")} Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="ExpressionsWithBe", "superCategory"="Modality", "name"="BeAdjectiveNotTo", "level"="C2")};



//4.HaveGotTo
//5.PastHaveTo
(Have W{REGEXP("(?i)to")} Have Done) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="PastHaveTo", "level"="C2")};

//6.DeductionsAndConclusionsHaveTo
(Have W{REGEXP("(?i)to")}) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="DeductionsAndConclusionsHaveTo", "level"="C2")};
(Have W{REGEXP("(?i)got")} W{REGEXP("(?i)to")}) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="DeductionsAndConclusionsHaveTo", "level"="C2")};

//7.ObligationHaveTo
(Have W{REGEXP("(?i)to")} Have Done) {-> CREATE(GrammarProfile, "subCategory"="HaveGotTo", "superCategory"="Modality", "name"="ObligationHaveTo", "level"="C2")};


//5.May
//8.MayAsWell
(W{REGEXP("(?i)may")} W{REGEXP("(?i)as")} W{REGEXP("(?i)well")}) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="MayAsWell", "level"="C2")};

//9.ConcessionMay
(W{REGEXP("(?i)however")} POS_ADJ W{REGEXP("(?i)it")} May POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="ConcessionMay", "level"="C2")};
(W{REGEXP("(?i)whatever")} POS_NOUN? W{REGEXP("(?i)it")} May POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="ConcessionMay", "level"="C2")};
(W{REGEXP("(?i)whoever")}  W{REGEXP("(?i)it")} May POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="ConcessionMay", "level"="C2")};


//10.HedgingMay
(W{REGEXP("(?i)it")}  May Be Done) {-> CREATE(GrammarProfile, "subCategory"="May", "superCategory"="Modality", "name"="HedgingMay", "level"="C2")};


//6.Might
//11.EmphasisMight
(W{REGEXP("(?i)try")} W{REGEXP("(?i)as")} W{REGEXP("(?i)I")} W{REGEXP("(?i)might")}) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="EmphasisMight", "level"="C2")};

//12.MightAsWell
(W{REGEXP("(?i)might")} W{REGEXP("(?i)as")} W{REGEXP("(?i)well")}) {-> CREATE(GrammarProfile, "subCategory"="Might", "superCategory"="Modality", "name"="MightAsWell", "level"="C2")};


//7.Must
//13.EllipsisMust
(Must Have Done) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="EllipsisMust", "level"="C2")};

//14.InversionMust
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} Must NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="InversionMust", "level"="C2")};
(W{REGEXP("(?i)never")} Must NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="InversionMust", "level"="C2")};
(W{REGEXP("(?i)nor")} Must NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="InversionMust", "level"="C2")};

//15.PastNegativeMust
(Lemma{FEATURE("value", "must")} Not Have W{REGEXP("(?i)been")}) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="PastNegativeMust", "level"="C2")};

//16.WithAdverbsMust
(Must POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Must", "superCategory"="Modality", "name"="WithAdverbsMust", "level"="C2")};



//8.Need
//17.QuestionsNeed
(Need NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Need", "superCategory"="Modality", "name"="QuestionsNeed", "level"="C2")};

//18.InDiscussionNeed
(Need NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Need", "superCategory"="Modality", "name"="InDiscussionNeed", "level"="C2")};


//9.Ought
//19.ContractedFormNegativeOught
(W{REGEXP("(?i)oughtn")} SPECIAL{REGEXP("'")} W{REGEXP("t")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="ContractedFormNegativeOught", "level"="C2")};

//20.NegativeOught
(Lemma{FEATURE("value", "ought")} Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="NegativeOught", "level"="C2")};

//21.QuestionsNegativeOught
(Lemma{FEATURE("value", "ought")} NC Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="Ought", "superCategory"="Modality", "name"="QuestionsNegativeOught", "level"="C2")};



//10.Shall
//22.AfterIfClausesShall
(W{REGEXP("(?i)if")} NC POS_VERB # NC Shall POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="AfterIfClausesShall", "level"="C2")};

//23.PredictionsShall
(Shall) {-> CREATE(GrammarProfile, "subCategory"="Shall", "superCategory"="Modality", "name"="PredictionsShall", "level"="C2")};



//11.UsedTo
//24.WithAsPronounNarrative
(W{REGEXP("(?i)as")} POS_PRON Used ToDo) {-> CREATE(GrammarProfile, "subCategory"="UsedTo", "superCategory"="Modality", "name"="WithAsPronounNarrative", "level"="C2")};

//25.UsedNotTo
(W{REGEXP("(?i)used")} Not ToDo) {-> CREATE(GrammarProfile, "subCategory"="UsedTo", "superCategory"="Modality", "name"="UsedNotTo", "level"="C2")};


//12.Will
//26.WillfulnessOrDisapproval
(Will) {-> CREATE(GrammarProfile, "subCategory"="Will", "superCategory"="Modality", "name"="WillfulnessOrDisapproval", "level"="C2")};


//13.Would
//27.WithAdverbsWould
(Would POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Would", "superCategory"="Modality", "name"="WithAdverbsWould", "level"="C2")};

//14.Adverbs
//28.ResponseTokens
(W{REGEXP("(?i)definitely")}) {-> CREATE(GrammarProfile, "subCategory"="Adverbs", "superCategory"="Modality", "name"="ResponseTokens", "level"="C2")};

//15.Could
//29.SpeculationCould
(Lemma{FEATURE("value", "could")} Not Have Done) {-> CREATE(GrammarProfile, "subCategory"="Could", "superCategory"="Modality", "name"="SpeculationCould", "level"="C2")};


//SCRIPT C2_Level.C2_Conjunctions;

//1.CoordinatingConjunction
//1.NeitherCoordinating
(W{REGEXP("(?i)neither|nor")} Do) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="NeitherCoordinating", "level"="C2")};
(W{REGEXP("(?i)neither|nor")} Be) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="NeitherCoordinating", "level"="C2")};

//2.AndYetConcessive
(W{REGEXP("(?i)and")} W{REGEXP("(?i)yet")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatingConjunction", "superCategory"="Conjunction", "name"="AndYetConcessive", "level"="C2")};


//2.Subordinating
//3.InThat
(W{REGEXP("(?i)in")} W{REGEXP("(?i)that")}) {-> CREATE(GrammarProfile, "subCategory"="SubordinatingConjunction", "superCategory"="Conjunction", "name"="InThat", "level"="C2")};



//SCRIPT C2_Level.C2_DiscourseMarkers;


//SCRIPT C2_Level.C2_Focus;

//1.Focus
//1.NotANoun
(Not W{REGEXP("(?i)a")} POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="NotANoun", "level"="C2")};

//2.WHCleftClause
(W{REGEXP("(?i)how")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WHCleftClause", "level"="C2")};
(W{REGEXP("(?i)why")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WHCleftClause", "level"="C2")};
(W{REGEXP("(?i)where")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="WHCleftClause", "level"="C2")};

//3.ThePremodifierThingFactIsThat
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)thing")} PrepositionPhrase? Be (W{REGEXP("(?i)that")})?) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ThePremodifierThingFactIsThat", "level"="C2")};
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)fact")} PrepositionPhrase? Be (W{REGEXP("(?i)that")})?) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ThePremodifierThingFactIsThat", "level"="C2")};
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)point")} PrepositionPhrase? Be (W{REGEXP("(?i)that")})?) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ThePremodifierThingFactIsThat", "level"="C2")};
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)problem")} PrepositionPhrase? Be (W{REGEXP("(?i)that")})?) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ThePremodifierThingFactIsThat", "level"="C2")};
(W{REGEXP("(?i)the")} POS_ADJ W{REGEXP("(?i)reason")} PrepositionPhrase? Be (W{REGEXP("(?i)that")})?) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ThePremodifierThingFactIsThat", "level"="C2")};

//4.ItCleft
(W{REGEXP("(?i)it")} Be NC WHWord) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="ItCleft", "level"="C2")};

//5.MultipleFixedExpression
(W{REGEXP("(?i)but")} W{REGEXP("(?i)all")} W{REGEXP("(?i)of")}  W{REGEXP("(?i)a")} W{REGEXP("(?i)sudden")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="MultipleFixedExpression", "level"="C2")};
(W{REGEXP("(?i)all")} W{REGEXP("(?i)in")} W{REGEXP("(?i)all")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="MultipleFixedExpression", "level"="C2")};
(W{REGEXP("(?i)what")} W{REGEXP("(?i)is")} W{REGEXP("(?i)more")}) {-> CREATE(GrammarProfile, "subCategory"="Focus", "superCategory"="Focus", "name"="MultipleFixedExpression", "level"="C2")};


//SCRIPT C2_Level.C2_Negation;

//1.Negation
//1.NotANounEmphasis
(Not W{REGEXP("(?i)a")} POS_ADJ POS_NOUN) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NotANounEmphasis", "level"="C2")};

//2.DontYouWarning
(Dont W{REGEXP("(?i)you")} POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="DontYouWarning", "level"="C2")};

//3.NeitherNegation
(W{REGEXP("(?i)neither|nor")} Do) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NeitherNegation", "level"="C2")};
(W{REGEXP("(?i)neither|nor")} Be) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="NeitherNegation", "level"="C2")};

//4.InTheLeastEmphasis
(Not # W{REGEXP("(?i)in")} W{REGEXP("(?i)the")} W{REGEXP("(?i)least")}) {-> CREATE(GrammarProfile, "subCategory"="Negation", "superCategory"="Negation", "name"="InTheLeastEmphasis", "level"="C2")};


//SCRIPT C2_Level.C2_Questions;

//1.AlternativesQuestion
//1.Ellipsis
(W{REGEXP("(?i)or")}) {-> CREATE(GrammarProfile, "subCategory"="AlternativesQuestion", "superCategory"="Question", "name"="Ellipsis", "level"="C2")};

//2.YesNoQuestion
//2.NegativeQuestionsWithNotEmphasis
(POS_VERB NC Not) {-> CREATE(GrammarProfile, "subCategory"="YesNoQuestion", "superCategory"="Question", "name"="NegativeQuestionsWithNotEmphasis", "level"="C2")};


//SCRIPT C2_Level.C2_Verbs;

//1.PhrasalPrepositional
//1.VerbDirectObjectParticlePrepositionObject
(POS_VERB NC Particle POS_ADP NC) {-> CREATE(GrammarProfile, "subCategory"="PhrasalPrepositional", "superCategory"="Verb", "name"="VerbDirectObjectParticlePrepositionObject", "level"="C2")};

//2.PatternsWithToAndIng
//2.WouldHateTo
(Would W{REGEXP("(?i)hate")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="PatternsWithToAndIng", "superCategory"="Verb", "name"="WouldHateTo", "level"="C2")};


//SCRIPT C2_Level.C2_Present;

//1.PresentContinuous
//1.WithAdverbsOfIndefiniteFrequencyPresentContinuous
(Is W{REGEXP("(?i)persistently")} Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="WithAdverbsOfIndefiniteFrequencyPresentContinuous", "level"="C2")};
(Is W{REGEXP("(?i)permanently")} Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="WithAdverbsOfIndefiniteFrequencyPresentContinuous", "level"="C2")};


//2.PolitenessPresentContinuous
(Is Doing) {-> CREATE(GrammarProfile, "subCategory"="PresentContinuous", "superCategory"="Present", "name"="PolitenessPresentContinuous", "level"="C2")};


//SCRIPT C2_Level.C2_Past;

//1.PastContinuous
//1.UndesiredEventsPastContinuous
(Was W{REGEXP("(?i)always")} Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="UndesiredEventsPastContinuous", "level"="C2")};
(Was W{REGEXP("(?i)constantly")} Doing) {-> CREATE(GrammarProfile, "subCategory"="PastContinuous", "superCategory"="Past", "name"="UndesiredEventsPastContinuous", "level"="C2")};


//2.PastPerfectContinuous
//2.QuestionsPastPerfectContinuous
(Had NC BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectContinuous", "superCategory"="Past", "name"="QuestionsPastPerfectContinuous", "level"="C2")};


//3.PastPerfectSimple
//3.AfterIfOnlyImaginedPast
(W{REGEXP("(?i)if")} W{REGEXP("(?i)only")} NC Hadnt Done) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="AfterIfOnlyImaginedPast", "level"="C2")};

//4.FixedExpressionHadItNotBeenForIFItHadntBeenFor
(W{REGEXP("(?i)had")} W{REGEXP("(?i)it")} W{REGEXP("(?i)not")} W{REGEXP("(?i)been")} W{REGEXP("(?i)for")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="FixedExpressionHadItNotBeenForIFItHadntBeenFor", "level"="C2")};
(W{REGEXP("(?i)if")} W{REGEXP("(?i)it")} W{REGEXP("(?i)hadn't")} W{REGEXP("(?i)been")} W{REGEXP("(?i)for")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="FixedExpressionHadItNotBeenForIFItHadntBeenFor", "level"="C2")};

//5.InversionWithHardlyWhen
(W{REGEXP("(?i)hardly")} Had NC Done # W{REGEXP("(?i)when")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionWithHardlyWhen", "level"="C2")};
(W{REGEXP("(?i)hardly")} Had NC W{REGEXP("(?i)spoken")} # W{REGEXP("(?i)when")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionWithHardlyWhen", "level"="C2")};
(W{REGEXP("(?i)hardly")} Had NC W{REGEXP("(?i)taken")} # W{REGEXP("(?i)when")}) {-> CREATE(GrammarProfile, "subCategory"="PastPerfectSimple", "superCategory"="Past", "name"="InversionWithHardlyWhen", "level"="C2")};


//4.PresentPerfectContinuous
//6.InversionNotOnlyBut
(W{REGEXP("(?i)not")} W{REGEXP("(?i)only")} Has NC BeenDoing # W{REGEXP("(?i)but")} ) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectContinuous", "superCategory"="Past", "name"="InversionNotOnlyBut", "level"="C2")};


//5.PresentPerfectSimple
//7.Newsworthy
(Has Done) {-> CREATE(GrammarProfile, "subCategory"="PresentPerfectSimple", "superCategory"="Past", "name"="Newsworthy", "level"="C2")};


//SCRIPT C2_Level.C2_Future;

//1.FutureInThePast
//1.BeDueTo
(Was W{REGEXP("(?i)due")} ToDo ) {-> CREATE(GrammarProfile, "subCategory"="FutureInThePast", "superCategory"="Future", "name"="BeDueTo", "level"="C2")};


//2.FuturePerfectContinuous
//2.AssumptionsFuturePerfectContinuous
(WillShall Have BeenDoing) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectContinuous", "superCategory"="Future", "name"="AssumptionsFuturePerfectContinuous", "level"="C2")};


//3.FuturePerfectSimple 
//3.QuestionsFuturePerfectSimple
(WillShall NC Have Done) {-> CREATE(GrammarProfile, "subCategory"="FuturePerfectSimple", "superCategory"="Future", "name"="QuestionsFuturePerfectSimple", "level"="C2")};


//4.FutureWithWillAndShall
//4.LongTermIntentionsWithShall
(Shall) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="LongTermIntentionsWithShall", "level"="C2")};

//5.PredictionsWithShall
(Shall) {-> CREATE(GrammarProfile, "subCategory"="FutureWithWillAndShall", "superCategory"="Future", "name"="PredictionsWithShall", "level"="C2")};



//5.FutureWithBeGoingTo
//6.WithAdverbsBeGoingTo
(Be Going W{REGEXP("(?i)to")} POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="FutureWithBeGoingTo", "superCategory"="Future", "name"="WithAdverbsBeGoingTo", "level"="C2")};


//6.PresentSimpleForFutureUse
//7.InversionWithOnlyWhen
(W{REGEXP("(?i)only")} W{REGEXP("(?i)when")} # Will) {-> CREATE(GrammarProfile, "subCategory"="PresentSimpleForFutureUse", "superCategory"="Future", "name"="InversionWithOnlyWhen", "level"="C2")};


//SCRIPT C2_Level.C2_Passives;

//1.Passives: form
//1.NonFinitePerfectClauses
(W{REGEXP("(?i)having")} BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="NonFinitePerfectClauses", "level"="C2")};
(Not W{REGEXP("(?i)having")} BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="NonFinitePerfectClauses", "level"="C2")};

//2.NonFinitePerfectComplements
(Preposition W{REGEXP("(?i)having")} BeenDone) {-> CREATE(GrammarProfile, "subCategory"="Passives", "superCategory"="Passive", "name"="NonFinitePerfectComplements", "level"="C2")};


//2.GetAndHave
//3.HaveObjectInfinitive
(Have NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="GetAndHave", "superCategory"="Passive", "name"="HaveObjectInfinitive", "level"="C2")};
(Have POS_PRON POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="GetAndHave", "superCategory"="Passive", "name"="HaveObjectInfinitive", "level"="C2")};



//SCRIPT C2_Level.C2_ReportedSpeech;

//SCRIPT C2_Level.C2_Clauses;

//1.ComparativesClause
//1.SoAsToFormal
(W{REGEXP("(?i)so")} POS_ADJ W{REGEXP("(?i)as")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="SoAsToFormal", "level"="C2")}; 

//2.AsIfNonFiniteClause
(W{REGEXP("(?i)as")} W{REGEXP("(?i)if")} NonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="ComparativesClause", "superCategory"="Clause", "name"="AsIfNonFiniteClause", "level"="C2")}; 

//2.CoordinatedClause
//3.NegativeClauseNorFocus
(Not # W{REGEXP("(?i)nor")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="NegativeClauseNorFocus", "level"="C2")}; 
(W{REGEXP("(?i)never")} # W{REGEXP("(?i)nor")}) {-> CREATE(GrammarProfile, "subCategory"="CoordinatedClause", "superCategory"="Clause", "name"="NegativeClauseNorFocus", "level"="C2")}; 


//3.ImperativesClause
//4.LetThirdPersonPronounDevolcingResponsibility
(W{REGEXP("(?i)let")} W{REGEXP("(?i)him")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounDevolcingResponsibility", "level"="C2")}; 
(W{REGEXP("(?i)let")} W{REGEXP("(?i)her")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounDevolcingResponsibility", "level"="C2")}; 
(W{REGEXP("(?i)let")} W{REGEXP("(?i)them")} POS{FEATURE("PosValue", "VB")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="LetThirdPersonPronounDevolcingResponsibility", "level"="C2")}; 

//5.DontYou
(Dont W{REGEXP("(?i)you")}) {-> CREATE(GrammarProfile, "subCategory"="ImperativesClause", "superCategory"="Clause", "name"="DontYou", "level"="C2")}; 


//4.PhrasesExclamationsClause
//6.HowClause
(W{REGEXP("(?i)how")} NC POS_ADV POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PhrasesExclamationsClause", "superCategory"="Clause", "name"="HowClause", "level"="C2")}; 
(W{REGEXP("(?i)how")} NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PhrasesExclamationsClause", "superCategory"="Clause", "name"="HowClause", "level"="C2")}; 

//7.HowAdverbClause
(W{REGEXP("(?i)how")} POS_ADV NC POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="PhrasesExclamationsClause", "superCategory"="Clause", "name"="HowAdverbClause", "level"="C2")}; 


//5.SubordinatedClause
//8.NonFiniteAfterAlthoughThough
(W{REGEXP("(?i)although")} NonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteAfterAlthoughThough", "level"="C2")}; 
(W{REGEXP("(?i)though")} NonFiniteClause) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteAfterAlthoughThough", "level"="C2")}; 
(W{REGEXP("(?i)although")} W{REGEXP("(?i)married")}) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteAfterAlthoughThough", "level"="C2")}; 
(W{REGEXP("(?i)though")} W{REGEXP("(?i)disappointed")}) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="NonFiniteAfterAlthoughThough", "level"="C2")}; 

//9.WerePronounToInfinitiveFormal
(W{REGEXP("(?i)were")} POS_PRON ToDo) {-> CREATE(GrammarProfile, "subCategory"="SubordinatedClause", "superCategory"="Clause", "name"="WerePronounToInfinitiveFormal", "level"="C2")}; 


//6.Conditional
//10.InvertedShouldFuturePossibleOutcomeFormalPolite
(Should NC POS_VERB # NC Would POS_VERB) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="InvertedShouldFuturePossibleOutcomeFormalPolite", "level"="C2")}; 

//11.InvertedPastPerfectImaginedPast (????).
(Had NC Done # NC ModalVerb Have Done) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="InvertedPastPerfectImaginedPast", "level"="C2")}; 

//12.InvertedWereToInfinitiveFormal
(W{REGEXP("(?i)were")} NC ToDo) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="InvertedWereToInfinitiveFormal", "level"="C2")}; 

//13.SubordinatingConjunctionsConditions
(Conjunction) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="SubordinatingConjunctionsConditions", "level"="C2")}; 

//14.WereItNotForFormal
(W{REGEXP("(?i)were")} W{REGEXP("(?i)it")} W{REGEXP("(?i)not")} W{REGEXP("(?i)for")} NC) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="WereItNotForFormal", "level"="C2")}; 

//15.IfItWereNotForFormal (????)
(W{REGEXP("(?i)if")} W{REGEXP("(?i)it")} W{REGEXP("(?i)weren")} SPECIAL{REGEXP("'")} W{REGEXP("t")} W{REGEXP("(?i)for")} NC) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfItWereNotForFormal", "level"="C2")}; 

//16.IfItWereToInfinitiveFormFormal
(W{REGEXP("(?i)if")} W{REGEXP("(?i)it")} W{REGEXP("(?i)were")} ToDo) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="IfItWereToInfinitiveFormFormal", "level"="C2")}; 

//17.WhetherOrNotFormal
(W{REGEXP("(?i)whether")} W{REGEXP("(?i)or")} W{REGEXP("(?i)not")}) {-> CREATE(GrammarProfile, "subCategory"="ConditionalClause", "superCategory"="Clause", "name"="WhetherOrNotFormal", "level"="C2")}; 
